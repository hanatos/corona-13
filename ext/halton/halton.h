// Copyright (c) 2012 Leonhard Gruenschloss (leonhard@gruenschloss.org)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This file is automatically generated.

#ifndef HALTON_SAMPLER_H
#define HALTON_SAMPLER_H
#include <stdlib.h>

// Return the number of supported dimensions.
static inline unsigned halton_get_num_dimensions() { return 256u; }

typedef struct halton_t
{
  unsigned short perm3[243];
  unsigned short perm5[125];
  unsigned short perm7[343];
  unsigned short perm11[121];
  unsigned short perm13[169];
  unsigned short perm17[289];
  unsigned short perm19[361];
  unsigned short perm23[23];
  unsigned short perm29[29];
  unsigned short perm31[31];
  unsigned short perm37[37];
  unsigned short perm41[41];
  unsigned short perm43[43];
  unsigned short perm47[47];
  unsigned short perm53[53];
  unsigned short perm59[59];
  unsigned short perm61[61];
  unsigned short perm67[67];
  unsigned short perm71[71];
  unsigned short perm73[73];
  unsigned short perm79[79];
  unsigned short perm83[83];
  unsigned short perm89[89];
  unsigned short perm97[97];
  unsigned short perm101[101];
  unsigned short perm103[103];
  unsigned short perm107[107];
  unsigned short perm109[109];
  unsigned short perm113[113];
  unsigned short perm127[127];
  unsigned short perm131[131];
  unsigned short perm137[137];
  unsigned short perm139[139];
  unsigned short perm149[149];
  unsigned short perm151[151];
  unsigned short perm157[157];
  unsigned short perm163[163];
  unsigned short perm167[167];
  unsigned short perm173[173];
  unsigned short perm179[179];
  unsigned short perm181[181];
  unsigned short perm191[191];
  unsigned short perm193[193];
  unsigned short perm197[197];
  unsigned short perm199[199];
  unsigned short perm211[211];
  unsigned short perm223[223];
  unsigned short perm227[227];
  unsigned short perm229[229];
  unsigned short perm233[233];
  unsigned short perm239[239];
  unsigned short perm241[241];
  unsigned short perm251[251];
  unsigned short perm257[257];
  unsigned short perm263[263];
  unsigned short perm269[269];
  unsigned short perm271[271];
  unsigned short perm277[277];
  unsigned short perm281[281];
  unsigned short perm283[283];
  unsigned short perm293[293];
  unsigned short perm307[307];
  unsigned short perm311[311];
  unsigned short perm313[313];
  unsigned short perm317[317];
  unsigned short perm331[331];
  unsigned short perm337[337];
  unsigned short perm347[347];
  unsigned short perm349[349];
  unsigned short perm353[353];
  unsigned short perm359[359];
  unsigned short perm367[367];
  unsigned short perm373[373];
  unsigned short perm379[379];
  unsigned short perm383[383];
  unsigned short perm389[389];
  unsigned short perm397[397];
  unsigned short perm401[401];
  unsigned short perm409[409];
  unsigned short perm419[419];
  unsigned short perm421[421];
  unsigned short perm431[431];
  unsigned short perm433[433];
  unsigned short perm439[439];
  unsigned short perm443[443];
  unsigned short perm449[449];
  unsigned short perm457[457];
  unsigned short perm461[461];
  unsigned short perm463[463];
  unsigned short perm467[467];
  unsigned short perm479[479];
  unsigned short perm487[487];
  unsigned short perm491[491];
  unsigned short perm499[499];
  unsigned short perm503[503];
  unsigned short perm509[509];
  unsigned short perm521[521];
  unsigned short perm523[523];
  unsigned short perm541[541];
  unsigned short perm547[547];
  unsigned short perm557[557];
  unsigned short perm563[563];
  unsigned short perm569[569];
  unsigned short perm571[571];
  unsigned short perm577[577];
  unsigned short perm587[587];
  unsigned short perm593[593];
  unsigned short perm599[599];
  unsigned short perm601[601];
  unsigned short perm607[607];
  unsigned short perm613[613];
  unsigned short perm617[617];
  unsigned short perm619[619];
  unsigned short perm631[631];
  unsigned short perm641[641];
  unsigned short perm643[643];
  unsigned short perm647[647];
  unsigned short perm653[653];
  unsigned short perm659[659];
  unsigned short perm661[661];
  unsigned short perm673[673];
  unsigned short perm677[677];
  unsigned short perm683[683];
  unsigned short perm691[691];
  unsigned short perm701[701];
  unsigned short perm709[709];
  unsigned short perm719[719];
  unsigned short perm727[727];
  unsigned short perm733[733];
  unsigned short perm739[739];
  unsigned short perm743[743];
  unsigned short perm751[751];
  unsigned short perm757[757];
  unsigned short perm761[761];
  unsigned short perm769[769];
  unsigned short perm773[773];
  unsigned short perm787[787];
  unsigned short perm797[797];
  unsigned short perm809[809];
  unsigned short perm811[811];
  unsigned short perm821[821];
  unsigned short perm823[823];
  unsigned short perm827[827];
  unsigned short perm829[829];
  unsigned short perm839[839];
  unsigned short perm853[853];
  unsigned short perm857[857];
  unsigned short perm859[859];
  unsigned short perm863[863];
  unsigned short perm877[877];
  unsigned short perm881[881];
  unsigned short perm883[883];
  unsigned short perm887[887];
  unsigned short perm907[907];
  unsigned short perm911[911];
  unsigned short perm919[919];
  unsigned short perm929[929];
  unsigned short perm937[937];
  unsigned short perm941[941];
  unsigned short perm947[947];
  unsigned short perm953[953];
  unsigned short perm967[967];
  unsigned short perm971[971];
  unsigned short perm977[977];
  unsigned short perm983[983];
  unsigned short perm991[991];
  unsigned short perm997[997];
  unsigned short perm1009[1009];
  unsigned short perm1013[1013];
  unsigned short perm1019[1019];
  unsigned short perm1021[1021];
  unsigned short perm1031[1031];
  unsigned short perm1033[1033];
  unsigned short perm1039[1039];
  unsigned short perm1049[1049];
  unsigned short perm1051[1051];
  unsigned short perm1061[1061];
  unsigned short perm1063[1063];
  unsigned short perm1069[1069];
  unsigned short perm1087[1087];
  unsigned short perm1091[1091];
  unsigned short perm1093[1093];
  unsigned short perm1097[1097];
  unsigned short perm1103[1103];
  unsigned short perm1109[1109];
  unsigned short perm1117[1117];
  unsigned short perm1123[1123];
  unsigned short perm1129[1129];
  unsigned short perm1151[1151];
  unsigned short perm1153[1153];
  unsigned short perm1163[1163];
  unsigned short perm1171[1171];
  unsigned short perm1181[1181];
  unsigned short perm1187[1187];
  unsigned short perm1193[1193];
  unsigned short perm1201[1201];
  unsigned short perm1213[1213];
  unsigned short perm1217[1217];
  unsigned short perm1223[1223];
  unsigned short perm1229[1229];
  unsigned short perm1231[1231];
  unsigned short perm1237[1237];
  unsigned short perm1249[1249];
  unsigned short perm1259[1259];
  unsigned short perm1277[1277];
  unsigned short perm1279[1279];
  unsigned short perm1283[1283];
  unsigned short perm1289[1289];
  unsigned short perm1291[1291];
  unsigned short perm1297[1297];
  unsigned short perm1301[1301];
  unsigned short perm1303[1303];
  unsigned short perm1307[1307];
  unsigned short perm1319[1319];
  unsigned short perm1321[1321];
  unsigned short perm1327[1327];
  unsigned short perm1361[1361];
  unsigned short perm1367[1367];
  unsigned short perm1373[1373];
  unsigned short perm1381[1381];
  unsigned short perm1399[1399];
  unsigned short perm1409[1409];
  unsigned short perm1423[1423];
  unsigned short perm1427[1427];
  unsigned short perm1429[1429];
  unsigned short perm1433[1433];
  unsigned short perm1439[1439];
  unsigned short perm1447[1447];
  unsigned short perm1451[1451];
  unsigned short perm1453[1453];
  unsigned short perm1459[1459];
  unsigned short perm1471[1471];
  unsigned short perm1481[1481];
  unsigned short perm1483[1483];
  unsigned short perm1487[1487];
  unsigned short perm1489[1489];
  unsigned short perm1493[1493];
  unsigned short perm1499[1499];
  unsigned short perm1511[1511];
  unsigned short perm1523[1523];
  unsigned short perm1531[1531];
  unsigned short perm1543[1543];
  unsigned short perm1549[1549];
  unsigned short perm1553[1553];
  unsigned short perm1559[1559];
  unsigned short perm1567[1567];
  unsigned short perm1571[1571];
  unsigned short perm1579[1579];
  unsigned short perm1583[1583];
  unsigned short perm1597[1597];
  unsigned short perm1601[1601];
  unsigned short perm1607[1607];
  unsigned short perm1609[1609];
  unsigned short perm1613[1613];
  unsigned short perm1619[1619];
}
halton_t;

// Special case: radical inverse in base 2, with direct bit reversal.
static inline float halton2(const halton_t *h, unsigned index)
{
    index = (index << 16) | (index >> 16);
    index = ((index & 0x00ff00ff) << 8) | ((index & 0xff00ff00) >> 8);
    index = ((index & 0x0f0f0f0f) << 4) | ((index & 0xf0f0f0f0) >> 4);
    index = ((index & 0x33333333) << 2) | ((index & 0xcccccccc) >> 2);
    index = ((index & 0x55555555) << 1) | ((index & 0xaaaaaaaa) >> 1);
    union Result
    {
        unsigned u;
        float f;
    } result; // Write reversed bits directly into floating-point mantissa.
    result.u = 0x3f800000u | (index >> 9);
    return result.f - 1.f;
}



static inline float halton3(const halton_t *h, const unsigned index)
{
    return (h->perm3[index % 243u] * 14348907u +
            h->perm3[(index / 243u) % 243u] * 59049u +
            h->perm3[(index / 59049u) % 243u] * 243u +
            h->perm3[(index / 14348907u) % 243u]) * (float)(0x1.fffffcp-1 / 3486784401u); // Results in [0,1).
}


static inline float halton5(const halton_t *h, const unsigned index)
{
    return (h->perm5[index % 125u] * 1953125u +
            h->perm5[(index / 125u) % 125u] * 15625u +
            h->perm5[(index / 15625u) % 125u] * 125u +
            h->perm5[(index / 1953125u) % 125u]) * (float)(0x1.fffffcp-1 / 244140625u); // Results in [0,1).
}


static inline float halton7(const halton_t *h, const unsigned index)
{
    return (h->perm7[index % 343u] * 117649u +
            h->perm7[(index / 343u) % 343u] * 343u +
            h->perm7[(index / 117649u) % 343u]) * (float)(0x1.fffffcp-1 / 40353607u); // Results in [0,1).
}


static inline float halton11(const halton_t *h, const unsigned index)
{
    return (h->perm11[index % 121u] * 1771561u +
            h->perm11[(index / 121u) % 121u] * 14641u +
            h->perm11[(index / 14641u) % 121u] * 121u +
            h->perm11[(index / 1771561u) % 121u]) * (float)(0x1.fffffcp-1 / 214358881u); // Results in [0,1).
}


static inline float halton13(const halton_t *h, const unsigned index)
{
    return (h->perm13[index % 169u] * 4826809u +
            h->perm13[(index / 169u) % 169u] * 28561u +
            h->perm13[(index / 28561u) % 169u] * 169u +
            h->perm13[(index / 4826809u) % 169u]) * (float)(0x1.fffffcp-1 / 815730721u); // Results in [0,1).
}


static inline float halton17(const halton_t *h, const unsigned index)
{
    return (h->perm17[index % 289u] * 83521u +
            h->perm17[(index / 289u) % 289u] * 289u +
            h->perm17[(index / 83521u) % 289u]) * (float)(0x1.fffffcp-1 / 24137569u); // Results in [0,1).
}


static inline float halton19(const halton_t *h, const unsigned index)
{
    return (h->perm19[index % 361u] * 130321u +
            h->perm19[(index / 361u) % 361u] * 361u +
            h->perm19[(index / 130321u) % 361u]) * (float)(0x1.fffffcp-1 / 47045881u); // Results in [0,1).
}


static inline float halton23(const halton_t *h, const unsigned index)
{
    return (h->perm23[index % 23u] * 148035889u +
            h->perm23[(index / 23u) % 23u] * 6436343u +
            h->perm23[(index / 529u) % 23u] * 279841u +
            h->perm23[(index / 12167u) % 23u] * 12167u +
            h->perm23[(index / 279841u) % 23u] * 529u +
            h->perm23[(index / 6436343u) % 23u] * 23u +
            h->perm23[(index / 148035889u) % 23u]) * (float)(0x1.fffffcp-1 / 3404825447u); // Results in [0,1).
}


static inline float halton29(const halton_t *h, const unsigned index)
{
    return (h->perm29[index % 29u] * 20511149u +
            h->perm29[(index / 29u) % 29u] * 707281u +
            h->perm29[(index / 841u) % 29u] * 24389u +
            h->perm29[(index / 24389u) % 29u] * 841u +
            h->perm29[(index / 707281u) % 29u] * 29u +
            h->perm29[(index / 20511149u) % 29u]) * (float)(0x1.fffffcp-1 / 594823321u); // Results in [0,1).
}


static inline float halton31(const halton_t *h, const unsigned index)
{
    return (h->perm31[index % 31u] * 28629151u +
            h->perm31[(index / 31u) % 31u] * 923521u +
            h->perm31[(index / 961u) % 31u] * 29791u +
            h->perm31[(index / 29791u) % 31u] * 961u +
            h->perm31[(index / 923521u) % 31u] * 31u +
            h->perm31[(index / 28629151u) % 31u]) * (float)(0x1.fffffcp-1 / 887503681u); // Results in [0,1).
}


static inline float halton37(const halton_t *h, const unsigned index)
{
    return (h->perm37[index % 37u] * 69343957u +
            h->perm37[(index / 37u) % 37u] * 1874161u +
            h->perm37[(index / 1369u) % 37u] * 50653u +
            h->perm37[(index / 50653u) % 37u] * 1369u +
            h->perm37[(index / 1874161u) % 37u] * 37u +
            h->perm37[(index / 69343957u) % 37u]) * (float)(0x1.fffffcp-1 / 2565726409u); // Results in [0,1).
}


static inline float halton41(const halton_t *h, const unsigned index)
{
    return (h->perm41[index % 41u] * 2825761u +
            h->perm41[(index / 41u) % 41u] * 68921u +
            h->perm41[(index / 1681u) % 41u] * 1681u +
            h->perm41[(index / 68921u) % 41u] * 41u +
            h->perm41[(index / 2825761u) % 41u]) * (float)(0x1.fffffcp-1 / 115856201u); // Results in [0,1).
}


static inline float halton43(const halton_t *h, const unsigned index)
{
    return (h->perm43[index % 43u] * 3418801u +
            h->perm43[(index / 43u) % 43u] * 79507u +
            h->perm43[(index / 1849u) % 43u] * 1849u +
            h->perm43[(index / 79507u) % 43u] * 43u +
            h->perm43[(index / 3418801u) % 43u]) * (float)(0x1.fffffcp-1 / 147008443u); // Results in [0,1).
}


static inline float halton47(const halton_t *h, const unsigned index)
{
    return (h->perm47[index % 47u] * 4879681u +
            h->perm47[(index / 47u) % 47u] * 103823u +
            h->perm47[(index / 2209u) % 47u] * 2209u +
            h->perm47[(index / 103823u) % 47u] * 47u +
            h->perm47[(index / 4879681u) % 47u]) * (float)(0x1.fffffcp-1 / 229345007u); // Results in [0,1).
}


static inline float halton53(const halton_t *h, const unsigned index)
{
    return (h->perm53[index % 53u] * 7890481u +
            h->perm53[(index / 53u) % 53u] * 148877u +
            h->perm53[(index / 2809u) % 53u] * 2809u +
            h->perm53[(index / 148877u) % 53u] * 53u +
            h->perm53[(index / 7890481u) % 53u]) * (float)(0x1.fffffcp-1 / 418195493u); // Results in [0,1).
}


static inline float halton59(const halton_t *h, const unsigned index)
{
    return (h->perm59[index % 59u] * 12117361u +
            h->perm59[(index / 59u) % 59u] * 205379u +
            h->perm59[(index / 3481u) % 59u] * 3481u +
            h->perm59[(index / 205379u) % 59u] * 59u +
            h->perm59[(index / 12117361u) % 59u]) * (float)(0x1.fffffcp-1 / 714924299u); // Results in [0,1).
}


static inline float halton61(const halton_t *h, const unsigned index)
{
    return (h->perm61[index % 61u] * 13845841u +
            h->perm61[(index / 61u) % 61u] * 226981u +
            h->perm61[(index / 3721u) % 61u] * 3721u +
            h->perm61[(index / 226981u) % 61u] * 61u +
            h->perm61[(index / 13845841u) % 61u]) * (float)(0x1.fffffcp-1 / 844596301u); // Results in [0,1).
}


static inline float halton67(const halton_t *h, const unsigned index)
{
    return (h->perm67[index % 67u] * 20151121u +
            h->perm67[(index / 67u) % 67u] * 300763u +
            h->perm67[(index / 4489u) % 67u] * 4489u +
            h->perm67[(index / 300763u) % 67u] * 67u +
            h->perm67[(index / 20151121u) % 67u]) * (float)(0x1.fffffcp-1 / 1350125107u); // Results in [0,1).
}


static inline float halton71(const halton_t *h, const unsigned index)
{
    return (h->perm71[index % 71u] * 25411681u +
            h->perm71[(index / 71u) % 71u] * 357911u +
            h->perm71[(index / 5041u) % 71u] * 5041u +
            h->perm71[(index / 357911u) % 71u] * 71u +
            h->perm71[(index / 25411681u) % 71u]) * (float)(0x1.fffffcp-1 / 1804229351u); // Results in [0,1).
}


static inline float halton73(const halton_t *h, const unsigned index)
{
    return (h->perm73[index % 73u] * 28398241u +
            h->perm73[(index / 73u) % 73u] * 389017u +
            h->perm73[(index / 5329u) % 73u] * 5329u +
            h->perm73[(index / 389017u) % 73u] * 73u +
            h->perm73[(index / 28398241u) % 73u]) * (float)(0x1.fffffcp-1 / 2073071593u); // Results in [0,1).
}


static inline float halton79(const halton_t *h, const unsigned index)
{
    return (h->perm79[index % 79u] * 38950081u +
            h->perm79[(index / 79u) % 79u] * 493039u +
            h->perm79[(index / 6241u) % 79u] * 6241u +
            h->perm79[(index / 493039u) % 79u] * 79u +
            h->perm79[(index / 38950081u) % 79u]) * (float)(0x1.fffffcp-1 / 3077056399u); // Results in [0,1).
}


static inline float halton83(const halton_t *h, const unsigned index)
{
    return (h->perm83[index % 83u] * 47458321u +
            h->perm83[(index / 83u) % 83u] * 571787u +
            h->perm83[(index / 6889u) % 83u] * 6889u +
            h->perm83[(index / 571787u) % 83u] * 83u +
            h->perm83[(index / 47458321u) % 83u]) * (float)(0x1.fffffcp-1 / 3939040643u); // Results in [0,1).
}


static inline float halton89(const halton_t *h, const unsigned index)
{
    return (h->perm89[index % 89u] * 704969u +
            h->perm89[(index / 89u) % 89u] * 7921u +
            h->perm89[(index / 7921u) % 89u] * 89u +
            h->perm89[(index / 704969u) % 89u]) * (float)(0x1.fffffcp-1 / 62742241u); // Results in [0,1).
}


static inline float halton97(const halton_t *h, const unsigned index)
{
    return (h->perm97[index % 97u] * 912673u +
            h->perm97[(index / 97u) % 97u] * 9409u +
            h->perm97[(index / 9409u) % 97u] * 97u +
            h->perm97[(index / 912673u) % 97u]) * (float)(0x1.fffffcp-1 / 88529281u); // Results in [0,1).
}


static inline float halton101(const halton_t *h, const unsigned index)
{
    return (h->perm101[index % 101u] * 1030301u +
            h->perm101[(index / 101u) % 101u] * 10201u +
            h->perm101[(index / 10201u) % 101u] * 101u +
            h->perm101[(index / 1030301u) % 101u]) * (float)(0x1.fffffcp-1 / 104060401u); // Results in [0,1).
}


static inline float halton103(const halton_t *h, const unsigned index)
{
    return (h->perm103[index % 103u] * 1092727u +
            h->perm103[(index / 103u) % 103u] * 10609u +
            h->perm103[(index / 10609u) % 103u] * 103u +
            h->perm103[(index / 1092727u) % 103u]) * (float)(0x1.fffffcp-1 / 112550881u); // Results in [0,1).
}


static inline float halton107(const halton_t *h, const unsigned index)
{
    return (h->perm107[index % 107u] * 1225043u +
            h->perm107[(index / 107u) % 107u] * 11449u +
            h->perm107[(index / 11449u) % 107u] * 107u +
            h->perm107[(index / 1225043u) % 107u]) * (float)(0x1.fffffcp-1 / 131079601u); // Results in [0,1).
}


static inline float halton109(const halton_t *h, const unsigned index)
{
    return (h->perm109[index % 109u] * 1295029u +
            h->perm109[(index / 109u) % 109u] * 11881u +
            h->perm109[(index / 11881u) % 109u] * 109u +
            h->perm109[(index / 1295029u) % 109u]) * (float)(0x1.fffffcp-1 / 141158161u); // Results in [0,1).
}


static inline float halton113(const halton_t *h, const unsigned index)
{
    return (h->perm113[index % 113u] * 1442897u +
            h->perm113[(index / 113u) % 113u] * 12769u +
            h->perm113[(index / 12769u) % 113u] * 113u +
            h->perm113[(index / 1442897u) % 113u]) * (float)(0x1.fffffcp-1 / 163047361u); // Results in [0,1).
}


static inline float halton127(const halton_t *h, const unsigned index)
{
    return (h->perm127[index % 127u] * 2048383u +
            h->perm127[(index / 127u) % 127u] * 16129u +
            h->perm127[(index / 16129u) % 127u] * 127u +
            h->perm127[(index / 2048383u) % 127u]) * (float)(0x1.fffffcp-1 / 260144641u); // Results in [0,1).
}


static inline float halton131(const halton_t *h, const unsigned index)
{
    return (h->perm131[index % 131u] * 2248091u +
            h->perm131[(index / 131u) % 131u] * 17161u +
            h->perm131[(index / 17161u) % 131u] * 131u +
            h->perm131[(index / 2248091u) % 131u]) * (float)(0x1.fffffcp-1 / 294499921u); // Results in [0,1).
}


static inline float halton137(const halton_t *h, const unsigned index)
{
    return (h->perm137[index % 137u] * 2571353u +
            h->perm137[(index / 137u) % 137u] * 18769u +
            h->perm137[(index / 18769u) % 137u] * 137u +
            h->perm137[(index / 2571353u) % 137u]) * (float)(0x1.fffffcp-1 / 352275361u); // Results in [0,1).
}


static inline float halton139(const halton_t *h, const unsigned index)
{
    return (h->perm139[index % 139u] * 2685619u +
            h->perm139[(index / 139u) % 139u] * 19321u +
            h->perm139[(index / 19321u) % 139u] * 139u +
            h->perm139[(index / 2685619u) % 139u]) * (float)(0x1.fffffcp-1 / 373301041u); // Results in [0,1).
}


static inline float halton149(const halton_t *h, const unsigned index)
{
    return (h->perm149[index % 149u] * 3307949u +
            h->perm149[(index / 149u) % 149u] * 22201u +
            h->perm149[(index / 22201u) % 149u] * 149u +
            h->perm149[(index / 3307949u) % 149u]) * (float)(0x1.fffffcp-1 / 492884401u); // Results in [0,1).
}


static inline float halton151(const halton_t *h, const unsigned index)
{
    return (h->perm151[index % 151u] * 3442951u +
            h->perm151[(index / 151u) % 151u] * 22801u +
            h->perm151[(index / 22801u) % 151u] * 151u +
            h->perm151[(index / 3442951u) % 151u]) * (float)(0x1.fffffcp-1 / 519885601u); // Results in [0,1).
}


static inline float halton157(const halton_t *h, const unsigned index)
{
    return (h->perm157[index % 157u] * 3869893u +
            h->perm157[(index / 157u) % 157u] * 24649u +
            h->perm157[(index / 24649u) % 157u] * 157u +
            h->perm157[(index / 3869893u) % 157u]) * (float)(0x1.fffffcp-1 / 607573201u); // Results in [0,1).
}


static inline float halton163(const halton_t *h, const unsigned index)
{
    return (h->perm163[index % 163u] * 4330747u +
            h->perm163[(index / 163u) % 163u] * 26569u +
            h->perm163[(index / 26569u) % 163u] * 163u +
            h->perm163[(index / 4330747u) % 163u]) * (float)(0x1.fffffcp-1 / 705911761u); // Results in [0,1).
}


static inline float halton167(const halton_t *h, const unsigned index)
{
    return (h->perm167[index % 167u] * 4657463u +
            h->perm167[(index / 167u) % 167u] * 27889u +
            h->perm167[(index / 27889u) % 167u] * 167u +
            h->perm167[(index / 4657463u) % 167u]) * (float)(0x1.fffffcp-1 / 777796321u); // Results in [0,1).
}


static inline float halton173(const halton_t *h, const unsigned index)
{
    return (h->perm173[index % 173u] * 5177717u +
            h->perm173[(index / 173u) % 173u] * 29929u +
            h->perm173[(index / 29929u) % 173u] * 173u +
            h->perm173[(index / 5177717u) % 173u]) * (float)(0x1.fffffcp-1 / 895745041u); // Results in [0,1).
}


static inline float halton179(const halton_t *h, const unsigned index)
{
    return (h->perm179[index % 179u] * 5735339u +
            h->perm179[(index / 179u) % 179u] * 32041u +
            h->perm179[(index / 32041u) % 179u] * 179u +
            h->perm179[(index / 5735339u) % 179u]) * (float)(0x1.fffffcp-1 / 1026625681u); // Results in [0,1).
}


static inline float halton181(const halton_t *h, const unsigned index)
{
    return (h->perm181[index % 181u] * 5929741u +
            h->perm181[(index / 181u) % 181u] * 32761u +
            h->perm181[(index / 32761u) % 181u] * 181u +
            h->perm181[(index / 5929741u) % 181u]) * (float)(0x1.fffffcp-1 / 1073283121u); // Results in [0,1).
}


static inline float halton191(const halton_t *h, const unsigned index)
{
    return (h->perm191[index % 191u] * 6967871u +
            h->perm191[(index / 191u) % 191u] * 36481u +
            h->perm191[(index / 36481u) % 191u] * 191u +
            h->perm191[(index / 6967871u) % 191u]) * (float)(0x1.fffffcp-1 / 1330863361u); // Results in [0,1).
}


static inline float halton193(const halton_t *h, const unsigned index)
{
    return (h->perm193[index % 193u] * 7189057u +
            h->perm193[(index / 193u) % 193u] * 37249u +
            h->perm193[(index / 37249u) % 193u] * 193u +
            h->perm193[(index / 7189057u) % 193u]) * (float)(0x1.fffffcp-1 / 1387488001u); // Results in [0,1).
}


static inline float halton197(const halton_t *h, const unsigned index)
{
    return (h->perm197[index % 197u] * 7645373u +
            h->perm197[(index / 197u) % 197u] * 38809u +
            h->perm197[(index / 38809u) % 197u] * 197u +
            h->perm197[(index / 7645373u) % 197u]) * (float)(0x1.fffffcp-1 / 1506138481u); // Results in [0,1).
}


static inline float halton199(const halton_t *h, const unsigned index)
{
    return (h->perm199[index % 199u] * 7880599u +
            h->perm199[(index / 199u) % 199u] * 39601u +
            h->perm199[(index / 39601u) % 199u] * 199u +
            h->perm199[(index / 7880599u) % 199u]) * (float)(0x1.fffffcp-1 / 1568239201u); // Results in [0,1).
}


static inline float halton211(const halton_t *h, const unsigned index)
{
    return (h->perm211[index % 211u] * 9393931u +
            h->perm211[(index / 211u) % 211u] * 44521u +
            h->perm211[(index / 44521u) % 211u] * 211u +
            h->perm211[(index / 9393931u) % 211u]) * (float)(0x1.fffffcp-1 / 1982119441u); // Results in [0,1).
}


static inline float halton223(const halton_t *h, const unsigned index)
{
    return (h->perm223[index % 223u] * 11089567u +
            h->perm223[(index / 223u) % 223u] * 49729u +
            h->perm223[(index / 49729u) % 223u] * 223u +
            h->perm223[(index / 11089567u) % 223u]) * (float)(0x1.fffffcp-1 / 2472973441u); // Results in [0,1).
}


static inline float halton227(const halton_t *h, const unsigned index)
{
    return (h->perm227[index % 227u] * 11697083u +
            h->perm227[(index / 227u) % 227u] * 51529u +
            h->perm227[(index / 51529u) % 227u] * 227u +
            h->perm227[(index / 11697083u) % 227u]) * (float)(0x1.fffffcp-1 / 2655237841u); // Results in [0,1).
}


static inline float halton229(const halton_t *h, const unsigned index)
{
    return (h->perm229[index % 229u] * 12008989u +
            h->perm229[(index / 229u) % 229u] * 52441u +
            h->perm229[(index / 52441u) % 229u] * 229u +
            h->perm229[(index / 12008989u) % 229u]) * (float)(0x1.fffffcp-1 / 2750058481u); // Results in [0,1).
}


static inline float halton233(const halton_t *h, const unsigned index)
{
    return (h->perm233[index % 233u] * 12649337u +
            h->perm233[(index / 233u) % 233u] * 54289u +
            h->perm233[(index / 54289u) % 233u] * 233u +
            h->perm233[(index / 12649337u) % 233u]) * (float)(0x1.fffffcp-1 / 2947295521u); // Results in [0,1).
}


static inline float halton239(const halton_t *h, const unsigned index)
{
    return (h->perm239[index % 239u] * 13651919u +
            h->perm239[(index / 239u) % 239u] * 57121u +
            h->perm239[(index / 57121u) % 239u] * 239u +
            h->perm239[(index / 13651919u) % 239u]) * (float)(0x1.fffffcp-1 / 3262808641u); // Results in [0,1).
}


static inline float halton241(const halton_t *h, const unsigned index)
{
    return (h->perm241[index % 241u] * 13997521u +
            h->perm241[(index / 241u) % 241u] * 58081u +
            h->perm241[(index / 58081u) % 241u] * 241u +
            h->perm241[(index / 13997521u) % 241u]) * (float)(0x1.fffffcp-1 / 3373402561u); // Results in [0,1).
}


static inline float halton251(const halton_t *h, const unsigned index)
{
    return (h->perm251[index % 251u] * 15813251u +
            h->perm251[(index / 251u) % 251u] * 63001u +
            h->perm251[(index / 63001u) % 251u] * 251u +
            h->perm251[(index / 15813251u) % 251u]) * (float)(0x1.fffffcp-1 / 3969126001u); // Results in [0,1).
}


static inline float halton257(const halton_t *h, const unsigned index)
{
    return (h->perm257[index % 257u] * 66049u +
            h->perm257[(index / 257u) % 257u] * 257u +
            h->perm257[(index / 66049u) % 257u]) * (float)(0x1.fffffcp-1 / 16974593u); // Results in [0,1).
}


static inline float halton263(const halton_t *h, const unsigned index)
{
    return (h->perm263[index % 263u] * 69169u +
            h->perm263[(index / 263u) % 263u] * 263u +
            h->perm263[(index / 69169u) % 263u]) * (float)(0x1.fffffcp-1 / 18191447u); // Results in [0,1).
}


static inline float halton269(const halton_t *h, const unsigned index)
{
    return (h->perm269[index % 269u] * 72361u +
            h->perm269[(index / 269u) % 269u] * 269u +
            h->perm269[(index / 72361u) % 269u]) * (float)(0x1.fffffcp-1 / 19465109u); // Results in [0,1).
}


static inline float halton271(const halton_t *h, const unsigned index)
{
    return (h->perm271[index % 271u] * 73441u +
            h->perm271[(index / 271u) % 271u] * 271u +
            h->perm271[(index / 73441u) % 271u]) * (float)(0x1.fffffcp-1 / 19902511u); // Results in [0,1).
}


static inline float halton277(const halton_t *h, const unsigned index)
{
    return (h->perm277[index % 277u] * 76729u +
            h->perm277[(index / 277u) % 277u] * 277u +
            h->perm277[(index / 76729u) % 277u]) * (float)(0x1.fffffcp-1 / 21253933u); // Results in [0,1).
}


static inline float halton281(const halton_t *h, const unsigned index)
{
    return (h->perm281[index % 281u] * 78961u +
            h->perm281[(index / 281u) % 281u] * 281u +
            h->perm281[(index / 78961u) % 281u]) * (float)(0x1.fffffcp-1 / 22188041u); // Results in [0,1).
}


static inline float halton283(const halton_t *h, const unsigned index)
{
    return (h->perm283[index % 283u] * 80089u +
            h->perm283[(index / 283u) % 283u] * 283u +
            h->perm283[(index / 80089u) % 283u]) * (float)(0x1.fffffcp-1 / 22665187u); // Results in [0,1).
}


static inline float halton293(const halton_t *h, const unsigned index)
{
    return (h->perm293[index % 293u] * 85849u +
            h->perm293[(index / 293u) % 293u] * 293u +
            h->perm293[(index / 85849u) % 293u]) * (float)(0x1.fffffcp-1 / 25153757u); // Results in [0,1).
}


static inline float halton307(const halton_t *h, const unsigned index)
{
    return (h->perm307[index % 307u] * 94249u +
            h->perm307[(index / 307u) % 307u] * 307u +
            h->perm307[(index / 94249u) % 307u]) * (float)(0x1.fffffcp-1 / 28934443u); // Results in [0,1).
}


static inline float halton311(const halton_t *h, const unsigned index)
{
    return (h->perm311[index % 311u] * 96721u +
            h->perm311[(index / 311u) % 311u] * 311u +
            h->perm311[(index / 96721u) % 311u]) * (float)(0x1.fffffcp-1 / 30080231u); // Results in [0,1).
}


static inline float halton313(const halton_t *h, const unsigned index)
{
    return (h->perm313[index % 313u] * 97969u +
            h->perm313[(index / 313u) % 313u] * 313u +
            h->perm313[(index / 97969u) % 313u]) * (float)(0x1.fffffcp-1 / 30664297u); // Results in [0,1).
}


static inline float halton317(const halton_t *h, const unsigned index)
{
    return (h->perm317[index % 317u] * 100489u +
            h->perm317[(index / 317u) % 317u] * 317u +
            h->perm317[(index / 100489u) % 317u]) * (float)(0x1.fffffcp-1 / 31855013u); // Results in [0,1).
}


static inline float halton331(const halton_t *h, const unsigned index)
{
    return (h->perm331[index % 331u] * 109561u +
            h->perm331[(index / 331u) % 331u] * 331u +
            h->perm331[(index / 109561u) % 331u]) * (float)(0x1.fffffcp-1 / 36264691u); // Results in [0,1).
}


static inline float halton337(const halton_t *h, const unsigned index)
{
    return (h->perm337[index % 337u] * 113569u +
            h->perm337[(index / 337u) % 337u] * 337u +
            h->perm337[(index / 113569u) % 337u]) * (float)(0x1.fffffcp-1 / 38272753u); // Results in [0,1).
}


static inline float halton347(const halton_t *h, const unsigned index)
{
    return (h->perm347[index % 347u] * 120409u +
            h->perm347[(index / 347u) % 347u] * 347u +
            h->perm347[(index / 120409u) % 347u]) * (float)(0x1.fffffcp-1 / 41781923u); // Results in [0,1).
}


static inline float halton349(const halton_t *h, const unsigned index)
{
    return (h->perm349[index % 349u] * 121801u +
            h->perm349[(index / 349u) % 349u] * 349u +
            h->perm349[(index / 121801u) % 349u]) * (float)(0x1.fffffcp-1 / 42508549u); // Results in [0,1).
}


static inline float halton353(const halton_t *h, const unsigned index)
{
    return (h->perm353[index % 353u] * 124609u +
            h->perm353[(index / 353u) % 353u] * 353u +
            h->perm353[(index / 124609u) % 353u]) * (float)(0x1.fffffcp-1 / 43986977u); // Results in [0,1).
}


static inline float halton359(const halton_t *h, const unsigned index)
{
    return (h->perm359[index % 359u] * 128881u +
            h->perm359[(index / 359u) % 359u] * 359u +
            h->perm359[(index / 128881u) % 359u]) * (float)(0x1.fffffcp-1 / 46268279u); // Results in [0,1).
}


static inline float halton367(const halton_t *h, const unsigned index)
{
    return (h->perm367[index % 367u] * 134689u +
            h->perm367[(index / 367u) % 367u] * 367u +
            h->perm367[(index / 134689u) % 367u]) * (float)(0x1.fffffcp-1 / 49430863u); // Results in [0,1).
}


static inline float halton373(const halton_t *h, const unsigned index)
{
    return (h->perm373[index % 373u] * 139129u +
            h->perm373[(index / 373u) % 373u] * 373u +
            h->perm373[(index / 139129u) % 373u]) * (float)(0x1.fffffcp-1 / 51895117u); // Results in [0,1).
}


static inline float halton379(const halton_t *h, const unsigned index)
{
    return (h->perm379[index % 379u] * 143641u +
            h->perm379[(index / 379u) % 379u] * 379u +
            h->perm379[(index / 143641u) % 379u]) * (float)(0x1.fffffcp-1 / 54439939u); // Results in [0,1).
}


static inline float halton383(const halton_t *h, const unsigned index)
{
    return (h->perm383[index % 383u] * 146689u +
            h->perm383[(index / 383u) % 383u] * 383u +
            h->perm383[(index / 146689u) % 383u]) * (float)(0x1.fffffcp-1 / 56181887u); // Results in [0,1).
}


static inline float halton389(const halton_t *h, const unsigned index)
{
    return (h->perm389[index % 389u] * 151321u +
            h->perm389[(index / 389u) % 389u] * 389u +
            h->perm389[(index / 151321u) % 389u]) * (float)(0x1.fffffcp-1 / 58863869u); // Results in [0,1).
}


static inline float halton397(const halton_t *h, const unsigned index)
{
    return (h->perm397[index % 397u] * 157609u +
            h->perm397[(index / 397u) % 397u] * 397u +
            h->perm397[(index / 157609u) % 397u]) * (float)(0x1.fffffcp-1 / 62570773u); // Results in [0,1).
}


static inline float halton401(const halton_t *h, const unsigned index)
{
    return (h->perm401[index % 401u] * 160801u +
            h->perm401[(index / 401u) % 401u] * 401u +
            h->perm401[(index / 160801u) % 401u]) * (float)(0x1.fffffcp-1 / 64481201u); // Results in [0,1).
}


static inline float halton409(const halton_t *h, const unsigned index)
{
    return (h->perm409[index % 409u] * 167281u +
            h->perm409[(index / 409u) % 409u] * 409u +
            h->perm409[(index / 167281u) % 409u]) * (float)(0x1.fffffcp-1 / 68417929u); // Results in [0,1).
}


static inline float halton419(const halton_t *h, const unsigned index)
{
    return (h->perm419[index % 419u] * 175561u +
            h->perm419[(index / 419u) % 419u] * 419u +
            h->perm419[(index / 175561u) % 419u]) * (float)(0x1.fffffcp-1 / 73560059u); // Results in [0,1).
}


static inline float halton421(const halton_t *h, const unsigned index)
{
    return (h->perm421[index % 421u] * 177241u +
            h->perm421[(index / 421u) % 421u] * 421u +
            h->perm421[(index / 177241u) % 421u]) * (float)(0x1.fffffcp-1 / 74618461u); // Results in [0,1).
}


static inline float halton431(const halton_t *h, const unsigned index)
{
    return (h->perm431[index % 431u] * 185761u +
            h->perm431[(index / 431u) % 431u] * 431u +
            h->perm431[(index / 185761u) % 431u]) * (float)(0x1.fffffcp-1 / 80062991u); // Results in [0,1).
}


static inline float halton433(const halton_t *h, const unsigned index)
{
    return (h->perm433[index % 433u] * 187489u +
            h->perm433[(index / 433u) % 433u] * 433u +
            h->perm433[(index / 187489u) % 433u]) * (float)(0x1.fffffcp-1 / 81182737u); // Results in [0,1).
}


static inline float halton439(const halton_t *h, const unsigned index)
{
    return (h->perm439[index % 439u] * 192721u +
            h->perm439[(index / 439u) % 439u] * 439u +
            h->perm439[(index / 192721u) % 439u]) * (float)(0x1.fffffcp-1 / 84604519u); // Results in [0,1).
}


static inline float halton443(const halton_t *h, const unsigned index)
{
    return (h->perm443[index % 443u] * 196249u +
            h->perm443[(index / 443u) % 443u] * 443u +
            h->perm443[(index / 196249u) % 443u]) * (float)(0x1.fffffcp-1 / 86938307u); // Results in [0,1).
}


static inline float halton449(const halton_t *h, const unsigned index)
{
    return (h->perm449[index % 449u] * 201601u +
            h->perm449[(index / 449u) % 449u] * 449u +
            h->perm449[(index / 201601u) % 449u]) * (float)(0x1.fffffcp-1 / 90518849u); // Results in [0,1).
}


static inline float halton457(const halton_t *h, const unsigned index)
{
    return (h->perm457[index % 457u] * 208849u +
            h->perm457[(index / 457u) % 457u] * 457u +
            h->perm457[(index / 208849u) % 457u]) * (float)(0x1.fffffcp-1 / 95443993u); // Results in [0,1).
}


static inline float halton461(const halton_t *h, const unsigned index)
{
    return (h->perm461[index % 461u] * 212521u +
            h->perm461[(index / 461u) % 461u] * 461u +
            h->perm461[(index / 212521u) % 461u]) * (float)(0x1.fffffcp-1 / 97972181u); // Results in [0,1).
}


static inline float halton463(const halton_t *h, const unsigned index)
{
    return (h->perm463[index % 463u] * 214369u +
            h->perm463[(index / 463u) % 463u] * 463u +
            h->perm463[(index / 214369u) % 463u]) * (float)(0x1.fffffcp-1 / 99252847u); // Results in [0,1).
}


static inline float halton467(const halton_t *h, const unsigned index)
{
    return (h->perm467[index % 467u] * 218089u +
            h->perm467[(index / 467u) % 467u] * 467u +
            h->perm467[(index / 218089u) % 467u]) * (float)(0x1.fffffcp-1 / 101847563u); // Results in [0,1).
}


static inline float halton479(const halton_t *h, const unsigned index)
{
    return (h->perm479[index % 479u] * 229441u +
            h->perm479[(index / 479u) % 479u] * 479u +
            h->perm479[(index / 229441u) % 479u]) * (float)(0x1.fffffcp-1 / 109902239u); // Results in [0,1).
}


static inline float halton487(const halton_t *h, const unsigned index)
{
    return (h->perm487[index % 487u] * 237169u +
            h->perm487[(index / 487u) % 487u] * 487u +
            h->perm487[(index / 237169u) % 487u]) * (float)(0x1.fffffcp-1 / 115501303u); // Results in [0,1).
}


static inline float halton491(const halton_t *h, const unsigned index)
{
    return (h->perm491[index % 491u] * 241081u +
            h->perm491[(index / 491u) % 491u] * 491u +
            h->perm491[(index / 241081u) % 491u]) * (float)(0x1.fffffcp-1 / 118370771u); // Results in [0,1).
}


static inline float halton499(const halton_t *h, const unsigned index)
{
    return (h->perm499[index % 499u] * 249001u +
            h->perm499[(index / 499u) % 499u] * 499u +
            h->perm499[(index / 249001u) % 499u]) * (float)(0x1.fffffcp-1 / 124251499u); // Results in [0,1).
}


static inline float halton503(const halton_t *h, const unsigned index)
{
    return (h->perm503[index % 503u] * 253009u +
            h->perm503[(index / 503u) % 503u] * 503u +
            h->perm503[(index / 253009u) % 503u]) * (float)(0x1.fffffcp-1 / 127263527u); // Results in [0,1).
}


static inline float halton509(const halton_t *h, const unsigned index)
{
    return (h->perm509[index % 509u] * 259081u +
            h->perm509[(index / 509u) % 509u] * 509u +
            h->perm509[(index / 259081u) % 509u]) * (float)(0x1.fffffcp-1 / 131872229u); // Results in [0,1).
}


static inline float halton521(const halton_t *h, const unsigned index)
{
    return (h->perm521[index % 521u] * 271441u +
            h->perm521[(index / 521u) % 521u] * 521u +
            h->perm521[(index / 271441u) % 521u]) * (float)(0x1.fffffcp-1 / 141420761u); // Results in [0,1).
}


static inline float halton523(const halton_t *h, const unsigned index)
{
    return (h->perm523[index % 523u] * 273529u +
            h->perm523[(index / 523u) % 523u] * 523u +
            h->perm523[(index / 273529u) % 523u]) * (float)(0x1.fffffcp-1 / 143055667u); // Results in [0,1).
}


static inline float halton541(const halton_t *h, const unsigned index)
{
    return (h->perm541[index % 541u] * 292681u +
            h->perm541[(index / 541u) % 541u] * 541u +
            h->perm541[(index / 292681u) % 541u]) * (float)(0x1.fffffcp-1 / 158340421u); // Results in [0,1).
}


static inline float halton547(const halton_t *h, const unsigned index)
{
    return (h->perm547[index % 547u] * 299209u +
            h->perm547[(index / 547u) % 547u] * 547u +
            h->perm547[(index / 299209u) % 547u]) * (float)(0x1.fffffcp-1 / 163667323u); // Results in [0,1).
}


static inline float halton557(const halton_t *h, const unsigned index)
{
    return (h->perm557[index % 557u] * 310249u +
            h->perm557[(index / 557u) % 557u] * 557u +
            h->perm557[(index / 310249u) % 557u]) * (float)(0x1.fffffcp-1 / 172808693u); // Results in [0,1).
}


static inline float halton563(const halton_t *h, const unsigned index)
{
    return (h->perm563[index % 563u] * 316969u +
            h->perm563[(index / 563u) % 563u] * 563u +
            h->perm563[(index / 316969u) % 563u]) * (float)(0x1.fffffcp-1 / 178453547u); // Results in [0,1).
}


static inline float halton569(const halton_t *h, const unsigned index)
{
    return (h->perm569[index % 569u] * 323761u +
            h->perm569[(index / 569u) % 569u] * 569u +
            h->perm569[(index / 323761u) % 569u]) * (float)(0x1.fffffcp-1 / 184220009u); // Results in [0,1).
}


static inline float halton571(const halton_t *h, const unsigned index)
{
    return (h->perm571[index % 571u] * 326041u +
            h->perm571[(index / 571u) % 571u] * 571u +
            h->perm571[(index / 326041u) % 571u]) * (float)(0x1.fffffcp-1 / 186169411u); // Results in [0,1).
}


static inline float halton577(const halton_t *h, const unsigned index)
{
    return (h->perm577[index % 577u] * 332929u +
            h->perm577[(index / 577u) % 577u] * 577u +
            h->perm577[(index / 332929u) % 577u]) * (float)(0x1.fffffcp-1 / 192100033u); // Results in [0,1).
}


static inline float halton587(const halton_t *h, const unsigned index)
{
    return (h->perm587[index % 587u] * 344569u +
            h->perm587[(index / 587u) % 587u] * 587u +
            h->perm587[(index / 344569u) % 587u]) * (float)(0x1.fffffcp-1 / 202262003u); // Results in [0,1).
}


static inline float halton593(const halton_t *h, const unsigned index)
{
    return (h->perm593[index % 593u] * 351649u +
            h->perm593[(index / 593u) % 593u] * 593u +
            h->perm593[(index / 351649u) % 593u]) * (float)(0x1.fffffcp-1 / 208527857u); // Results in [0,1).
}


static inline float halton599(const halton_t *h, const unsigned index)
{
    return (h->perm599[index % 599u] * 358801u +
            h->perm599[(index / 599u) % 599u] * 599u +
            h->perm599[(index / 358801u) % 599u]) * (float)(0x1.fffffcp-1 / 214921799u); // Results in [0,1).
}


static inline float halton601(const halton_t *h, const unsigned index)
{
    return (h->perm601[index % 601u] * 361201u +
            h->perm601[(index / 601u) % 601u] * 601u +
            h->perm601[(index / 361201u) % 601u]) * (float)(0x1.fffffcp-1 / 217081801u); // Results in [0,1).
}


static inline float halton607(const halton_t *h, const unsigned index)
{
    return (h->perm607[index % 607u] * 368449u +
            h->perm607[(index / 607u) % 607u] * 607u +
            h->perm607[(index / 368449u) % 607u]) * (float)(0x1.fffffcp-1 / 223648543u); // Results in [0,1).
}


static inline float halton613(const halton_t *h, const unsigned index)
{
    return (h->perm613[index % 613u] * 375769u +
            h->perm613[(index / 613u) % 613u] * 613u +
            h->perm613[(index / 375769u) % 613u]) * (float)(0x1.fffffcp-1 / 230346397u); // Results in [0,1).
}


static inline float halton617(const halton_t *h, const unsigned index)
{
    return (h->perm617[index % 617u] * 380689u +
            h->perm617[(index / 617u) % 617u] * 617u +
            h->perm617[(index / 380689u) % 617u]) * (float)(0x1.fffffcp-1 / 234885113u); // Results in [0,1).
}


static inline float halton619(const halton_t *h, const unsigned index)
{
    return (h->perm619[index % 619u] * 383161u +
            h->perm619[(index / 619u) % 619u] * 619u +
            h->perm619[(index / 383161u) % 619u]) * (float)(0x1.fffffcp-1 / 237176659u); // Results in [0,1).
}


static inline float halton631(const halton_t *h, const unsigned index)
{
    return (h->perm631[index % 631u] * 398161u +
            h->perm631[(index / 631u) % 631u] * 631u +
            h->perm631[(index / 398161u) % 631u]) * (float)(0x1.fffffcp-1 / 251239591u); // Results in [0,1).
}


static inline float halton641(const halton_t *h, const unsigned index)
{
    return (h->perm641[index % 641u] * 410881u +
            h->perm641[(index / 641u) % 641u] * 641u +
            h->perm641[(index / 410881u) % 641u]) * (float)(0x1.fffffcp-1 / 263374721u); // Results in [0,1).
}


static inline float halton643(const halton_t *h, const unsigned index)
{
    return (h->perm643[index % 643u] * 413449u +
            h->perm643[(index / 643u) % 643u] * 643u +
            h->perm643[(index / 413449u) % 643u]) * (float)(0x1.fffffcp-1 / 265847707u); // Results in [0,1).
}


static inline float halton647(const halton_t *h, const unsigned index)
{
    return (h->perm647[index % 647u] * 418609u +
            h->perm647[(index / 647u) % 647u] * 647u +
            h->perm647[(index / 418609u) % 647u]) * (float)(0x1.fffffcp-1 / 270840023u); // Results in [0,1).
}


static inline float halton653(const halton_t *h, const unsigned index)
{
    return (h->perm653[index % 653u] * 426409u +
            h->perm653[(index / 653u) % 653u] * 653u +
            h->perm653[(index / 426409u) % 653u]) * (float)(0x1.fffffcp-1 / 278445077u); // Results in [0,1).
}


static inline float halton659(const halton_t *h, const unsigned index)
{
    return (h->perm659[index % 659u] * 434281u +
            h->perm659[(index / 659u) % 659u] * 659u +
            h->perm659[(index / 434281u) % 659u]) * (float)(0x1.fffffcp-1 / 286191179u); // Results in [0,1).
}


static inline float halton661(const halton_t *h, const unsigned index)
{
    return (h->perm661[index % 661u] * 436921u +
            h->perm661[(index / 661u) % 661u] * 661u +
            h->perm661[(index / 436921u) % 661u]) * (float)(0x1.fffffcp-1 / 288804781u); // Results in [0,1).
}


static inline float halton673(const halton_t *h, const unsigned index)
{
    return (h->perm673[index % 673u] * 452929u +
            h->perm673[(index / 673u) % 673u] * 673u +
            h->perm673[(index / 452929u) % 673u]) * (float)(0x1.fffffcp-1 / 304821217u); // Results in [0,1).
}


static inline float halton677(const halton_t *h, const unsigned index)
{
    return (h->perm677[index % 677u] * 458329u +
            h->perm677[(index / 677u) % 677u] * 677u +
            h->perm677[(index / 458329u) % 677u]) * (float)(0x1.fffffcp-1 / 310288733u); // Results in [0,1).
}


static inline float halton683(const halton_t *h, const unsigned index)
{
    return (h->perm683[index % 683u] * 466489u +
            h->perm683[(index / 683u) % 683u] * 683u +
            h->perm683[(index / 466489u) % 683u]) * (float)(0x1.fffffcp-1 / 318611987u); // Results in [0,1).
}


static inline float halton691(const halton_t *h, const unsigned index)
{
    return (h->perm691[index % 691u] * 477481u +
            h->perm691[(index / 691u) % 691u] * 691u +
            h->perm691[(index / 477481u) % 691u]) * (float)(0x1.fffffcp-1 / 329939371u); // Results in [0,1).
}


static inline float halton701(const halton_t *h, const unsigned index)
{
    return (h->perm701[index % 701u] * 491401u +
            h->perm701[(index / 701u) % 701u] * 701u +
            h->perm701[(index / 491401u) % 701u]) * (float)(0x1.fffffcp-1 / 344472101u); // Results in [0,1).
}


static inline float halton709(const halton_t *h, const unsigned index)
{
    return (h->perm709[index % 709u] * 502681u +
            h->perm709[(index / 709u) % 709u] * 709u +
            h->perm709[(index / 502681u) % 709u]) * (float)(0x1.fffffcp-1 / 356400829u); // Results in [0,1).
}


static inline float halton719(const halton_t *h, const unsigned index)
{
    return (h->perm719[index % 719u] * 516961u +
            h->perm719[(index / 719u) % 719u] * 719u +
            h->perm719[(index / 516961u) % 719u]) * (float)(0x1.fffffcp-1 / 371694959u); // Results in [0,1).
}


static inline float halton727(const halton_t *h, const unsigned index)
{
    return (h->perm727[index % 727u] * 528529u +
            h->perm727[(index / 727u) % 727u] * 727u +
            h->perm727[(index / 528529u) % 727u]) * (float)(0x1.fffffcp-1 / 384240583u); // Results in [0,1).
}


static inline float halton733(const halton_t *h, const unsigned index)
{
    return (h->perm733[index % 733u] * 537289u +
            h->perm733[(index / 733u) % 733u] * 733u +
            h->perm733[(index / 537289u) % 733u]) * (float)(0x1.fffffcp-1 / 393832837u); // Results in [0,1).
}


static inline float halton739(const halton_t *h, const unsigned index)
{
    return (h->perm739[index % 739u] * 546121u +
            h->perm739[(index / 739u) % 739u] * 739u +
            h->perm739[(index / 546121u) % 739u]) * (float)(0x1.fffffcp-1 / 403583419u); // Results in [0,1).
}


static inline float halton743(const halton_t *h, const unsigned index)
{
    return (h->perm743[index % 743u] * 552049u +
            h->perm743[(index / 743u) % 743u] * 743u +
            h->perm743[(index / 552049u) % 743u]) * (float)(0x1.fffffcp-1 / 410172407u); // Results in [0,1).
}


static inline float halton751(const halton_t *h, const unsigned index)
{
    return (h->perm751[index % 751u] * 564001u +
            h->perm751[(index / 751u) % 751u] * 751u +
            h->perm751[(index / 564001u) % 751u]) * (float)(0x1.fffffcp-1 / 423564751u); // Results in [0,1).
}


static inline float halton757(const halton_t *h, const unsigned index)
{
    return (h->perm757[index % 757u] * 573049u +
            h->perm757[(index / 757u) % 757u] * 757u +
            h->perm757[(index / 573049u) % 757u]) * (float)(0x1.fffffcp-1 / 433798093u); // Results in [0,1).
}


static inline float halton761(const halton_t *h, const unsigned index)
{
    return (h->perm761[index % 761u] * 579121u +
            h->perm761[(index / 761u) % 761u] * 761u +
            h->perm761[(index / 579121u) % 761u]) * (float)(0x1.fffffcp-1 / 440711081u); // Results in [0,1).
}


static inline float halton769(const halton_t *h, const unsigned index)
{
    return (h->perm769[index % 769u] * 591361u +
            h->perm769[(index / 769u) % 769u] * 769u +
            h->perm769[(index / 591361u) % 769u]) * (float)(0x1.fffffcp-1 / 454756609u); // Results in [0,1).
}


static inline float halton773(const halton_t *h, const unsigned index)
{
    return (h->perm773[index % 773u] * 597529u +
            h->perm773[(index / 773u) % 773u] * 773u +
            h->perm773[(index / 597529u) % 773u]) * (float)(0x1.fffffcp-1 / 461889917u); // Results in [0,1).
}


static inline float halton787(const halton_t *h, const unsigned index)
{
    return (h->perm787[index % 787u] * 619369u +
            h->perm787[(index / 787u) % 787u] * 787u +
            h->perm787[(index / 619369u) % 787u]) * (float)(0x1.fffffcp-1 / 487443403u); // Results in [0,1).
}


static inline float halton797(const halton_t *h, const unsigned index)
{
    return (h->perm797[index % 797u] * 635209u +
            h->perm797[(index / 797u) % 797u] * 797u +
            h->perm797[(index / 635209u) % 797u]) * (float)(0x1.fffffcp-1 / 506261573u); // Results in [0,1).
}


static inline float halton809(const halton_t *h, const unsigned index)
{
    return (h->perm809[index % 809u] * 654481u +
            h->perm809[(index / 809u) % 809u] * 809u +
            h->perm809[(index / 654481u) % 809u]) * (float)(0x1.fffffcp-1 / 529475129u); // Results in [0,1).
}


static inline float halton811(const halton_t *h, const unsigned index)
{
    return (h->perm811[index % 811u] * 657721u +
            h->perm811[(index / 811u) % 811u] * 811u +
            h->perm811[(index / 657721u) % 811u]) * (float)(0x1.fffffcp-1 / 533411731u); // Results in [0,1).
}


static inline float halton821(const halton_t *h, const unsigned index)
{
    return (h->perm821[index % 821u] * 674041u +
            h->perm821[(index / 821u) % 821u] * 821u +
            h->perm821[(index / 674041u) % 821u]) * (float)(0x1.fffffcp-1 / 553387661u); // Results in [0,1).
}


static inline float halton823(const halton_t *h, const unsigned index)
{
    return (h->perm823[index % 823u] * 677329u +
            h->perm823[(index / 823u) % 823u] * 823u +
            h->perm823[(index / 677329u) % 823u]) * (float)(0x1.fffffcp-1 / 557441767u); // Results in [0,1).
}


static inline float halton827(const halton_t *h, const unsigned index)
{
    return (h->perm827[index % 827u] * 683929u +
            h->perm827[(index / 827u) % 827u] * 827u +
            h->perm827[(index / 683929u) % 827u]) * (float)(0x1.fffffcp-1 / 565609283u); // Results in [0,1).
}


static inline float halton829(const halton_t *h, const unsigned index)
{
    return (h->perm829[index % 829u] * 687241u +
            h->perm829[(index / 829u) % 829u] * 829u +
            h->perm829[(index / 687241u) % 829u]) * (float)(0x1.fffffcp-1 / 569722789u); // Results in [0,1).
}


static inline float halton839(const halton_t *h, const unsigned index)
{
    return (h->perm839[index % 839u] * 703921u +
            h->perm839[(index / 839u) % 839u] * 839u +
            h->perm839[(index / 703921u) % 839u]) * (float)(0x1.fffffcp-1 / 590589719u); // Results in [0,1).
}


static inline float halton853(const halton_t *h, const unsigned index)
{
    return (h->perm853[index % 853u] * 727609u +
            h->perm853[(index / 853u) % 853u] * 853u +
            h->perm853[(index / 727609u) % 853u]) * (float)(0x1.fffffcp-1 / 620650477u); // Results in [0,1).
}


static inline float halton857(const halton_t *h, const unsigned index)
{
    return (h->perm857[index % 857u] * 734449u +
            h->perm857[(index / 857u) % 857u] * 857u +
            h->perm857[(index / 734449u) % 857u]) * (float)(0x1.fffffcp-1 / 629422793u); // Results in [0,1).
}


static inline float halton859(const halton_t *h, const unsigned index)
{
    return (h->perm859[index % 859u] * 737881u +
            h->perm859[(index / 859u) % 859u] * 859u +
            h->perm859[(index / 737881u) % 859u]) * (float)(0x1.fffffcp-1 / 633839779u); // Results in [0,1).
}


static inline float halton863(const halton_t *h, const unsigned index)
{
    return (h->perm863[index % 863u] * 744769u +
            h->perm863[(index / 863u) % 863u] * 863u +
            h->perm863[(index / 744769u) % 863u]) * (float)(0x1.fffffcp-1 / 642735647u); // Results in [0,1).
}


static inline float halton877(const halton_t *h, const unsigned index)
{
    return (h->perm877[index % 877u] * 769129u +
            h->perm877[(index / 877u) % 877u] * 877u +
            h->perm877[(index / 769129u) % 877u]) * (float)(0x1.fffffcp-1 / 674526133u); // Results in [0,1).
}


static inline float halton881(const halton_t *h, const unsigned index)
{
    return (h->perm881[index % 881u] * 776161u +
            h->perm881[(index / 881u) % 881u] * 881u +
            h->perm881[(index / 776161u) % 881u]) * (float)(0x1.fffffcp-1 / 683797841u); // Results in [0,1).
}


static inline float halton883(const halton_t *h, const unsigned index)
{
    return (h->perm883[index % 883u] * 779689u +
            h->perm883[(index / 883u) % 883u] * 883u +
            h->perm883[(index / 779689u) % 883u]) * (float)(0x1.fffffcp-1 / 688465387u); // Results in [0,1).
}


static inline float halton887(const halton_t *h, const unsigned index)
{
    return (h->perm887[index % 887u] * 786769u +
            h->perm887[(index / 887u) % 887u] * 887u +
            h->perm887[(index / 786769u) % 887u]) * (float)(0x1.fffffcp-1 / 697864103u); // Results in [0,1).
}


static inline float halton907(const halton_t *h, const unsigned index)
{
    return (h->perm907[index % 907u] * 822649u +
            h->perm907[(index / 907u) % 907u] * 907u +
            h->perm907[(index / 822649u) % 907u]) * (float)(0x1.fffffcp-1 / 746142643u); // Results in [0,1).
}


static inline float halton911(const halton_t *h, const unsigned index)
{
    return (h->perm911[index % 911u] * 829921u +
            h->perm911[(index / 911u) % 911u] * 911u +
            h->perm911[(index / 829921u) % 911u]) * (float)(0x1.fffffcp-1 / 756058031u); // Results in [0,1).
}


static inline float halton919(const halton_t *h, const unsigned index)
{
    return (h->perm919[index % 919u] * 844561u +
            h->perm919[(index / 919u) % 919u] * 919u +
            h->perm919[(index / 844561u) % 919u]) * (float)(0x1.fffffcp-1 / 776151559u); // Results in [0,1).
}


static inline float halton929(const halton_t *h, const unsigned index)
{
    return (h->perm929[index % 929u] * 863041u +
            h->perm929[(index / 929u) % 929u] * 929u +
            h->perm929[(index / 863041u) % 929u]) * (float)(0x1.fffffcp-1 / 801765089u); // Results in [0,1).
}


static inline float halton937(const halton_t *h, const unsigned index)
{
    return (h->perm937[index % 937u] * 877969u +
            h->perm937[(index / 937u) % 937u] * 937u +
            h->perm937[(index / 877969u) % 937u]) * (float)(0x1.fffffcp-1 / 822656953u); // Results in [0,1).
}


static inline float halton941(const halton_t *h, const unsigned index)
{
    return (h->perm941[index % 941u] * 885481u +
            h->perm941[(index / 941u) % 941u] * 941u +
            h->perm941[(index / 885481u) % 941u]) * (float)(0x1.fffffcp-1 / 833237621u); // Results in [0,1).
}


static inline float halton947(const halton_t *h, const unsigned index)
{
    return (h->perm947[index % 947u] * 896809u +
            h->perm947[(index / 947u) % 947u] * 947u +
            h->perm947[(index / 896809u) % 947u]) * (float)(0x1.fffffcp-1 / 849278123u); // Results in [0,1).
}


static inline float halton953(const halton_t *h, const unsigned index)
{
    return (h->perm953[index % 953u] * 908209u +
            h->perm953[(index / 953u) % 953u] * 953u +
            h->perm953[(index / 908209u) % 953u]) * (float)(0x1.fffffcp-1 / 865523177u); // Results in [0,1).
}


static inline float halton967(const halton_t *h, const unsigned index)
{
    return (h->perm967[index % 967u] * 935089u +
            h->perm967[(index / 967u) % 967u] * 967u +
            h->perm967[(index / 935089u) % 967u]) * (float)(0x1.fffffcp-1 / 904231063u); // Results in [0,1).
}


static inline float halton971(const halton_t *h, const unsigned index)
{
    return (h->perm971[index % 971u] * 942841u +
            h->perm971[(index / 971u) % 971u] * 971u +
            h->perm971[(index / 942841u) % 971u]) * (float)(0x1.fffffcp-1 / 915498611u); // Results in [0,1).
}


static inline float halton977(const halton_t *h, const unsigned index)
{
    return (h->perm977[index % 977u] * 954529u +
            h->perm977[(index / 977u) % 977u] * 977u +
            h->perm977[(index / 954529u) % 977u]) * (float)(0x1.fffffcp-1 / 932574833u); // Results in [0,1).
}


static inline float halton983(const halton_t *h, const unsigned index)
{
    return (h->perm983[index % 983u] * 966289u +
            h->perm983[(index / 983u) % 983u] * 983u +
            h->perm983[(index / 966289u) % 983u]) * (float)(0x1.fffffcp-1 / 949862087u); // Results in [0,1).
}


static inline float halton991(const halton_t *h, const unsigned index)
{
    return (h->perm991[index % 991u] * 982081u +
            h->perm991[(index / 991u) % 991u] * 991u +
            h->perm991[(index / 982081u) % 991u]) * (float)(0x1.fffffcp-1 / 973242271u); // Results in [0,1).
}


static inline float halton997(const halton_t *h, const unsigned index)
{
    return (h->perm997[index % 997u] * 994009u +
            h->perm997[(index / 997u) % 997u] * 997u +
            h->perm997[(index / 994009u) % 997u]) * (float)(0x1.fffffcp-1 / 991026973u); // Results in [0,1).
}


static inline float halton1009(const halton_t *h, const unsigned index)
{
    return (h->perm1009[index % 1009u] * 1018081u +
            h->perm1009[(index / 1009u) % 1009u] * 1009u +
            h->perm1009[(index / 1018081u) % 1009u]) * (float)(0x1.fffffcp-1 / 1027243729u); // Results in [0,1).
}


static inline float halton1013(const halton_t *h, const unsigned index)
{
    return (h->perm1013[index % 1013u] * 1026169u +
            h->perm1013[(index / 1013u) % 1013u] * 1013u +
            h->perm1013[(index / 1026169u) % 1013u]) * (float)(0x1.fffffcp-1 / 1039509197u); // Results in [0,1).
}


static inline float halton1019(const halton_t *h, const unsigned index)
{
    return (h->perm1019[index % 1019u] * 1038361u +
            h->perm1019[(index / 1019u) % 1019u] * 1019u +
            h->perm1019[(index / 1038361u) % 1019u]) * (float)(0x1.fffffcp-1 / 1058089859u); // Results in [0,1).
}


static inline float halton1021(const halton_t *h, const unsigned index)
{
    return (h->perm1021[index % 1021u] * 1042441u +
            h->perm1021[(index / 1021u) % 1021u] * 1021u +
            h->perm1021[(index / 1042441u) % 1021u]) * (float)(0x1.fffffcp-1 / 1064332261u); // Results in [0,1).
}


static inline float halton1031(const halton_t *h, const unsigned index)
{
    return (h->perm1031[index % 1031u] * 1062961u +
            h->perm1031[(index / 1031u) % 1031u] * 1031u +
            h->perm1031[(index / 1062961u) % 1031u]) * (float)(0x1.fffffcp-1 / 1095912791u); // Results in [0,1).
}


static inline float halton1033(const halton_t *h, const unsigned index)
{
    return (h->perm1033[index % 1033u] * 1067089u +
            h->perm1033[(index / 1033u) % 1033u] * 1033u +
            h->perm1033[(index / 1067089u) % 1033u]) * (float)(0x1.fffffcp-1 / 1102302937u); // Results in [0,1).
}


static inline float halton1039(const halton_t *h, const unsigned index)
{
    return (h->perm1039[index % 1039u] * 1079521u +
            h->perm1039[(index / 1039u) % 1039u] * 1039u +
            h->perm1039[(index / 1079521u) % 1039u]) * (float)(0x1.fffffcp-1 / 1121622319u); // Results in [0,1).
}


static inline float halton1049(const halton_t *h, const unsigned index)
{
    return (h->perm1049[index % 1049u] * 1100401u +
            h->perm1049[(index / 1049u) % 1049u] * 1049u +
            h->perm1049[(index / 1100401u) % 1049u]) * (float)(0x1.fffffcp-1 / 1154320649u); // Results in [0,1).
}


static inline float halton1051(const halton_t *h, const unsigned index)
{
    return (h->perm1051[index % 1051u] * 1104601u +
            h->perm1051[(index / 1051u) % 1051u] * 1051u +
            h->perm1051[(index / 1104601u) % 1051u]) * (float)(0x1.fffffcp-1 / 1160935651u); // Results in [0,1).
}


static inline float halton1061(const halton_t *h, const unsigned index)
{
    return (h->perm1061[index % 1061u] * 1125721u +
            h->perm1061[(index / 1061u) % 1061u] * 1061u +
            h->perm1061[(index / 1125721u) % 1061u]) * (float)(0x1.fffffcp-1 / 1194389981u); // Results in [0,1).
}


static inline float halton1063(const halton_t *h, const unsigned index)
{
    return (h->perm1063[index % 1063u] * 1129969u +
            h->perm1063[(index / 1063u) % 1063u] * 1063u +
            h->perm1063[(index / 1129969u) % 1063u]) * (float)(0x1.fffffcp-1 / 1201157047u); // Results in [0,1).
}


static inline float halton1069(const halton_t *h, const unsigned index)
{
    return (h->perm1069[index % 1069u] * 1142761u +
            h->perm1069[(index / 1069u) % 1069u] * 1069u +
            h->perm1069[(index / 1142761u) % 1069u]) * (float)(0x1.fffffcp-1 / 1221611509u); // Results in [0,1).
}


static inline float halton1087(const halton_t *h, const unsigned index)
{
    return (h->perm1087[index % 1087u] * 1181569u +
            h->perm1087[(index / 1087u) % 1087u] * 1087u +
            h->perm1087[(index / 1181569u) % 1087u]) * (float)(0x1.fffffcp-1 / 1284365503u); // Results in [0,1).
}


static inline float halton1091(const halton_t *h, const unsigned index)
{
    return (h->perm1091[index % 1091u] * 1190281u +
            h->perm1091[(index / 1091u) % 1091u] * 1091u +
            h->perm1091[(index / 1190281u) % 1091u]) * (float)(0x1.fffffcp-1 / 1298596571u); // Results in [0,1).
}


static inline float halton1093(const halton_t *h, const unsigned index)
{
    return (h->perm1093[index % 1093u] * 1194649u +
            h->perm1093[(index / 1093u) % 1093u] * 1093u +
            h->perm1093[(index / 1194649u) % 1093u]) * (float)(0x1.fffffcp-1 / 1305751357u); // Results in [0,1).
}


static inline float halton1097(const halton_t *h, const unsigned index)
{
    return (h->perm1097[index % 1097u] * 1203409u +
            h->perm1097[(index / 1097u) % 1097u] * 1097u +
            h->perm1097[(index / 1203409u) % 1097u]) * (float)(0x1.fffffcp-1 / 1320139673u); // Results in [0,1).
}


static inline float halton1103(const halton_t *h, const unsigned index)
{
    return (h->perm1103[index % 1103u] * 1216609u +
            h->perm1103[(index / 1103u) % 1103u] * 1103u +
            h->perm1103[(index / 1216609u) % 1103u]) * (float)(0x1.fffffcp-1 / 1341919727u); // Results in [0,1).
}


static inline float halton1109(const halton_t *h, const unsigned index)
{
    return (h->perm1109[index % 1109u] * 1229881u +
            h->perm1109[(index / 1109u) % 1109u] * 1109u +
            h->perm1109[(index / 1229881u) % 1109u]) * (float)(0x1.fffffcp-1 / 1363938029u); // Results in [0,1).
}


static inline float halton1117(const halton_t *h, const unsigned index)
{
    return (h->perm1117[index % 1117u] * 1247689u +
            h->perm1117[(index / 1117u) % 1117u] * 1117u +
            h->perm1117[(index / 1247689u) % 1117u]) * (float)(0x1.fffffcp-1 / 1393668613u); // Results in [0,1).
}


static inline float halton1123(const halton_t *h, const unsigned index)
{
    return (h->perm1123[index % 1123u] * 1261129u +
            h->perm1123[(index / 1123u) % 1123u] * 1123u +
            h->perm1123[(index / 1261129u) % 1123u]) * (float)(0x1.fffffcp-1 / 1416247867u); // Results in [0,1).
}


static inline float halton1129(const halton_t *h, const unsigned index)
{
    return (h->perm1129[index % 1129u] * 1274641u +
            h->perm1129[(index / 1129u) % 1129u] * 1129u +
            h->perm1129[(index / 1274641u) % 1129u]) * (float)(0x1.fffffcp-1 / 1439069689u); // Results in [0,1).
}


static inline float halton1151(const halton_t *h, const unsigned index)
{
    return (h->perm1151[index % 1151u] * 1324801u +
            h->perm1151[(index / 1151u) % 1151u] * 1151u +
            h->perm1151[(index / 1324801u) % 1151u]) * (float)(0x1.fffffcp-1 / 1524845951u); // Results in [0,1).
}


static inline float halton1153(const halton_t *h, const unsigned index)
{
    return (h->perm1153[index % 1153u] * 1329409u +
            h->perm1153[(index / 1153u) % 1153u] * 1153u +
            h->perm1153[(index / 1329409u) % 1153u]) * (float)(0x1.fffffcp-1 / 1532808577u); // Results in [0,1).
}


static inline float halton1163(const halton_t *h, const unsigned index)
{
    return (h->perm1163[index % 1163u] * 1352569u +
            h->perm1163[(index / 1163u) % 1163u] * 1163u +
            h->perm1163[(index / 1352569u) % 1163u]) * (float)(0x1.fffffcp-1 / 1573037747u); // Results in [0,1).
}


static inline float halton1171(const halton_t *h, const unsigned index)
{
    return (h->perm1171[index % 1171u] * 1371241u +
            h->perm1171[(index / 1171u) % 1171u] * 1171u +
            h->perm1171[(index / 1371241u) % 1171u]) * (float)(0x1.fffffcp-1 / 1605723211u); // Results in [0,1).
}


static inline float halton1181(const halton_t *h, const unsigned index)
{
    return (h->perm1181[index % 1181u] * 1394761u +
            h->perm1181[(index / 1181u) % 1181u] * 1181u +
            h->perm1181[(index / 1394761u) % 1181u]) * (float)(0x1.fffffcp-1 / 1647212741u); // Results in [0,1).
}


static inline float halton1187(const halton_t *h, const unsigned index)
{
    return (h->perm1187[index % 1187u] * 1408969u +
            h->perm1187[(index / 1187u) % 1187u] * 1187u +
            h->perm1187[(index / 1408969u) % 1187u]) * (float)(0x1.fffffcp-1 / 1672446203u); // Results in [0,1).
}


static inline float halton1193(const halton_t *h, const unsigned index)
{
    return (h->perm1193[index % 1193u] * 1423249u +
            h->perm1193[(index / 1193u) % 1193u] * 1193u +
            h->perm1193[(index / 1423249u) % 1193u]) * (float)(0x1.fffffcp-1 / 1697936057u); // Results in [0,1).
}


static inline float halton1201(const halton_t *h, const unsigned index)
{
    return (h->perm1201[index % 1201u] * 1442401u +
            h->perm1201[(index / 1201u) % 1201u] * 1201u +
            h->perm1201[(index / 1442401u) % 1201u]) * (float)(0x1.fffffcp-1 / 1732323601u); // Results in [0,1).
}


static inline float halton1213(const halton_t *h, const unsigned index)
{
    return (h->perm1213[index % 1213u] * 1471369u +
            h->perm1213[(index / 1213u) % 1213u] * 1213u +
            h->perm1213[(index / 1471369u) % 1213u]) * (float)(0x1.fffffcp-1 / 1784770597u); // Results in [0,1).
}


static inline float halton1217(const halton_t *h, const unsigned index)
{
    return (h->perm1217[index % 1217u] * 1481089u +
            h->perm1217[(index / 1217u) % 1217u] * 1217u +
            h->perm1217[(index / 1481089u) % 1217u]) * (float)(0x1.fffffcp-1 / 1802485313u); // Results in [0,1).
}


static inline float halton1223(const halton_t *h, const unsigned index)
{
    return (h->perm1223[index % 1223u] * 1495729u +
            h->perm1223[(index / 1223u) % 1223u] * 1223u +
            h->perm1223[(index / 1495729u) % 1223u]) * (float)(0x1.fffffcp-1 / 1829276567u); // Results in [0,1).
}


static inline float halton1229(const halton_t *h, const unsigned index)
{
    return (h->perm1229[index % 1229u] * 1510441u +
            h->perm1229[(index / 1229u) % 1229u] * 1229u +
            h->perm1229[(index / 1510441u) % 1229u]) * (float)(0x1.fffffcp-1 / 1856331989u); // Results in [0,1).
}


static inline float halton1231(const halton_t *h, const unsigned index)
{
    return (h->perm1231[index % 1231u] * 1515361u +
            h->perm1231[(index / 1231u) % 1231u] * 1231u +
            h->perm1231[(index / 1515361u) % 1231u]) * (float)(0x1.fffffcp-1 / 1865409391u); // Results in [0,1).
}


static inline float halton1237(const halton_t *h, const unsigned index)
{
    return (h->perm1237[index % 1237u] * 1530169u +
            h->perm1237[(index / 1237u) % 1237u] * 1237u +
            h->perm1237[(index / 1530169u) % 1237u]) * (float)(0x1.fffffcp-1 / 1892819053u); // Results in [0,1).
}


static inline float halton1249(const halton_t *h, const unsigned index)
{
    return (h->perm1249[index % 1249u] * 1560001u +
            h->perm1249[(index / 1249u) % 1249u] * 1249u +
            h->perm1249[(index / 1560001u) % 1249u]) * (float)(0x1.fffffcp-1 / 1948441249u); // Results in [0,1).
}


static inline float halton1259(const halton_t *h, const unsigned index)
{
    return (h->perm1259[index % 1259u] * 1585081u +
            h->perm1259[(index / 1259u) % 1259u] * 1259u +
            h->perm1259[(index / 1585081u) % 1259u]) * (float)(0x1.fffffcp-1 / 1995616979u); // Results in [0,1).
}


static inline float halton1277(const halton_t *h, const unsigned index)
{
    return (h->perm1277[index % 1277u] * 1630729u +
            h->perm1277[(index / 1277u) % 1277u] * 1277u +
            h->perm1277[(index / 1630729u) % 1277u]) * (float)(0x1.fffffcp-1 / 2082440933u); // Results in [0,1).
}


static inline float halton1279(const halton_t *h, const unsigned index)
{
    return (h->perm1279[index % 1279u] * 1635841u +
            h->perm1279[(index / 1279u) % 1279u] * 1279u +
            h->perm1279[(index / 1635841u) % 1279u]) * (float)(0x1.fffffcp-1 / 2092240639u); // Results in [0,1).
}


static inline float halton1283(const halton_t *h, const unsigned index)
{
    return (h->perm1283[index % 1283u] * 1646089u +
            h->perm1283[(index / 1283u) % 1283u] * 1283u +
            h->perm1283[(index / 1646089u) % 1283u]) * (float)(0x1.fffffcp-1 / 2111932187u); // Results in [0,1).
}


static inline float halton1289(const halton_t *h, const unsigned index)
{
    return (h->perm1289[index % 1289u] * 1661521u +
            h->perm1289[(index / 1289u) % 1289u] * 1289u +
            h->perm1289[(index / 1661521u) % 1289u]) * (float)(0x1.fffffcp-1 / 2141700569u); // Results in [0,1).
}


static inline float halton1291(const halton_t *h, const unsigned index)
{
    return (h->perm1291[index % 1291u] * 1666681u +
            h->perm1291[(index / 1291u) % 1291u] * 1291u +
            h->perm1291[(index / 1666681u) % 1291u]) * (float)(0x1.fffffcp-1 / 2151685171u); // Results in [0,1).
}


static inline float halton1297(const halton_t *h, const unsigned index)
{
    return (h->perm1297[index % 1297u] * 1682209u +
            h->perm1297[(index / 1297u) % 1297u] * 1297u +
            h->perm1297[(index / 1682209u) % 1297u]) * (float)(0x1.fffffcp-1 / 2181825073u); // Results in [0,1).
}


static inline float halton1301(const halton_t *h, const unsigned index)
{
    return (h->perm1301[index % 1301u] * 1692601u +
            h->perm1301[(index / 1301u) % 1301u] * 1301u +
            h->perm1301[(index / 1692601u) % 1301u]) * (float)(0x1.fffffcp-1 / 2202073901u); // Results in [0,1).
}


static inline float halton1303(const halton_t *h, const unsigned index)
{
    return (h->perm1303[index % 1303u] * 1697809u +
            h->perm1303[(index / 1303u) % 1303u] * 1303u +
            h->perm1303[(index / 1697809u) % 1303u]) * (float)(0x1.fffffcp-1 / 2212245127u); // Results in [0,1).
}


static inline float halton1307(const halton_t *h, const unsigned index)
{
    return (h->perm1307[index % 1307u] * 1708249u +
            h->perm1307[(index / 1307u) % 1307u] * 1307u +
            h->perm1307[(index / 1708249u) % 1307u]) * (float)(0x1.fffffcp-1 / 2232681443u); // Results in [0,1).
}


static inline float halton1319(const halton_t *h, const unsigned index)
{
    return (h->perm1319[index % 1319u] * 1739761u +
            h->perm1319[(index / 1319u) % 1319u] * 1319u +
            h->perm1319[(index / 1739761u) % 1319u]) * (float)(0x1.fffffcp-1 / 2294744759u); // Results in [0,1).
}


static inline float halton1321(const halton_t *h, const unsigned index)
{
    return (h->perm1321[index % 1321u] * 1745041u +
            h->perm1321[(index / 1321u) % 1321u] * 1321u +
            h->perm1321[(index / 1745041u) % 1321u]) * (float)(0x1.fffffcp-1 / 2305199161u); // Results in [0,1).
}


static inline float halton1327(const halton_t *h, const unsigned index)
{
    return (h->perm1327[index % 1327u] * 1760929u +
            h->perm1327[(index / 1327u) % 1327u] * 1327u +
            h->perm1327[(index / 1760929u) % 1327u]) * (float)(0x1.fffffcp-1 / 2336752783u); // Results in [0,1).
}


static inline float halton1361(const halton_t *h, const unsigned index)
{
    return (h->perm1361[index % 1361u] * 1852321u +
            h->perm1361[(index / 1361u) % 1361u] * 1361u +
            h->perm1361[(index / 1852321u) % 1361u]) * (float)(0x1.fffffcp-1 / 2521008881u); // Results in [0,1).
}


static inline float halton1367(const halton_t *h, const unsigned index)
{
    return (h->perm1367[index % 1367u] * 1868689u +
            h->perm1367[(index / 1367u) % 1367u] * 1367u +
            h->perm1367[(index / 1868689u) % 1367u]) * (float)(0x1.fffffcp-1 / 2554497863u); // Results in [0,1).
}


static inline float halton1373(const halton_t *h, const unsigned index)
{
    return (h->perm1373[index % 1373u] * 1885129u +
            h->perm1373[(index / 1373u) % 1373u] * 1373u +
            h->perm1373[(index / 1885129u) % 1373u]) * (float)(0x1.fffffcp-1 / 2588282117u); // Results in [0,1).
}


static inline float halton1381(const halton_t *h, const unsigned index)
{
    return (h->perm1381[index % 1381u] * 1907161u +
            h->perm1381[(index / 1381u) % 1381u] * 1381u +
            h->perm1381[(index / 1907161u) % 1381u]) * (float)(0x1.fffffcp-1 / 2633789341u); // Results in [0,1).
}


static inline float halton1399(const halton_t *h, const unsigned index)
{
    return (h->perm1399[index % 1399u] * 1957201u +
            h->perm1399[(index / 1399u) % 1399u] * 1399u +
            h->perm1399[(index / 1957201u) % 1399u]) * (float)(0x1.fffffcp-1 / 2738124199u); // Results in [0,1).
}


static inline float halton1409(const halton_t *h, const unsigned index)
{
    return (h->perm1409[index % 1409u] * 1985281u +
            h->perm1409[(index / 1409u) % 1409u] * 1409u +
            h->perm1409[(index / 1985281u) % 1409u]) * (float)(0x1.fffffcp-1 / 2797260929u); // Results in [0,1).
}


static inline float halton1423(const halton_t *h, const unsigned index)
{
    return (h->perm1423[index % 1423u] * 2024929u +
            h->perm1423[(index / 1423u) % 1423u] * 1423u +
            h->perm1423[(index / 2024929u) % 1423u]) * (float)(0x1.fffffcp-1 / 2881473967u); // Results in [0,1).
}


static inline float halton1427(const halton_t *h, const unsigned index)
{
    return (h->perm1427[index % 1427u] * 2036329u +
            h->perm1427[(index / 1427u) % 1427u] * 1427u +
            h->perm1427[(index / 2036329u) % 1427u]) * (float)(0x1.fffffcp-1 / 2905841483u); // Results in [0,1).
}


static inline float halton1429(const halton_t *h, const unsigned index)
{
    return (h->perm1429[index % 1429u] * 2042041u +
            h->perm1429[(index / 1429u) % 1429u] * 1429u +
            h->perm1429[(index / 2042041u) % 1429u]) * (float)(0x1.fffffcp-1 / 2918076589u); // Results in [0,1).
}


static inline float halton1433(const halton_t *h, const unsigned index)
{
    return (h->perm1433[index % 1433u] * 2053489u +
            h->perm1433[(index / 1433u) % 1433u] * 1433u +
            h->perm1433[(index / 2053489u) % 1433u]) * (float)(0x1.fffffcp-1 / 2942649737u); // Results in [0,1).
}


static inline float halton1439(const halton_t *h, const unsigned index)
{
    return (h->perm1439[index % 1439u] * 2070721u +
            h->perm1439[(index / 1439u) % 1439u] * 1439u +
            h->perm1439[(index / 2070721u) % 1439u]) * (float)(0x1.fffffcp-1 / 2979767519u); // Results in [0,1).
}


static inline float halton1447(const halton_t *h, const unsigned index)
{
    return (h->perm1447[index % 1447u] * 2093809u +
            h->perm1447[(index / 1447u) % 1447u] * 1447u +
            h->perm1447[(index / 2093809u) % 1447u]) * (float)(0x1.fffffcp-1 / 3029741623u); // Results in [0,1).
}


static inline float halton1451(const halton_t *h, const unsigned index)
{
    return (h->perm1451[index % 1451u] * 2105401u +
            h->perm1451[(index / 1451u) % 1451u] * 1451u +
            h->perm1451[(index / 2105401u) % 1451u]) * (float)(0x1.fffffcp-1 / 3054936851u); // Results in [0,1).
}


static inline float halton1453(const halton_t *h, const unsigned index)
{
    return (h->perm1453[index % 1453u] * 2111209u +
            h->perm1453[(index / 1453u) % 1453u] * 1453u +
            h->perm1453[(index / 2111209u) % 1453u]) * (float)(0x1.fffffcp-1 / 3067586677u); // Results in [0,1).
}


static inline float halton1459(const halton_t *h, const unsigned index)
{
    return (h->perm1459[index % 1459u] * 2128681u +
            h->perm1459[(index / 1459u) % 1459u] * 1459u +
            h->perm1459[(index / 2128681u) % 1459u]) * (float)(0x1.fffffcp-1 / 3105745579u); // Results in [0,1).
}


static inline float halton1471(const halton_t *h, const unsigned index)
{
    return (h->perm1471[index % 1471u] * 2163841u +
            h->perm1471[(index / 1471u) % 1471u] * 1471u +
            h->perm1471[(index / 2163841u) % 1471u]) * (float)(0x1.fffffcp-1 / 3183010111u); // Results in [0,1).
}


static inline float halton1481(const halton_t *h, const unsigned index)
{
    return (h->perm1481[index % 1481u] * 2193361u +
            h->perm1481[(index / 1481u) % 1481u] * 1481u +
            h->perm1481[(index / 2193361u) % 1481u]) * (float)(0x1.fffffcp-1 / 3248367641u); // Results in [0,1).
}


static inline float halton1483(const halton_t *h, const unsigned index)
{
    return (h->perm1483[index % 1483u] * 2199289u +
            h->perm1483[(index / 1483u) % 1483u] * 1483u +
            h->perm1483[(index / 2199289u) % 1483u]) * (float)(0x1.fffffcp-1 / 3261545587u); // Results in [0,1).
}


static inline float halton1487(const halton_t *h, const unsigned index)
{
    return (h->perm1487[index % 1487u] * 2211169u +
            h->perm1487[(index / 1487u) % 1487u] * 1487u +
            h->perm1487[(index / 2211169u) % 1487u]) * (float)(0x1.fffffcp-1 / 3288008303u); // Results in [0,1).
}


static inline float halton1489(const halton_t *h, const unsigned index)
{
    return (h->perm1489[index % 1489u] * 2217121u +
            h->perm1489[(index / 1489u) % 1489u] * 1489u +
            h->perm1489[(index / 2217121u) % 1489u]) * (float)(0x1.fffffcp-1 / 3301293169u); // Results in [0,1).
}


static inline float halton1493(const halton_t *h, const unsigned index)
{
    return (h->perm1493[index % 1493u] * 2229049u +
            h->perm1493[(index / 1493u) % 1493u] * 1493u +
            h->perm1493[(index / 2229049u) % 1493u]) * (float)(0x1.fffffcp-1 / 3327970157u); // Results in [0,1).
}


static inline float halton1499(const halton_t *h, const unsigned index)
{
    return (h->perm1499[index % 1499u] * 2247001u +
            h->perm1499[(index / 1499u) % 1499u] * 1499u +
            h->perm1499[(index / 2247001u) % 1499u]) * (float)(0x1.fffffcp-1 / 3368254499u); // Results in [0,1).
}


static inline float halton1511(const halton_t *h, const unsigned index)
{
    return (h->perm1511[index % 1511u] * 2283121u +
            h->perm1511[(index / 1511u) % 1511u] * 1511u +
            h->perm1511[(index / 2283121u) % 1511u]) * (float)(0x1.fffffcp-1 / 3449795831u); // Results in [0,1).
}


static inline float halton1523(const halton_t *h, const unsigned index)
{
    return (h->perm1523[index % 1523u] * 2319529u +
            h->perm1523[(index / 1523u) % 1523u] * 1523u +
            h->perm1523[(index / 2319529u) % 1523u]) * (float)(0x1.fffffcp-1 / 3532642667u); // Results in [0,1).
}


static inline float halton1531(const halton_t *h, const unsigned index)
{
    return (h->perm1531[index % 1531u] * 2343961u +
            h->perm1531[(index / 1531u) % 1531u] * 1531u +
            h->perm1531[(index / 2343961u) % 1531u]) * (float)(0x1.fffffcp-1 / 3588604291u); // Results in [0,1).
}


static inline float halton1543(const halton_t *h, const unsigned index)
{
    return (h->perm1543[index % 1543u] * 2380849u +
            h->perm1543[(index / 1543u) % 1543u] * 1543u +
            h->perm1543[(index / 2380849u) % 1543u]) * (float)(0x1.fffffcp-1 / 3673650007u); // Results in [0,1).
}


static inline float halton1549(const halton_t *h, const unsigned index)
{
    return (h->perm1549[index % 1549u] * 2399401u +
            h->perm1549[(index / 1549u) % 1549u] * 1549u +
            h->perm1549[(index / 2399401u) % 1549u]) * (float)(0x1.fffffcp-1 / 3716672149u); // Results in [0,1).
}


static inline float halton1553(const halton_t *h, const unsigned index)
{
    return (h->perm1553[index % 1553u] * 2411809u +
            h->perm1553[(index / 1553u) % 1553u] * 1553u +
            h->perm1553[(index / 2411809u) % 1553u]) * (float)(0x1.fffffcp-1 / 3745539377u); // Results in [0,1).
}


static inline float halton1559(const halton_t *h, const unsigned index)
{
    return (h->perm1559[index % 1559u] * 2430481u +
            h->perm1559[(index / 1559u) % 1559u] * 1559u +
            h->perm1559[(index / 2430481u) % 1559u]) * (float)(0x1.fffffcp-1 / 3789119879u); // Results in [0,1).
}


static inline float halton1567(const halton_t *h, const unsigned index)
{
    return (h->perm1567[index % 1567u] * 2455489u +
            h->perm1567[(index / 1567u) % 1567u] * 1567u +
            h->perm1567[(index / 2455489u) % 1567u]) * (float)(0x1.fffffcp-1 / 3847751263u); // Results in [0,1).
}


static inline float halton1571(const halton_t *h, const unsigned index)
{
    return (h->perm1571[index % 1571u] * 2468041u +
            h->perm1571[(index / 1571u) % 1571u] * 1571u +
            h->perm1571[(index / 2468041u) % 1571u]) * (float)(0x1.fffffcp-1 / 3877292411u); // Results in [0,1).
}


static inline float halton1579(const halton_t *h, const unsigned index)
{
    return (h->perm1579[index % 1579u] * 2493241u +
            h->perm1579[(index / 1579u) % 1579u] * 1579u +
            h->perm1579[(index / 2493241u) % 1579u]) * (float)(0x1.fffffcp-1 / 3936827539u); // Results in [0,1).
}


static inline float halton1583(const halton_t *h, const unsigned index)
{
    return (h->perm1583[index % 1583u] * 2505889u +
            h->perm1583[(index / 1583u) % 1583u] * 1583u +
            h->perm1583[(index / 2505889u) % 1583u]) * (float)(0x1.fffffcp-1 / 3966822287u); // Results in [0,1).
}


static inline float halton1597(const halton_t *h, const unsigned index)
{
    return (h->perm1597[index % 1597u] * 2550409u +
            h->perm1597[(index / 1597u) % 1597u] * 1597u +
            h->perm1597[(index / 2550409u) % 1597u]) * (float)(0x1.fffffcp-1 / 4073003173u); // Results in [0,1).
}


static inline float halton1601(const halton_t *h, const unsigned index)
{
    return (h->perm1601[index % 1601u] * 2563201u +
            h->perm1601[(index / 1601u) % 1601u] * 1601u +
            h->perm1601[(index / 2563201u) % 1601u]) * (float)(0x1.fffffcp-1 / 4103684801u); // Results in [0,1).
}


static inline float halton1607(const halton_t *h, const unsigned index)
{
    return (h->perm1607[index % 1607u] * 2582449u +
            h->perm1607[(index / 1607u) % 1607u] * 1607u +
            h->perm1607[(index / 2582449u) % 1607u]) * (float)(0x1.fffffcp-1 / 4149995543u); // Results in [0,1).
}


static inline float halton1609(const halton_t *h, const unsigned index)
{
    return (h->perm1609[index % 1609u] * 2588881u +
            h->perm1609[(index / 1609u) % 1609u] * 1609u +
            h->perm1609[(index / 2588881u) % 1609u]) * (float)(0x1.fffffcp-1 / 4165509529u); // Results in [0,1).
}


static inline float halton1613(const halton_t *h, const unsigned index)
{
    return (h->perm1613[index % 1613u] * 2601769u +
            h->perm1613[(index / 1613u) % 1613u] * 1613u +
            h->perm1613[(index / 2601769u) % 1613u]) * (float)(0x1.fffffcp-1 / 4196653397u); // Results in [0,1).
}


static inline float halton1619(const halton_t *h, const unsigned index)
{
    return (h->perm1619[index % 1619u] * 2621161u +
            h->perm1619[(index / 1619u) % 1619u] * 1619u +
            h->perm1619[(index / 2621161u) % 1619u]) * (float)(0x1.fffffcp-1 / 4243659659u); // Results in [0,1).
}

static inline float halton_sample(const halton_t *h, const unsigned dimension, const unsigned index)
{
    switch (dimension)
    {
        case 0: return halton2(h, index);
        case 1: return halton3(h, index);
        case 2: return halton5(h, index);
        case 3: return halton7(h, index);
        case 4: return halton11(h, index);
        case 5: return halton13(h, index);
        case 6: return halton17(h, index);
        case 7: return halton19(h, index);
        case 8: return halton23(h, index);
        case 9: return halton29(h, index);
        case 10: return halton31(h, index);
        case 11: return halton37(h, index);
        case 12: return halton41(h, index);
        case 13: return halton43(h, index);
        case 14: return halton47(h, index);
        case 15: return halton53(h, index);
        case 16: return halton59(h, index);
        case 17: return halton61(h, index);
        case 18: return halton67(h, index);
        case 19: return halton71(h, index);
        case 20: return halton73(h, index);
        case 21: return halton79(h, index);
        case 22: return halton83(h, index);
        case 23: return halton89(h, index);
        case 24: return halton97(h, index);
        case 25: return halton101(h, index);
        case 26: return halton103(h, index);
        case 27: return halton107(h, index);
        case 28: return halton109(h, index);
        case 29: return halton113(h, index);
        case 30: return halton127(h, index);
        case 31: return halton131(h, index);
        case 32: return halton137(h, index);
        case 33: return halton139(h, index);
        case 34: return halton149(h, index);
        case 35: return halton151(h, index);
        case 36: return halton157(h, index);
        case 37: return halton163(h, index);
        case 38: return halton167(h, index);
        case 39: return halton173(h, index);
        case 40: return halton179(h, index);
        case 41: return halton181(h, index);
        case 42: return halton191(h, index);
        case 43: return halton193(h, index);
        case 44: return halton197(h, index);
        case 45: return halton199(h, index);
        case 46: return halton211(h, index);
        case 47: return halton223(h, index);
        case 48: return halton227(h, index);
        case 49: return halton229(h, index);
        case 50: return halton233(h, index);
        case 51: return halton239(h, index);
        case 52: return halton241(h, index);
        case 53: return halton251(h, index);
        case 54: return halton257(h, index);
        case 55: return halton263(h, index);
        case 56: return halton269(h, index);
        case 57: return halton271(h, index);
        case 58: return halton277(h, index);
        case 59: return halton281(h, index);
        case 60: return halton283(h, index);
        case 61: return halton293(h, index);
        case 62: return halton307(h, index);
        case 63: return halton311(h, index);
        case 64: return halton313(h, index);
        case 65: return halton317(h, index);
        case 66: return halton331(h, index);
        case 67: return halton337(h, index);
        case 68: return halton347(h, index);
        case 69: return halton349(h, index);
        case 70: return halton353(h, index);
        case 71: return halton359(h, index);
        case 72: return halton367(h, index);
        case 73: return halton373(h, index);
        case 74: return halton379(h, index);
        case 75: return halton383(h, index);
        case 76: return halton389(h, index);
        case 77: return halton397(h, index);
        case 78: return halton401(h, index);
        case 79: return halton409(h, index);
        case 80: return halton419(h, index);
        case 81: return halton421(h, index);
        case 82: return halton431(h, index);
        case 83: return halton433(h, index);
        case 84: return halton439(h, index);
        case 85: return halton443(h, index);
        case 86: return halton449(h, index);
        case 87: return halton457(h, index);
        case 88: return halton461(h, index);
        case 89: return halton463(h, index);
        case 90: return halton467(h, index);
        case 91: return halton479(h, index);
        case 92: return halton487(h, index);
        case 93: return halton491(h, index);
        case 94: return halton499(h, index);
        case 95: return halton503(h, index);
        case 96: return halton509(h, index);
        case 97: return halton521(h, index);
        case 98: return halton523(h, index);
        case 99: return halton541(h, index);
        case 100: return halton547(h, index);
        case 101: return halton557(h, index);
        case 102: return halton563(h, index);
        case 103: return halton569(h, index);
        case 104: return halton571(h, index);
        case 105: return halton577(h, index);
        case 106: return halton587(h, index);
        case 107: return halton593(h, index);
        case 108: return halton599(h, index);
        case 109: return halton601(h, index);
        case 110: return halton607(h, index);
        case 111: return halton613(h, index);
        case 112: return halton617(h, index);
        case 113: return halton619(h, index);
        case 114: return halton631(h, index);
        case 115: return halton641(h, index);
        case 116: return halton643(h, index);
        case 117: return halton647(h, index);
        case 118: return halton653(h, index);
        case 119: return halton659(h, index);
        case 120: return halton661(h, index);
        case 121: return halton673(h, index);
        case 122: return halton677(h, index);
        case 123: return halton683(h, index);
        case 124: return halton691(h, index);
        case 125: return halton701(h, index);
        case 126: return halton709(h, index);
        case 127: return halton719(h, index);
        case 128: return halton727(h, index);
        case 129: return halton733(h, index);
        case 130: return halton739(h, index);
        case 131: return halton743(h, index);
        case 132: return halton751(h, index);
        case 133: return halton757(h, index);
        case 134: return halton761(h, index);
        case 135: return halton769(h, index);
        case 136: return halton773(h, index);
        case 137: return halton787(h, index);
        case 138: return halton797(h, index);
        case 139: return halton809(h, index);
        case 140: return halton811(h, index);
        case 141: return halton821(h, index);
        case 142: return halton823(h, index);
        case 143: return halton827(h, index);
        case 144: return halton829(h, index);
        case 145: return halton839(h, index);
        case 146: return halton853(h, index);
        case 147: return halton857(h, index);
        case 148: return halton859(h, index);
        case 149: return halton863(h, index);
        case 150: return halton877(h, index);
        case 151: return halton881(h, index);
        case 152: return halton883(h, index);
        case 153: return halton887(h, index);
        case 154: return halton907(h, index);
        case 155: return halton911(h, index);
        case 156: return halton919(h, index);
        case 157: return halton929(h, index);
        case 158: return halton937(h, index);
        case 159: return halton941(h, index);
        case 160: return halton947(h, index);
        case 161: return halton953(h, index);
        case 162: return halton967(h, index);
        case 163: return halton971(h, index);
        case 164: return halton977(h, index);
        case 165: return halton983(h, index);
        case 166: return halton991(h, index);
        case 167: return halton997(h, index);
        case 168: return halton1009(h, index);
        case 169: return halton1013(h, index);
        case 170: return halton1019(h, index);
        case 171: return halton1021(h, index);
        case 172: return halton1031(h, index);
        case 173: return halton1033(h, index);
        case 174: return halton1039(h, index);
        case 175: return halton1049(h, index);
        case 176: return halton1051(h, index);
        case 177: return halton1061(h, index);
        case 178: return halton1063(h, index);
        case 179: return halton1069(h, index);
        case 180: return halton1087(h, index);
        case 181: return halton1091(h, index);
        case 182: return halton1093(h, index);
        case 183: return halton1097(h, index);
        case 184: return halton1103(h, index);
        case 185: return halton1109(h, index);
        case 186: return halton1117(h, index);
        case 187: return halton1123(h, index);
        case 188: return halton1129(h, index);
        case 189: return halton1151(h, index);
        case 190: return halton1153(h, index);
        case 191: return halton1163(h, index);
        case 192: return halton1171(h, index);
        case 193: return halton1181(h, index);
        case 194: return halton1187(h, index);
        case 195: return halton1193(h, index);
        case 196: return halton1201(h, index);
        case 197: return halton1213(h, index);
        case 198: return halton1217(h, index);
        case 199: return halton1223(h, index);
        case 200: return halton1229(h, index);
        case 201: return halton1231(h, index);
        case 202: return halton1237(h, index);
        case 203: return halton1249(h, index);
        case 204: return halton1259(h, index);
        case 205: return halton1277(h, index);
        case 206: return halton1279(h, index);
        case 207: return halton1283(h, index);
        case 208: return halton1289(h, index);
        case 209: return halton1291(h, index);
        case 210: return halton1297(h, index);
        case 211: return halton1301(h, index);
        case 212: return halton1303(h, index);
        case 213: return halton1307(h, index);
        case 214: return halton1319(h, index);
        case 215: return halton1321(h, index);
        case 216: return halton1327(h, index);
        case 217: return halton1361(h, index);
        case 218: return halton1367(h, index);
        case 219: return halton1373(h, index);
        case 220: return halton1381(h, index);
        case 221: return halton1399(h, index);
        case 222: return halton1409(h, index);
        case 223: return halton1423(h, index);
        case 224: return halton1427(h, index);
        case 225: return halton1429(h, index);
        case 226: return halton1433(h, index);
        case 227: return halton1439(h, index);
        case 228: return halton1447(h, index);
        case 229: return halton1451(h, index);
        case 230: return halton1453(h, index);
        case 231: return halton1459(h, index);
        case 232: return halton1471(h, index);
        case 233: return halton1481(h, index);
        case 234: return halton1483(h, index);
        case 235: return halton1487(h, index);
        case 236: return halton1489(h, index);
        case 237: return halton1493(h, index);
        case 238: return halton1499(h, index);
        case 239: return halton1511(h, index);
        case 240: return halton1523(h, index);
        case 241: return halton1531(h, index);
        case 242: return halton1543(h, index);
        case 243: return halton1549(h, index);
        case 244: return halton1553(h, index);
        case 245: return halton1559(h, index);
        case 246: return halton1567(h, index);
        case 247: return halton1571(h, index);
        case 248: return halton1579(h, index);
        case 249: return halton1583(h, index);
        case 250: return halton1597(h, index);
        case 251: return halton1601(h, index);
        case 252: return halton1607(h, index);
        case 253: return halton1609(h, index);
        case 254: return halton1613(h, index);
        case 255: return halton1619(h, index);
    }
    return 0.f;
}

static inline unsigned short _halton_invert(const unsigned short base, const unsigned short digits,
    unsigned short index, const unsigned short *perm)
{
    unsigned short result = 0;
    for (unsigned short i = 0; i < digits; ++i)
    {
        result = result * base + perm[index % base];
        index /= base;
    }
    return result;
}

static inline void _halton_init_tables(halton_t *h, unsigned short *perms[1619u + 1])
{
    for (unsigned short i = 0; i < 243; ++i)
        h->perm3[i] = _halton_invert(3, 5, i, perms[3]);
    for (unsigned short i = 0; i < 125; ++i)
        h->perm5[i] = _halton_invert(5, 3, i, perms[5]);
    for (unsigned short i = 0; i < 343; ++i)
        h->perm7[i] = _halton_invert(7, 3, i, perms[7]);
    for (unsigned short i = 0; i < 121; ++i)
        h->perm11[i] = _halton_invert(11, 2, i, perms[11]);
    for (unsigned short i = 0; i < 169; ++i)
        h->perm13[i] = _halton_invert(13, 2, i, perms[13]);
    for (unsigned short i = 0; i < 289; ++i)
        h->perm17[i] = _halton_invert(17, 2, i, perms[17]);
    for (unsigned short i = 0; i < 361; ++i)
        h->perm19[i] = _halton_invert(19, 2, i, perms[19]);
    for (unsigned short i = 0; i < 23; ++i)
        h->perm23[i] = _halton_invert(23, 1, i, perms[23]);
    for (unsigned short i = 0; i < 29; ++i)
        h->perm29[i] = _halton_invert(29, 1, i, perms[29]);
    for (unsigned short i = 0; i < 31; ++i)
        h->perm31[i] = _halton_invert(31, 1, i, perms[31]);
    for (unsigned short i = 0; i < 37; ++i)
        h->perm37[i] = _halton_invert(37, 1, i, perms[37]);
    for (unsigned short i = 0; i < 41; ++i)
        h->perm41[i] = _halton_invert(41, 1, i, perms[41]);
    for (unsigned short i = 0; i < 43; ++i)
        h->perm43[i] = _halton_invert(43, 1, i, perms[43]);
    for (unsigned short i = 0; i < 47; ++i)
        h->perm47[i] = _halton_invert(47, 1, i, perms[47]);
    for (unsigned short i = 0; i < 53; ++i)
        h->perm53[i] = _halton_invert(53, 1, i, perms[53]);
    for (unsigned short i = 0; i < 59; ++i)
        h->perm59[i] = _halton_invert(59, 1, i, perms[59]);
    for (unsigned short i = 0; i < 61; ++i)
        h->perm61[i] = _halton_invert(61, 1, i, perms[61]);
    for (unsigned short i = 0; i < 67; ++i)
        h->perm67[i] = _halton_invert(67, 1, i, perms[67]);
    for (unsigned short i = 0; i < 71; ++i)
        h->perm71[i] = _halton_invert(71, 1, i, perms[71]);
    for (unsigned short i = 0; i < 73; ++i)
        h->perm73[i] = _halton_invert(73, 1, i, perms[73]);
    for (unsigned short i = 0; i < 79; ++i)
        h->perm79[i] = _halton_invert(79, 1, i, perms[79]);
    for (unsigned short i = 0; i < 83; ++i)
        h->perm83[i] = _halton_invert(83, 1, i, perms[83]);
    for (unsigned short i = 0; i < 89; ++i)
        h->perm89[i] = _halton_invert(89, 1, i, perms[89]);
    for (unsigned short i = 0; i < 97; ++i)
        h->perm97[i] = _halton_invert(97, 1, i, perms[97]);
    for (unsigned short i = 0; i < 101; ++i)
        h->perm101[i] = _halton_invert(101, 1, i, perms[101]);
    for (unsigned short i = 0; i < 103; ++i)
        h->perm103[i] = _halton_invert(103, 1, i, perms[103]);
    for (unsigned short i = 0; i < 107; ++i)
        h->perm107[i] = _halton_invert(107, 1, i, perms[107]);
    for (unsigned short i = 0; i < 109; ++i)
        h->perm109[i] = _halton_invert(109, 1, i, perms[109]);
    for (unsigned short i = 0; i < 113; ++i)
        h->perm113[i] = _halton_invert(113, 1, i, perms[113]);
    for (unsigned short i = 0; i < 127; ++i)
        h->perm127[i] = _halton_invert(127, 1, i, perms[127]);
    for (unsigned short i = 0; i < 131; ++i)
        h->perm131[i] = _halton_invert(131, 1, i, perms[131]);
    for (unsigned short i = 0; i < 137; ++i)
        h->perm137[i] = _halton_invert(137, 1, i, perms[137]);
    for (unsigned short i = 0; i < 139; ++i)
        h->perm139[i] = _halton_invert(139, 1, i, perms[139]);
    for (unsigned short i = 0; i < 149; ++i)
        h->perm149[i] = _halton_invert(149, 1, i, perms[149]);
    for (unsigned short i = 0; i < 151; ++i)
        h->perm151[i] = _halton_invert(151, 1, i, perms[151]);
    for (unsigned short i = 0; i < 157; ++i)
        h->perm157[i] = _halton_invert(157, 1, i, perms[157]);
    for (unsigned short i = 0; i < 163; ++i)
        h->perm163[i] = _halton_invert(163, 1, i, perms[163]);
    for (unsigned short i = 0; i < 167; ++i)
        h->perm167[i] = _halton_invert(167, 1, i, perms[167]);
    for (unsigned short i = 0; i < 173; ++i)
        h->perm173[i] = _halton_invert(173, 1, i, perms[173]);
    for (unsigned short i = 0; i < 179; ++i)
        h->perm179[i] = _halton_invert(179, 1, i, perms[179]);
    for (unsigned short i = 0; i < 181; ++i)
        h->perm181[i] = _halton_invert(181, 1, i, perms[181]);
    for (unsigned short i = 0; i < 191; ++i)
        h->perm191[i] = _halton_invert(191, 1, i, perms[191]);
    for (unsigned short i = 0; i < 193; ++i)
        h->perm193[i] = _halton_invert(193, 1, i, perms[193]);
    for (unsigned short i = 0; i < 197; ++i)
        h->perm197[i] = _halton_invert(197, 1, i, perms[197]);
    for (unsigned short i = 0; i < 199; ++i)
        h->perm199[i] = _halton_invert(199, 1, i, perms[199]);
    for (unsigned short i = 0; i < 211; ++i)
        h->perm211[i] = _halton_invert(211, 1, i, perms[211]);
    for (unsigned short i = 0; i < 223; ++i)
        h->perm223[i] = _halton_invert(223, 1, i, perms[223]);
    for (unsigned short i = 0; i < 227; ++i)
        h->perm227[i] = _halton_invert(227, 1, i, perms[227]);
    for (unsigned short i = 0; i < 229; ++i)
        h->perm229[i] = _halton_invert(229, 1, i, perms[229]);
    for (unsigned short i = 0; i < 233; ++i)
        h->perm233[i] = _halton_invert(233, 1, i, perms[233]);
    for (unsigned short i = 0; i < 239; ++i)
        h->perm239[i] = _halton_invert(239, 1, i, perms[239]);
    for (unsigned short i = 0; i < 241; ++i)
        h->perm241[i] = _halton_invert(241, 1, i, perms[241]);
    for (unsigned short i = 0; i < 251; ++i)
        h->perm251[i] = _halton_invert(251, 1, i, perms[251]);
    for (unsigned short i = 0; i < 257; ++i)
        h->perm257[i] = _halton_invert(257, 1, i, perms[257]);
    for (unsigned short i = 0; i < 263; ++i)
        h->perm263[i] = _halton_invert(263, 1, i, perms[263]);
    for (unsigned short i = 0; i < 269; ++i)
        h->perm269[i] = _halton_invert(269, 1, i, perms[269]);
    for (unsigned short i = 0; i < 271; ++i)
        h->perm271[i] = _halton_invert(271, 1, i, perms[271]);
    for (unsigned short i = 0; i < 277; ++i)
        h->perm277[i] = _halton_invert(277, 1, i, perms[277]);
    for (unsigned short i = 0; i < 281; ++i)
        h->perm281[i] = _halton_invert(281, 1, i, perms[281]);
    for (unsigned short i = 0; i < 283; ++i)
        h->perm283[i] = _halton_invert(283, 1, i, perms[283]);
    for (unsigned short i = 0; i < 293; ++i)
        h->perm293[i] = _halton_invert(293, 1, i, perms[293]);
    for (unsigned short i = 0; i < 307; ++i)
        h->perm307[i] = _halton_invert(307, 1, i, perms[307]);
    for (unsigned short i = 0; i < 311; ++i)
        h->perm311[i] = _halton_invert(311, 1, i, perms[311]);
    for (unsigned short i = 0; i < 313; ++i)
        h->perm313[i] = _halton_invert(313, 1, i, perms[313]);
    for (unsigned short i = 0; i < 317; ++i)
        h->perm317[i] = _halton_invert(317, 1, i, perms[317]);
    for (unsigned short i = 0; i < 331; ++i)
        h->perm331[i] = _halton_invert(331, 1, i, perms[331]);
    for (unsigned short i = 0; i < 337; ++i)
        h->perm337[i] = _halton_invert(337, 1, i, perms[337]);
    for (unsigned short i = 0; i < 347; ++i)
        h->perm347[i] = _halton_invert(347, 1, i, perms[347]);
    for (unsigned short i = 0; i < 349; ++i)
        h->perm349[i] = _halton_invert(349, 1, i, perms[349]);
    for (unsigned short i = 0; i < 353; ++i)
        h->perm353[i] = _halton_invert(353, 1, i, perms[353]);
    for (unsigned short i = 0; i < 359; ++i)
        h->perm359[i] = _halton_invert(359, 1, i, perms[359]);
    for (unsigned short i = 0; i < 367; ++i)
        h->perm367[i] = _halton_invert(367, 1, i, perms[367]);
    for (unsigned short i = 0; i < 373; ++i)
        h->perm373[i] = _halton_invert(373, 1, i, perms[373]);
    for (unsigned short i = 0; i < 379; ++i)
        h->perm379[i] = _halton_invert(379, 1, i, perms[379]);
    for (unsigned short i = 0; i < 383; ++i)
        h->perm383[i] = _halton_invert(383, 1, i, perms[383]);
    for (unsigned short i = 0; i < 389; ++i)
        h->perm389[i] = _halton_invert(389, 1, i, perms[389]);
    for (unsigned short i = 0; i < 397; ++i)
        h->perm397[i] = _halton_invert(397, 1, i, perms[397]);
    for (unsigned short i = 0; i < 401; ++i)
        h->perm401[i] = _halton_invert(401, 1, i, perms[401]);
    for (unsigned short i = 0; i < 409; ++i)
        h->perm409[i] = _halton_invert(409, 1, i, perms[409]);
    for (unsigned short i = 0; i < 419; ++i)
        h->perm419[i] = _halton_invert(419, 1, i, perms[419]);
    for (unsigned short i = 0; i < 421; ++i)
        h->perm421[i] = _halton_invert(421, 1, i, perms[421]);
    for (unsigned short i = 0; i < 431; ++i)
        h->perm431[i] = _halton_invert(431, 1, i, perms[431]);
    for (unsigned short i = 0; i < 433; ++i)
        h->perm433[i] = _halton_invert(433, 1, i, perms[433]);
    for (unsigned short i = 0; i < 439; ++i)
        h->perm439[i] = _halton_invert(439, 1, i, perms[439]);
    for (unsigned short i = 0; i < 443; ++i)
        h->perm443[i] = _halton_invert(443, 1, i, perms[443]);
    for (unsigned short i = 0; i < 449; ++i)
        h->perm449[i] = _halton_invert(449, 1, i, perms[449]);
    for (unsigned short i = 0; i < 457; ++i)
        h->perm457[i] = _halton_invert(457, 1, i, perms[457]);
    for (unsigned short i = 0; i < 461; ++i)
        h->perm461[i] = _halton_invert(461, 1, i, perms[461]);
    for (unsigned short i = 0; i < 463; ++i)
        h->perm463[i] = _halton_invert(463, 1, i, perms[463]);
    for (unsigned short i = 0; i < 467; ++i)
        h->perm467[i] = _halton_invert(467, 1, i, perms[467]);
    for (unsigned short i = 0; i < 479; ++i)
        h->perm479[i] = _halton_invert(479, 1, i, perms[479]);
    for (unsigned short i = 0; i < 487; ++i)
        h->perm487[i] = _halton_invert(487, 1, i, perms[487]);
    for (unsigned short i = 0; i < 491; ++i)
        h->perm491[i] = _halton_invert(491, 1, i, perms[491]);
    for (unsigned short i = 0; i < 499; ++i)
        h->perm499[i] = _halton_invert(499, 1, i, perms[499]);
    for (unsigned short i = 0; i < 503; ++i)
        h->perm503[i] = _halton_invert(503, 1, i, perms[503]);
    for (unsigned short i = 0; i < 509; ++i)
        h->perm509[i] = _halton_invert(509, 1, i, perms[509]);
    for (unsigned short i = 0; i < 521; ++i)
        h->perm521[i] = _halton_invert(521, 1, i, perms[521]);
    for (unsigned short i = 0; i < 523; ++i)
        h->perm523[i] = _halton_invert(523, 1, i, perms[523]);
    for (unsigned short i = 0; i < 541; ++i)
        h->perm541[i] = _halton_invert(541, 1, i, perms[541]);
    for (unsigned short i = 0; i < 547; ++i)
        h->perm547[i] = _halton_invert(547, 1, i, perms[547]);
    for (unsigned short i = 0; i < 557; ++i)
        h->perm557[i] = _halton_invert(557, 1, i, perms[557]);
    for (unsigned short i = 0; i < 563; ++i)
        h->perm563[i] = _halton_invert(563, 1, i, perms[563]);
    for (unsigned short i = 0; i < 569; ++i)
        h->perm569[i] = _halton_invert(569, 1, i, perms[569]);
    for (unsigned short i = 0; i < 571; ++i)
        h->perm571[i] = _halton_invert(571, 1, i, perms[571]);
    for (unsigned short i = 0; i < 577; ++i)
        h->perm577[i] = _halton_invert(577, 1, i, perms[577]);
    for (unsigned short i = 0; i < 587; ++i)
        h->perm587[i] = _halton_invert(587, 1, i, perms[587]);
    for (unsigned short i = 0; i < 593; ++i)
        h->perm593[i] = _halton_invert(593, 1, i, perms[593]);
    for (unsigned short i = 0; i < 599; ++i)
        h->perm599[i] = _halton_invert(599, 1, i, perms[599]);
    for (unsigned short i = 0; i < 601; ++i)
        h->perm601[i] = _halton_invert(601, 1, i, perms[601]);
    for (unsigned short i = 0; i < 607; ++i)
        h->perm607[i] = _halton_invert(607, 1, i, perms[607]);
    for (unsigned short i = 0; i < 613; ++i)
        h->perm613[i] = _halton_invert(613, 1, i, perms[613]);
    for (unsigned short i = 0; i < 617; ++i)
        h->perm617[i] = _halton_invert(617, 1, i, perms[617]);
    for (unsigned short i = 0; i < 619; ++i)
        h->perm619[i] = _halton_invert(619, 1, i, perms[619]);
    for (unsigned short i = 0; i < 631; ++i)
        h->perm631[i] = _halton_invert(631, 1, i, perms[631]);
    for (unsigned short i = 0; i < 641; ++i)
        h->perm641[i] = _halton_invert(641, 1, i, perms[641]);
    for (unsigned short i = 0; i < 643; ++i)
        h->perm643[i] = _halton_invert(643, 1, i, perms[643]);
    for (unsigned short i = 0; i < 647; ++i)
        h->perm647[i] = _halton_invert(647, 1, i, perms[647]);
    for (unsigned short i = 0; i < 653; ++i)
        h->perm653[i] = _halton_invert(653, 1, i, perms[653]);
    for (unsigned short i = 0; i < 659; ++i)
        h->perm659[i] = _halton_invert(659, 1, i, perms[659]);
    for (unsigned short i = 0; i < 661; ++i)
        h->perm661[i] = _halton_invert(661, 1, i, perms[661]);
    for (unsigned short i = 0; i < 673; ++i)
        h->perm673[i] = _halton_invert(673, 1, i, perms[673]);
    for (unsigned short i = 0; i < 677; ++i)
        h->perm677[i] = _halton_invert(677, 1, i, perms[677]);
    for (unsigned short i = 0; i < 683; ++i)
        h->perm683[i] = _halton_invert(683, 1, i, perms[683]);
    for (unsigned short i = 0; i < 691; ++i)
        h->perm691[i] = _halton_invert(691, 1, i, perms[691]);
    for (unsigned short i = 0; i < 701; ++i)
        h->perm701[i] = _halton_invert(701, 1, i, perms[701]);
    for (unsigned short i = 0; i < 709; ++i)
        h->perm709[i] = _halton_invert(709, 1, i, perms[709]);
    for (unsigned short i = 0; i < 719; ++i)
        h->perm719[i] = _halton_invert(719, 1, i, perms[719]);
    for (unsigned short i = 0; i < 727; ++i)
        h->perm727[i] = _halton_invert(727, 1, i, perms[727]);
    for (unsigned short i = 0; i < 733; ++i)
        h->perm733[i] = _halton_invert(733, 1, i, perms[733]);
    for (unsigned short i = 0; i < 739; ++i)
        h->perm739[i] = _halton_invert(739, 1, i, perms[739]);
    for (unsigned short i = 0; i < 743; ++i)
        h->perm743[i] = _halton_invert(743, 1, i, perms[743]);
    for (unsigned short i = 0; i < 751; ++i)
        h->perm751[i] = _halton_invert(751, 1, i, perms[751]);
    for (unsigned short i = 0; i < 757; ++i)
        h->perm757[i] = _halton_invert(757, 1, i, perms[757]);
    for (unsigned short i = 0; i < 761; ++i)
        h->perm761[i] = _halton_invert(761, 1, i, perms[761]);
    for (unsigned short i = 0; i < 769; ++i)
        h->perm769[i] = _halton_invert(769, 1, i, perms[769]);
    for (unsigned short i = 0; i < 773; ++i)
        h->perm773[i] = _halton_invert(773, 1, i, perms[773]);
    for (unsigned short i = 0; i < 787; ++i)
        h->perm787[i] = _halton_invert(787, 1, i, perms[787]);
    for (unsigned short i = 0; i < 797; ++i)
        h->perm797[i] = _halton_invert(797, 1, i, perms[797]);
    for (unsigned short i = 0; i < 809; ++i)
        h->perm809[i] = _halton_invert(809, 1, i, perms[809]);
    for (unsigned short i = 0; i < 811; ++i)
        h->perm811[i] = _halton_invert(811, 1, i, perms[811]);
    for (unsigned short i = 0; i < 821; ++i)
        h->perm821[i] = _halton_invert(821, 1, i, perms[821]);
    for (unsigned short i = 0; i < 823; ++i)
        h->perm823[i] = _halton_invert(823, 1, i, perms[823]);
    for (unsigned short i = 0; i < 827; ++i)
        h->perm827[i] = _halton_invert(827, 1, i, perms[827]);
    for (unsigned short i = 0; i < 829; ++i)
        h->perm829[i] = _halton_invert(829, 1, i, perms[829]);
    for (unsigned short i = 0; i < 839; ++i)
        h->perm839[i] = _halton_invert(839, 1, i, perms[839]);
    for (unsigned short i = 0; i < 853; ++i)
        h->perm853[i] = _halton_invert(853, 1, i, perms[853]);
    for (unsigned short i = 0; i < 857; ++i)
        h->perm857[i] = _halton_invert(857, 1, i, perms[857]);
    for (unsigned short i = 0; i < 859; ++i)
        h->perm859[i] = _halton_invert(859, 1, i, perms[859]);
    for (unsigned short i = 0; i < 863; ++i)
        h->perm863[i] = _halton_invert(863, 1, i, perms[863]);
    for (unsigned short i = 0; i < 877; ++i)
        h->perm877[i] = _halton_invert(877, 1, i, perms[877]);
    for (unsigned short i = 0; i < 881; ++i)
        h->perm881[i] = _halton_invert(881, 1, i, perms[881]);
    for (unsigned short i = 0; i < 883; ++i)
        h->perm883[i] = _halton_invert(883, 1, i, perms[883]);
    for (unsigned short i = 0; i < 887; ++i)
        h->perm887[i] = _halton_invert(887, 1, i, perms[887]);
    for (unsigned short i = 0; i < 907; ++i)
        h->perm907[i] = _halton_invert(907, 1, i, perms[907]);
    for (unsigned short i = 0; i < 911; ++i)
        h->perm911[i] = _halton_invert(911, 1, i, perms[911]);
    for (unsigned short i = 0; i < 919; ++i)
        h->perm919[i] = _halton_invert(919, 1, i, perms[919]);
    for (unsigned short i = 0; i < 929; ++i)
        h->perm929[i] = _halton_invert(929, 1, i, perms[929]);
    for (unsigned short i = 0; i < 937; ++i)
        h->perm937[i] = _halton_invert(937, 1, i, perms[937]);
    for (unsigned short i = 0; i < 941; ++i)
        h->perm941[i] = _halton_invert(941, 1, i, perms[941]);
    for (unsigned short i = 0; i < 947; ++i)
        h->perm947[i] = _halton_invert(947, 1, i, perms[947]);
    for (unsigned short i = 0; i < 953; ++i)
        h->perm953[i] = _halton_invert(953, 1, i, perms[953]);
    for (unsigned short i = 0; i < 967; ++i)
        h->perm967[i] = _halton_invert(967, 1, i, perms[967]);
    for (unsigned short i = 0; i < 971; ++i)
        h->perm971[i] = _halton_invert(971, 1, i, perms[971]);
    for (unsigned short i = 0; i < 977; ++i)
        h->perm977[i] = _halton_invert(977, 1, i, perms[977]);
    for (unsigned short i = 0; i < 983; ++i)
        h->perm983[i] = _halton_invert(983, 1, i, perms[983]);
    for (unsigned short i = 0; i < 991; ++i)
        h->perm991[i] = _halton_invert(991, 1, i, perms[991]);
    for (unsigned short i = 0; i < 997; ++i)
        h->perm997[i] = _halton_invert(997, 1, i, perms[997]);
    for (unsigned short i = 0; i < 1009; ++i)
        h->perm1009[i] = _halton_invert(1009, 1, i, perms[1009]);
    for (unsigned short i = 0; i < 1013; ++i)
        h->perm1013[i] = _halton_invert(1013, 1, i, perms[1013]);
    for (unsigned short i = 0; i < 1019; ++i)
        h->perm1019[i] = _halton_invert(1019, 1, i, perms[1019]);
    for (unsigned short i = 0; i < 1021; ++i)
        h->perm1021[i] = _halton_invert(1021, 1, i, perms[1021]);
    for (unsigned short i = 0; i < 1031; ++i)
        h->perm1031[i] = _halton_invert(1031, 1, i, perms[1031]);
    for (unsigned short i = 0; i < 1033; ++i)
        h->perm1033[i] = _halton_invert(1033, 1, i, perms[1033]);
    for (unsigned short i = 0; i < 1039; ++i)
        h->perm1039[i] = _halton_invert(1039, 1, i, perms[1039]);
    for (unsigned short i = 0; i < 1049; ++i)
        h->perm1049[i] = _halton_invert(1049, 1, i, perms[1049]);
    for (unsigned short i = 0; i < 1051; ++i)
        h->perm1051[i] = _halton_invert(1051, 1, i, perms[1051]);
    for (unsigned short i = 0; i < 1061; ++i)
        h->perm1061[i] = _halton_invert(1061, 1, i, perms[1061]);
    for (unsigned short i = 0; i < 1063; ++i)
        h->perm1063[i] = _halton_invert(1063, 1, i, perms[1063]);
    for (unsigned short i = 0; i < 1069; ++i)
        h->perm1069[i] = _halton_invert(1069, 1, i, perms[1069]);
    for (unsigned short i = 0; i < 1087; ++i)
        h->perm1087[i] = _halton_invert(1087, 1, i, perms[1087]);
    for (unsigned short i = 0; i < 1091; ++i)
        h->perm1091[i] = _halton_invert(1091, 1, i, perms[1091]);
    for (unsigned short i = 0; i < 1093; ++i)
        h->perm1093[i] = _halton_invert(1093, 1, i, perms[1093]);
    for (unsigned short i = 0; i < 1097; ++i)
        h->perm1097[i] = _halton_invert(1097, 1, i, perms[1097]);
    for (unsigned short i = 0; i < 1103; ++i)
        h->perm1103[i] = _halton_invert(1103, 1, i, perms[1103]);
    for (unsigned short i = 0; i < 1109; ++i)
        h->perm1109[i] = _halton_invert(1109, 1, i, perms[1109]);
    for (unsigned short i = 0; i < 1117; ++i)
        h->perm1117[i] = _halton_invert(1117, 1, i, perms[1117]);
    for (unsigned short i = 0; i < 1123; ++i)
        h->perm1123[i] = _halton_invert(1123, 1, i, perms[1123]);
    for (unsigned short i = 0; i < 1129; ++i)
        h->perm1129[i] = _halton_invert(1129, 1, i, perms[1129]);
    for (unsigned short i = 0; i < 1151; ++i)
        h->perm1151[i] = _halton_invert(1151, 1, i, perms[1151]);
    for (unsigned short i = 0; i < 1153; ++i)
        h->perm1153[i] = _halton_invert(1153, 1, i, perms[1153]);
    for (unsigned short i = 0; i < 1163; ++i)
        h->perm1163[i] = _halton_invert(1163, 1, i, perms[1163]);
    for (unsigned short i = 0; i < 1171; ++i)
        h->perm1171[i] = _halton_invert(1171, 1, i, perms[1171]);
    for (unsigned short i = 0; i < 1181; ++i)
        h->perm1181[i] = _halton_invert(1181, 1, i, perms[1181]);
    for (unsigned short i = 0; i < 1187; ++i)
        h->perm1187[i] = _halton_invert(1187, 1, i, perms[1187]);
    for (unsigned short i = 0; i < 1193; ++i)
        h->perm1193[i] = _halton_invert(1193, 1, i, perms[1193]);
    for (unsigned short i = 0; i < 1201; ++i)
        h->perm1201[i] = _halton_invert(1201, 1, i, perms[1201]);
    for (unsigned short i = 0; i < 1213; ++i)
        h->perm1213[i] = _halton_invert(1213, 1, i, perms[1213]);
    for (unsigned short i = 0; i < 1217; ++i)
        h->perm1217[i] = _halton_invert(1217, 1, i, perms[1217]);
    for (unsigned short i = 0; i < 1223; ++i)
        h->perm1223[i] = _halton_invert(1223, 1, i, perms[1223]);
    for (unsigned short i = 0; i < 1229; ++i)
        h->perm1229[i] = _halton_invert(1229, 1, i, perms[1229]);
    for (unsigned short i = 0; i < 1231; ++i)
        h->perm1231[i] = _halton_invert(1231, 1, i, perms[1231]);
    for (unsigned short i = 0; i < 1237; ++i)
        h->perm1237[i] = _halton_invert(1237, 1, i, perms[1237]);
    for (unsigned short i = 0; i < 1249; ++i)
        h->perm1249[i] = _halton_invert(1249, 1, i, perms[1249]);
    for (unsigned short i = 0; i < 1259; ++i)
        h->perm1259[i] = _halton_invert(1259, 1, i, perms[1259]);
    for (unsigned short i = 0; i < 1277; ++i)
        h->perm1277[i] = _halton_invert(1277, 1, i, perms[1277]);
    for (unsigned short i = 0; i < 1279; ++i)
        h->perm1279[i] = _halton_invert(1279, 1, i, perms[1279]);
    for (unsigned short i = 0; i < 1283; ++i)
        h->perm1283[i] = _halton_invert(1283, 1, i, perms[1283]);
    for (unsigned short i = 0; i < 1289; ++i)
        h->perm1289[i] = _halton_invert(1289, 1, i, perms[1289]);
    for (unsigned short i = 0; i < 1291; ++i)
        h->perm1291[i] = _halton_invert(1291, 1, i, perms[1291]);
    for (unsigned short i = 0; i < 1297; ++i)
        h->perm1297[i] = _halton_invert(1297, 1, i, perms[1297]);
    for (unsigned short i = 0; i < 1301; ++i)
        h->perm1301[i] = _halton_invert(1301, 1, i, perms[1301]);
    for (unsigned short i = 0; i < 1303; ++i)
        h->perm1303[i] = _halton_invert(1303, 1, i, perms[1303]);
    for (unsigned short i = 0; i < 1307; ++i)
        h->perm1307[i] = _halton_invert(1307, 1, i, perms[1307]);
    for (unsigned short i = 0; i < 1319; ++i)
        h->perm1319[i] = _halton_invert(1319, 1, i, perms[1319]);
    for (unsigned short i = 0; i < 1321; ++i)
        h->perm1321[i] = _halton_invert(1321, 1, i, perms[1321]);
    for (unsigned short i = 0; i < 1327; ++i)
        h->perm1327[i] = _halton_invert(1327, 1, i, perms[1327]);
    for (unsigned short i = 0; i < 1361; ++i)
        h->perm1361[i] = _halton_invert(1361, 1, i, perms[1361]);
    for (unsigned short i = 0; i < 1367; ++i)
        h->perm1367[i] = _halton_invert(1367, 1, i, perms[1367]);
    for (unsigned short i = 0; i < 1373; ++i)
        h->perm1373[i] = _halton_invert(1373, 1, i, perms[1373]);
    for (unsigned short i = 0; i < 1381; ++i)
        h->perm1381[i] = _halton_invert(1381, 1, i, perms[1381]);
    for (unsigned short i = 0; i < 1399; ++i)
        h->perm1399[i] = _halton_invert(1399, 1, i, perms[1399]);
    for (unsigned short i = 0; i < 1409; ++i)
        h->perm1409[i] = _halton_invert(1409, 1, i, perms[1409]);
    for (unsigned short i = 0; i < 1423; ++i)
        h->perm1423[i] = _halton_invert(1423, 1, i, perms[1423]);
    for (unsigned short i = 0; i < 1427; ++i)
        h->perm1427[i] = _halton_invert(1427, 1, i, perms[1427]);
    for (unsigned short i = 0; i < 1429; ++i)
        h->perm1429[i] = _halton_invert(1429, 1, i, perms[1429]);
    for (unsigned short i = 0; i < 1433; ++i)
        h->perm1433[i] = _halton_invert(1433, 1, i, perms[1433]);
    for (unsigned short i = 0; i < 1439; ++i)
        h->perm1439[i] = _halton_invert(1439, 1, i, perms[1439]);
    for (unsigned short i = 0; i < 1447; ++i)
        h->perm1447[i] = _halton_invert(1447, 1, i, perms[1447]);
    for (unsigned short i = 0; i < 1451; ++i)
        h->perm1451[i] = _halton_invert(1451, 1, i, perms[1451]);
    for (unsigned short i = 0; i < 1453; ++i)
        h->perm1453[i] = _halton_invert(1453, 1, i, perms[1453]);
    for (unsigned short i = 0; i < 1459; ++i)
        h->perm1459[i] = _halton_invert(1459, 1, i, perms[1459]);
    for (unsigned short i = 0; i < 1471; ++i)
        h->perm1471[i] = _halton_invert(1471, 1, i, perms[1471]);
    for (unsigned short i = 0; i < 1481; ++i)
        h->perm1481[i] = _halton_invert(1481, 1, i, perms[1481]);
    for (unsigned short i = 0; i < 1483; ++i)
        h->perm1483[i] = _halton_invert(1483, 1, i, perms[1483]);
    for (unsigned short i = 0; i < 1487; ++i)
        h->perm1487[i] = _halton_invert(1487, 1, i, perms[1487]);
    for (unsigned short i = 0; i < 1489; ++i)
        h->perm1489[i] = _halton_invert(1489, 1, i, perms[1489]);
    for (unsigned short i = 0; i < 1493; ++i)
        h->perm1493[i] = _halton_invert(1493, 1, i, perms[1493]);
    for (unsigned short i = 0; i < 1499; ++i)
        h->perm1499[i] = _halton_invert(1499, 1, i, perms[1499]);
    for (unsigned short i = 0; i < 1511; ++i)
        h->perm1511[i] = _halton_invert(1511, 1, i, perms[1511]);
    for (unsigned short i = 0; i < 1523; ++i)
        h->perm1523[i] = _halton_invert(1523, 1, i, perms[1523]);
    for (unsigned short i = 0; i < 1531; ++i)
        h->perm1531[i] = _halton_invert(1531, 1, i, perms[1531]);
    for (unsigned short i = 0; i < 1543; ++i)
        h->perm1543[i] = _halton_invert(1543, 1, i, perms[1543]);
    for (unsigned short i = 0; i < 1549; ++i)
        h->perm1549[i] = _halton_invert(1549, 1, i, perms[1549]);
    for (unsigned short i = 0; i < 1553; ++i)
        h->perm1553[i] = _halton_invert(1553, 1, i, perms[1553]);
    for (unsigned short i = 0; i < 1559; ++i)
        h->perm1559[i] = _halton_invert(1559, 1, i, perms[1559]);
    for (unsigned short i = 0; i < 1567; ++i)
        h->perm1567[i] = _halton_invert(1567, 1, i, perms[1567]);
    for (unsigned short i = 0; i < 1571; ++i)
        h->perm1571[i] = _halton_invert(1571, 1, i, perms[1571]);
    for (unsigned short i = 0; i < 1579; ++i)
        h->perm1579[i] = _halton_invert(1579, 1, i, perms[1579]);
    for (unsigned short i = 0; i < 1583; ++i)
        h->perm1583[i] = _halton_invert(1583, 1, i, perms[1583]);
    for (unsigned short i = 0; i < 1597; ++i)
        h->perm1597[i] = _halton_invert(1597, 1, i, perms[1597]);
    for (unsigned short i = 0; i < 1601; ++i)
        h->perm1601[i] = _halton_invert(1601, 1, i, perms[1601]);
    for (unsigned short i = 0; i < 1607; ++i)
        h->perm1607[i] = _halton_invert(1607, 1, i, perms[1607]);
    for (unsigned short i = 0; i < 1609; ++i)
        h->perm1609[i] = _halton_invert(1609, 1, i, perms[1609]);
    for (unsigned short i = 0; i < 1613; ++i)
        h->perm1613[i] = _halton_invert(1613, 1, i, perms[1613]);
    for (unsigned short i = 0; i < 1619; ++i)
        h->perm1619[i] = _halton_invert(1619, 1, i, perms[1619]);
}

static inline void halton_init_faure(halton_t *h)
{
  const unsigned max_base = 1619u;
  unsigned short *perms[max_base+1];
  unsigned short data[(max_base+1)*(max_base+2)/2];
  for (unsigned k = 1; k <= 3; ++k) // Keep identity permutations for base 1, 2, 3.
  {
    if(k)
      perms[k] = perms[k-1] + k-1;
    else
      perms[0] = data;
    for (unsigned i = 0; i < k; ++i)
      perms[k][i] = i;
  }
  for (unsigned base = 4; base <= max_base; ++base)
  {
    perms[base] = perms[base-1] + base-1;
    const unsigned b = base / 2;
    if (base & 1) // odd
    {
      for (unsigned i = 0; i < base - 1; ++i)
        perms[base][i + (i >= b)] = perms[base - 1][i] + (perms[base - 1][i] >= b);
      perms[base][b] = b;
    }
    else // even
    {
      for (unsigned i = 0; i < b; ++i)
      {
        perms[base][i] = 2 * perms[b][i];
        perms[base][b + i] = 2 * perms[b][i] + 1;
      }
    }
  }
  _halton_init_tables(h, perms);
}

static inline void halton_init_random(halton_t *h, uint64_t frame)
{
  srand48(frame);
  const unsigned max_base = 1619u;
  unsigned short **perms = malloc(sizeof(uint16_t*)*(max_base+1));
  unsigned short *data = malloc(sizeof(uint16_t)*((max_base+1)*(max_base+2)/2));
  perms[0] = data;
  for (unsigned k = 1; k <= 3; ++k) // Keep identity permutations for base 1, 2, 3.
  {
    if(k)
      perms[k] = perms[k-1] + k-1;
    for (unsigned i = 0; i < k; ++i)
      perms[k][i] = i;
  }
  for (unsigned base = 4; base <= max_base; ++base)
  {
    perms[base] = perms[base-1]+base-1;
    for (unsigned i = 0; i < base; ++i)
      perms[base][i] = i;
    for (unsigned i = 0; i < base - 1; i++) 
    {
      size_t j = i + lrand48() / ((1<<31ul) / (base - i) + 1);
      unsigned short t = perms[base][j];
      perms[base][j] = perms[base][i];
      perms[base][i] = t;
    }
  }
  _halton_init_tables(h, perms);
  free(perms);
  free(data);
}
#endif // HALTON_SAMPLER_H

