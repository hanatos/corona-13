float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + 0.000135438  + 102.533 *begin_dx + -6.98227e-06 *begin_y + 0.852921 *begin_x + -0.000167245 *begin_y*begin_dx + 0.000124562 *begin_x*begin_dx + -2.71144e-06 *begin_x*begin_y + 93.3833 *begin_dx*lens_ipow(begin_dy, 2) + 93.9526 *lens_ipow(begin_dx, 3) + 2.77587 *begin_y*begin_dx*begin_dy + 0.0140524 *lens_ipow(begin_y, 2)*begin_dx + 1.30551 *begin_x*lens_ipow(begin_dy, 2) + 4.19041 *begin_x*lens_ipow(begin_dx, 2) + 0.0274398 *begin_x*begin_y*begin_dy + 3.07261e-05 *begin_x*lens_ipow(begin_y, 2) + 0.0423831 *lens_ipow(begin_x, 2)*begin_dx + 3.40673e-05 *lens_ipow(begin_x, 3) + -0.0148532 *begin_x*lens_ipow(begin_lambda, 3) + -0.637815 *begin_dx*lens_ipow(begin_lambda, 4) + 0.000421555 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.000503239 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 0.000148145 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 2.4049e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dy + -5.91966 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -0.00269212 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 3) + -3385 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 0.634199 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -14.2498 *begin_x*lens_ipow(begin_dy, 6) + -9.02729 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 2) + 5.06598e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dy + 7.75447e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2) + -40421.2 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6) + 0.760604 *begin_x*begin_y*lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 2) + 1.50012e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.29746e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + -1.51618e-13 *lens_ipow(begin_x, 9) + -9863.75 *lens_ipow(begin_dx, 7)*lens_ipow(begin_lambda, 4) + -7.32514e-14 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dx + 7.85729e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 8) + 1.99145e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 6);
  pred_y =  + 5.51359e-06  + 102.517 *begin_dy + 0.853298 *begin_y + -0.000190306 *begin_y*begin_dy + -2.89701e-06 *lens_ipow(begin_y, 2) + 94.8048 *lens_ipow(begin_dy, 3) + 95.0504 *lens_ipow(begin_dx, 2)*begin_dy + 4.14295 *begin_y*lens_ipow(begin_dy, 2) + 1.32585 *begin_y*lens_ipow(begin_dx, 2) + 0.0420256 *lens_ipow(begin_y, 2)*begin_dy + 3.41119e-05 *lens_ipow(begin_y, 3) + 2.799 *begin_x*begin_dx*begin_dy + 0.0277656 *begin_x*begin_y*begin_dx + 0.014278 *lens_ipow(begin_x, 2)*begin_dy + 3.06988e-05 *lens_ipow(begin_x, 2)*begin_y + -0.0174171 *begin_y*lens_ipow(begin_lambda, 3) + -0.786584 *begin_dy*lens_ipow(begin_lambda, 4) + 0.000499816 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.000103369 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + -1290.57 *lens_ipow(begin_dx, 6)*begin_dy + 0.386262 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 1.11921e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + -0.00518935 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*begin_dy + 1.88569e-06 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2) + -6.00433 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 3) + -138.657 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -178.463 *begin_y*lens_ipow(begin_dx, 8) + -0.0702456 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 6) + -1.49787e-13 *lens_ipow(begin_y, 9) + 2.60456 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + -1.38786e-07 *begin_x*lens_ipow(begin_y, 5)*begin_dx*lens_ipow(begin_dy, 2) + 5.40927e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_lambda, 6) + -3.44904e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*begin_dy + -6.85293e-13 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + 4.39955e-11 *lens_ipow(begin_x, 7)*begin_y*begin_dx + -9.55545e-12 *lens_ipow(begin_x, 8)*begin_dy + -16582.9 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 3) + -48491.8 *lens_ipow(begin_dy, 9)*lens_ipow(begin_lambda, 2) + 0.000152731 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 8) + -7.96795e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 2);
  pred_dx =  + 8.37546e-06  + 0.709292 *begin_dx + -8.29314e-07 *begin_y + -0.00384714 *begin_x + -0.000739759 *begin_dx*begin_dy + -0.00051741 *lens_ipow(begin_dx, 2) + -1.72194e-05 *begin_y*begin_dx + -2.01832e-07 *begin_x*begin_y + 1.76725 *begin_dx*lens_ipow(begin_dy, 2) + 1.75987 *lens_ipow(begin_dx, 3) + 0.0595432 *begin_y*begin_dx*begin_dy + 0.000393617 *lens_ipow(begin_y, 2)*begin_dx + 0.0291522 *begin_x*lens_ipow(begin_dy, 2) + 0.0885704 *begin_x*lens_ipow(begin_dx, 2) + 0.000799801 *begin_x*begin_y*begin_dy + -6.90395e-07 *begin_x*begin_y*begin_dx + 3.95807e-06 *begin_x*lens_ipow(begin_y, 2) + 0.00119166 *lens_ipow(begin_x, 2)*begin_dx + 3.90355e-06 *lens_ipow(begin_x, 3) + 0.000860767 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.53095e-05 *begin_x*begin_y*begin_dx*begin_dy + -5.68729e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -5.7437e-08 *lens_ipow(begin_x, 3)*begin_dy + -0.448288 *begin_dx*lens_ipow(begin_lambda, 4) + -0.00405009 *begin_x*lens_ipow(begin_lambda, 4) + 0.000233735 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 3.07864e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -1.47689e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 0.00805095 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -1.2899e-12 *begin_x*lens_ipow(begin_y, 6) + 2.44197e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -1.29914e-07 *lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_lambda, 3) + -3.25765e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -2.44653e-07 *lens_ipow(begin_x, 3)*begin_y*begin_dy*lens_ipow(begin_lambda, 4) + -3.69354e-07 *lens_ipow(begin_x, 4)*begin_dx*lens_ipow(begin_lambda, 4) + -3.69527e-15 *lens_ipow(begin_x, 9) + -0.245492 *begin_y*begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 5) + -0.190531 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 5) + 2.1333 *begin_dx*lens_ipow(begin_lambda, 10) + 0.0191836 *begin_x*lens_ipow(begin_lambda, 10);
  pred_dy =  + 2.39458e-06  + 0.717854 *begin_dy + -0.0038435 *begin_y + 5.61488e-07 *begin_x + -2.69182e-06 *begin_y*begin_dx + -4.87347e-06 *begin_x*begin_dy + -4.26529e-06 *begin_x*begin_dx + 1.78744 *lens_ipow(begin_dy, 3) + 1.76155 *lens_ipow(begin_dx, 2)*begin_dy + 0.0890975 *begin_y*lens_ipow(begin_dy, 2) + 0.0291269 *begin_y*lens_ipow(begin_dx, 2) + 0.00119911 *lens_ipow(begin_y, 2)*begin_dy + 3.93176e-06 *lens_ipow(begin_y, 3) + 0.0593271 *begin_x*begin_dx*begin_dy + 0.000802083 *begin_x*begin_y*begin_dx + -8.07258e-09 *begin_x*lens_ipow(begin_y, 2) + 0.000391147 *lens_ipow(begin_x, 2)*begin_dy + 3.97282e-06 *lens_ipow(begin_x, 2)*begin_y + -0.295031 *begin_dy*lens_ipow(begin_lambda, 3) + 0.000328188 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -8.40634e-08 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -9.91749e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -3.98688e-10 *lens_ipow(begin_x, 3)*begin_y + -0.00415324 *begin_y*lens_ipow(begin_lambda, 4) + -1.66153e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -7.25946e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + -1.33174e-06 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -2.3613e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 2.24581e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 1.03767e-08 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dy, 2) + -1.58796e-12 *lens_ipow(begin_x, 6)*begin_y + -0.000107298 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 5) + -0.163559 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 4) + -4.49793e-07 *lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 4) + -227.105 *lens_ipow(begin_dy, 9)*begin_lambda + -6.63545e-15 *lens_ipow(begin_y, 9)*begin_lambda + -0.176692 *begin_x*lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 5) + 1.56342 *begin_dy*lens_ipow(begin_lambda, 10) + 0.0198088 *begin_y*lens_ipow(begin_lambda, 10) + 0.0881479 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 4);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 102.533  + -0.000167245 *begin_y + 0.000124562 *begin_x + 93.3833 *lens_ipow(begin_dy, 2) + 281.858 *lens_ipow(begin_dx, 2) + 2.77587 *begin_y*begin_dy + 0.0140524 *lens_ipow(begin_y, 2) + 8.38082 *begin_x*begin_dx + 0.0423831 *lens_ipow(begin_x, 2) + -0.637815 *lens_ipow(begin_lambda, 4) + 0.000503239 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -11.8393 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -0.00269212 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 3) + -16925 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 1.9026 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -36.1092 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 2) + 1.55089e-06 *lens_ipow(begin_x, 5)*begin_dx + -121264 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6) + 3.04241 *begin_x*begin_y*lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 2) + 3.00023e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx + -69046.2 *lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 4) + -7.32514e-14 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)+0.0f;
  dx1_domega0[0][1] =  + 186.767 *begin_dx*begin_dy + 2.77587 *begin_y*begin_dx + 2.61103 *begin_x*begin_dy + 0.0274398 *begin_x*begin_y + 0.000843109 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 0.000503239 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 0.00029629 *lens_ipow(begin_x, 3)*begin_dy + 2.4049e-06 *lens_ipow(begin_x, 3)*begin_y + -11.8393 *begin_x*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -6770.01 *lens_ipow(begin_dx, 5)*begin_dy + 1.2684 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + -85.4989 *begin_x*lens_ipow(begin_dy, 5) + 5.06598e-09 *begin_x*lens_ipow(begin_y, 5) + -242527 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5) + 0.760604 *begin_x*begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 2)+0.0f;
  dx1_domega0[1][0] =  + 190.101 *begin_dx*begin_dy + 2.65171 *begin_y*begin_dx + 2.799 *begin_x*begin_dy + 0.0277656 *begin_x*begin_y + 0.000499816 *begin_x*lens_ipow(begin_y, 2)*begin_dy + -7743.45 *lens_ipow(begin_dx, 5)*begin_dy + 0.772525 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + -0.015568 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_dy + 3.77137e-06 *lens_ipow(begin_x, 4)*begin_y*begin_dx + -554.63 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -1427.71 *begin_y*lens_ipow(begin_dx, 7) + 2.60456 *begin_x*begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + -1.38786e-07 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + -6.89809e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*begin_dy + 4.39955e-11 *lens_ipow(begin_x, 7)*begin_y + -33165.7 *begin_dx*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 3)+0.0f;
  dx1_domega0[1][1] =  + 102.517  + -0.000190306 *begin_y + 284.414 *lens_ipow(begin_dy, 2) + 95.0504 *lens_ipow(begin_dx, 2) + 8.28589 *begin_y*begin_dy + 0.0420256 *lens_ipow(begin_y, 2) + 2.799 *begin_x*begin_dx + 0.014278 *lens_ipow(begin_x, 2) + -0.786584 *lens_ipow(begin_lambda, 4) + 0.000499816 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 0.000206738 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -1290.57 *lens_ipow(begin_dx, 6) + 1.15879 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 2.23843e-06 *lens_ipow(begin_y, 5)*begin_dy + -0.00518935 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + -24.0173 *begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + -277.315 *begin_y*lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 2) + -0.421474 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 5) + 10.4182 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + -2.77572e-07 *begin_x*lens_ipow(begin_y, 5)*begin_dx*begin_dy + -3.44904e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + -9.55545e-12 *lens_ipow(begin_x, 8) + -82914.3 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 3) + -436427 *lens_ipow(begin_dy, 8)*lens_ipow(begin_lambda, 2) + -7.96795e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 2)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
