const float dx00 =  + 0.656767  + -3.59568e-06 *y + 0.274624 *lens_ipow(dy, 2) + 1.71924 *lens_ipow(dx, 2) + 0.0214982 *y*dy + 0.000216627 *lens_ipow(y, 2) + 0.0768716 *x*dx + 0.000623745 *lens_ipow(x, 2) + -0.157309 *lens_ipow(lambda, 4) + 8.60202e-06 *lens_ipow(y, 3)*lens_ipow(dy, 3) + -3.30109e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.0311511 *x*y*lens_ipow(dx, 3)*dy + -0.00688976 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00499291 *lens_ipow(x, 3)*lens_ipow(dx, 5) + -2.30632e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.58019e-10 *lens_ipow(x, 4)*lens_ipow(y, 4) + -4.02068e-07 *lens_ipow(x, 5)*y*dx*dy + 5.72449e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dy, 2) + 0.770513 *lens_ipow(lambda, 10) + -0.104672 *x*lens_ipow(y, 2)*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -0.0593831 *lens_ipow(x, 3)*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -1.24836e-08 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + 0.000981372 *lens_ipow(x, 4)*lens_ipow(dy, 6) + -1.9698e-09 *lens_ipow(x, 8)*lens_ipow(dx, 2) + 6.78718e-13 *lens_ipow(x, 10)+0.0f;
const float dx01 =  + 6.81398e-06  + -3.59568e-06 *x + 1.45232 *dx*dy + 0.0346984 *y*dx + 0.0214982 *x*dy + 0.000433255 *x*y + 2.58061e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.32044e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 0.0155756 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -0.0206693 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -9.22528e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 2) + 2.86415e-10 *lens_ipow(x, 5)*lens_ipow(y, 3) + -6.70113e-08 *lens_ipow(x, 6)*dx*dy + 5.72449e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.104672 *lens_ipow(x, 2)*y*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -1.56045e-08 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx*dy+0.0f;
const float dx02 =  + 44.0953  + 18.506 *lens_ipow(dy, 2) + 56.398 *lens_ipow(dx, 2) + 1.45232 *y*dy + 0.0173492 *lens_ipow(y, 2) + 3.43848 *x*dx + 0.0384358 *lens_ipow(x, 2) + -3.78161 *lens_ipow(lambda, 3) + 14.7281 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -6.60218e-06 *x*lens_ipow(y, 4)*dx + 0.0467267 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 7418.74 *lens_ipow(dx, 2)*lens_ipow(dy, 6) + -0.0137795 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + -0.00624113 *lens_ipow(x, 4)*lens_ipow(dx, 4) + -9.22528e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + -6.70113e-08 *lens_ipow(x, 6)*y*dy + 20.6195 *lens_ipow(lambda, 10) + 185552 *lens_ipow(dx, 6)*lens_ipow(dy, 4) + 111683 *lens_ipow(dx, 8)*lens_ipow(dy, 2) + 20210.6 *lens_ipow(dx, 10) + -0.261681 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.0742288 *lens_ipow(x, 4)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -3.1209e-09 *lens_ipow(x, 4)*lens_ipow(y, 5)*dy + -4.37734e-10 *lens_ipow(x, 9)*dx+0.0f;
const float dx03 =  + -0.0122293 *dy + 37.012 *dx*dy + 1.45232 *y*dx + 0.549248 *x*dy + 0.0214982 *x*y + 9.81873 *lens_ipow(dx, 3)*dy + 2.58061e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.0155756 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 14837.5 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + -0.0206693 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -6.70113e-08 *lens_ipow(x, 6)*y*dx + 2.86224e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*dy + 106029 *lens_ipow(dx, 7)*lens_ipow(dy, 3) + 24818.5 *lens_ipow(dx, 9)*dy + -0.104672 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 5)*dy + -0.0296915 *lens_ipow(x, 4)*lens_ipow(dx, 5)*dy + -3.1209e-09 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx + 0.00117765 *lens_ipow(x, 5)*lens_ipow(dy, 5)+0.0f;
const float dx04 =  + -11.3448 *dx*lens_ipow(lambda, 2) + -0.629237 *x*lens_ipow(lambda, 3) + 206.195 *dx*lens_ipow(lambda, 9) + 7.70513 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + -0.00037931 *dy + 4.1033e-06 *y + 1.44886 *dx*dy + 0.0211923 *y*dx + 0.0346566 *x*dy + 0.000449806 *x*y + 0.00848631 *lens_ipow(dy, 3) + 0.00652786 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 0.00128579 *x*y*lens_ipow(dx, 4) + 9.45227e-08 *x*lens_ipow(y, 4)*dy + -0.0136488 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 9.43896e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 4.40141e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy + 1.04095 *lens_ipow(y, 2)*dx*lens_ipow(dy, 7) + 2.56328e-08 *lens_ipow(y, 7)*dx*lens_ipow(dy, 2) + 12.3204 *x*lens_ipow(dy, 9)+0.0f;
const float dx11 =  + 0.656259  + 4.1033e-06 *x + 1.73807 *lens_ipow(dy, 2) + 0.262874 *lens_ipow(dx, 2) + 0.0781325 *y*dy + -6.40572e-05 *y*dx + 0.000688744 *lens_ipow(y, 2) + 0.0211923 *x*dx + 0.000224903 *lens_ipow(x, 2) + -0.160619 *lens_ipow(lambda, 4) + 0.00475358 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0130557 *x*y*dx*lens_ipow(dy, 3) + 0.000642894 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 1.89045e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.0372652 *lens_ipow(y, 2)*lens_ipow(dx, 6) + 0.000130473 *lens_ipow(y, 4)*lens_ipow(dy, 4) + 3.55071e-09 *lens_ipow(y, 7)*dy + -0.0045496 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 5.66337e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 1.46714e-09 *lens_ipow(x, 6)*y*dy + 0.789592 *lens_ipow(lambda, 10) + 2.20174 *lens_ipow(dy, 6)*lens_ipow(lambda, 4) + 1.12815e-09 *lens_ipow(y, 8)*lens_ipow(dx, 2) + 2.08191 *x*y*dx*lens_ipow(dy, 7) + 1.7943e-07 *x*lens_ipow(y, 6)*dx*lens_ipow(dy, 2)+0.0f;
const float dx12 =  + 0.0455439 *lens_ipow(dy, 2) + 36.828 *dx*dy + 0.525747 *y*dx + -3.20286e-05 *lens_ipow(y, 2) + 1.44886 *x*dy + 0.0211923 *x*y + 0.00475358 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.00652786 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 0.00257158 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 15437.2 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 0.0745304 *lens_ipow(y, 3)*lens_ipow(dx, 5) + -0.0136488 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.88779e-09 *lens_ipow(x, 5)*lens_ipow(y, 3) + 32022.8 *dx*lens_ipow(dy, 9) + 2.50699e-10 *lens_ipow(y, 9)*dx + 1.04095 *x*lens_ipow(y, 2)*lens_ipow(dy, 7) + 2.56328e-08 *x*lens_ipow(y, 7)*lens_ipow(dy, 2)+0.0f;
const float dx13 =  + 44.0985  + -0.00037931 *x + 56.7165 *lens_ipow(dy, 2) + 0.0910878 *dx*dy + 18.414 *lens_ipow(dx, 2) + 3.47614 *y*dy + 0.0390663 *lens_ipow(y, 2) + 1.44886 *x*dx + 0.0173283 *lens_ipow(x, 2) + -3.8073 *lens_ipow(lambda, 3) + 0.0254589 *x*lens_ipow(dy, 2) + 0.00475358 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.0195836 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 4.72613e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 7718.59 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + 0.000104378 *lens_ipow(y, 5)*lens_ipow(dy, 3) + 4.43839e-10 *lens_ipow(y, 8) + -0.0090992 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*dy + 7.33568e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + 20.9501 *lens_ipow(lambda, 10) + 12843.6 *lens_ipow(dy, 10) + 144103 *lens_ipow(dx, 2)*lens_ipow(dy, 8) + 13.2104 *y*lens_ipow(dy, 5)*lens_ipow(lambda, 4) + 7.28668 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 6) + 5.12656e-08 *x*lens_ipow(y, 7)*dx*dy + 55.442 *lens_ipow(x, 2)*lens_ipow(dy, 8)+0.0f;
const float dx14 =  + -11.4219 *dy*lens_ipow(lambda, 2) + -0.642477 *y*lens_ipow(lambda, 3) + 209.501 *dy*lens_ipow(lambda, 9) + 7.89592 *y*lens_ipow(lambda, 9) + 8.80695 *y*lens_ipow(dy, 6)*lens_ipow(lambda, 3)+0.0f;
const float dx20 =  + -0.0220138  + -3.48758e-07 *y + 0.0460194 *lens_ipow(dy, 2) + 0.136832 *lens_ipow(dx, 2) + 0.00211819 *y*dy + 1.57983e-05 *lens_ipow(y, 2) + 0.00589682 *x*dx + 4.7557e-05 *lens_ipow(x, 2) + -0.00913681 *lens_ipow(lambda, 4) + 0.00327271 *x*y*lens_ipow(dx, 3)*dy + 4.43044e-08 *lens_ipow(x, 4)*y*dy + 1.27346e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -5.77914e-13 *lens_ipow(y, 8) + -0.000393455 *lens_ipow(x, 3)*lens_ipow(dx, 5) + 0.0450834 *lens_ipow(lambda, 10) + -5.2674e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + 6.84311e-05 *lens_ipow(x, 4)*lens_ipow(dy, 6) + -1.18707e-08 *lens_ipow(x, 6)*lens_ipow(dx, 3)*dy + 9.6784e-09 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)*dy + 1.01049e-10 *lens_ipow(x, 8)*lens_ipow(dy, 2) + -1.02288e-10 *lens_ipow(x, 8)*lens_ipow(dx, 2)+0.0f;
const float dx21 =  + 2.97585e-05 *dx + -3.48758e-07 *x + 0.0909783 *dx*dy + 0.00162136 *y*dx + 0.00211819 *x*dy + 3.15965e-05 *x*y + 0.00134092 *y*lens_ipow(dx, 3) + -6.02514e-07 *lens_ipow(y, 3)*dx + -0.0136069 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.00163636 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 8.86087e-09 *lens_ipow(x, 5)*dy + 5.09384e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -4.62331e-12 *x*lens_ipow(y, 7) + -6.58424e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx*dy + 1.38263e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2)*dy+0.0f;
const float dx22 =  + 0.0547469  + 0.000604636 *dx + 2.97585e-05 *y + 1.69644 *lens_ipow(dy, 2) + 5.05019 *lens_ipow(dx, 2) + 0.0909783 *y*dy + 0.000810681 *lens_ipow(y, 2) + 0.273665 *x*dx + 0.00294841 *lens_ipow(x, 2) + -0.260206 *lens_ipow(lambda, 3) + 0.34215 *lens_ipow(dy, 4) + 3.64679 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.00402 *lens_ipow(dx, 4) + 0.00201138 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.50629e-07 *lens_ipow(y, 4) + -0.0408206 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00490907 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 2.54692e-05 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + -0.000491819 *lens_ipow(x, 4)*lens_ipow(dx, 4) + 1.43868 *lens_ipow(lambda, 10) + 8311.67 *lens_ipow(dx, 4)*lens_ipow(dy, 6) + 5134.69 *lens_ipow(dx, 8)*lens_ipow(dy, 2) + 1462.66 *lens_ipow(dx, 10) + -1.31685e-10 *lens_ipow(x, 4)*lens_ipow(y, 5)*dy + -5.08742e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2)*dy + 2.76526e-09 *lens_ipow(x, 7)*y*dx*dy + -2.27307e-11 *lens_ipow(x, 9)*dx+0.0f;
const float dx23 =  + 3.39288 *dx*dy + 0.0909783 *y*dx + 0.0920388 *x*dy + 0.00211819 *x*y + 1.3686 *dx*lens_ipow(dy, 3) + 2.43119 *lens_ipow(dx, 3)*dy + -0.0272137 *y*lens_ipow(dx, 3)*dy + 0.00163636 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 8.86087e-09 *lens_ipow(x, 5)*y + 2.54692e-05 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + 9974.01 *lens_ipow(dx, 5)*lens_ipow(dy, 5) + 1141.04 *lens_ipow(dx, 9)*dy + -1.31685e-10 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx + 8.21173e-05 *lens_ipow(x, 5)*lens_ipow(dy, 5) + -1.69581e-09 *lens_ipow(x, 7)*lens_ipow(dx, 3) + 1.38263e-09 *lens_ipow(x, 7)*y*lens_ipow(dx, 2) + 2.24553e-11 *lens_ipow(x, 9)*dy+0.0f;
const float dx24 =  + -0.780617 *dx*lens_ipow(lambda, 2) + -0.0365473 *x*lens_ipow(lambda, 3) + 14.3868 *dx*lens_ipow(lambda, 9) + 0.450834 *x*lens_ipow(lambda, 9)+0.0f;
const float dx30 =  + 8.0622e-07 *y + 0.0917248 *dx*dy + 0.00209898 *y*dx + 0.00158994 *x*dy + 2.98321e-05 *x*y + 0.000421919 *lens_ipow(dy, 3) + 0.000727222 *x*lens_ipow(dy, 3) + 3.35759e-07 *lens_ipow(x, 3)*dy + 0.0013312 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -8.39532e-09 *lens_ipow(y, 6)*dx*dy + 4.42202e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.137746 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 5) + 0.255673 *x*lens_ipow(dy, 9) + -8.78957e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx*dy+0.0f;
const float dx31 =  + -0.0219592  + 8.0622e-07 *x + 0.136777 *lens_ipow(dy, 2) + 0.0453447 *lens_ipow(dx, 2) + 0.00583976 *y*dy + 4.63011e-05 *lens_ipow(y, 2) + 0.00209898 *x*dx + 1.49161e-05 *lens_ipow(x, 2) + -0.00947545 *lens_ipow(lambda, 4) + 0.000320229 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00266239 *x*y*dx*lens_ipow(dy, 3) + -0.000383447 *lens_ipow(y, 3)*lens_ipow(dy, 5) + -5.03719e-08 *x*lens_ipow(y, 5)*dx*dy + 1.1055e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0472013 *lens_ipow(lambda, 10) + 7.55516e-05 *lens_ipow(y, 4)*lens_ipow(dx, 6) + -1.09295e-10 *lens_ipow(y, 8)*lens_ipow(dy, 2) + 1.16024e-10 *lens_ipow(y, 8)*lens_ipow(dx, 2) + 0.275492 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 5) + -7.03166e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy+0.0f;
const float dx32 =  + -9.12943e-06  + 3.45854 *dx*dy + 0.0906894 *y*dx + 0.0917248 *x*dy + 0.00209898 *x*y + 0.0407783 *lens_ipow(dy, 4) + 1.58741 *dx*lens_ipow(dy, 3) + 0.149214 *lens_ipow(dx, 3)*dy + 0.000320229 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.0013312 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + -8.39532e-09 *x*lens_ipow(y, 6)*dy + 2.21101e-05 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2) + 1683.4 *dx*lens_ipow(dy, 9) + 18737.3 *lens_ipow(dx, 5)*lens_ipow(dy, 5) + 9.06619e-05 *lens_ipow(y, 5)*lens_ipow(dx, 5) + 2.57832e-11 *lens_ipow(y, 9)*dx + 0.413237 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 5) + -1.75791e-10 *lens_ipow(x, 5)*lens_ipow(y, 4)*dy+0.0f;
const float dx33 =  + 0.0556752  + 5.11507 *lens_ipow(dy, 2) + 1.72927 *lens_ipow(dx, 2) + 0.273553 *y*dy + 0.00291988 *lens_ipow(y, 2) + 0.0917248 *x*dx + 0.000794969 *lens_ipow(x, 2) + -0.265342 *lens_ipow(lambda, 3) + 0.00126576 *x*lens_ipow(dy, 2) + 1.66982 *lens_ipow(dy, 4) + 0.163113 *dx*lens_ipow(dy, 3) + 2.38111 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0373036 *lens_ipow(dx, 4) + 0.00109083 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 8.39396e-08 *lens_ipow(x, 4) + 0.000320229 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.00399359 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.000479309 *lens_ipow(y, 4)*lens_ipow(dy, 4) + -8.39532e-09 *x*lens_ipow(y, 6)*dx + 2.21101e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy + 1.46349 *lens_ipow(lambda, 10) + 1291.28 *lens_ipow(dy, 10) + 7575.31 *lens_ipow(dx, 2)*lens_ipow(dy, 8) + 15614.4 *lens_ipow(dx, 6)*lens_ipow(dy, 4) + -2.42877e-11 *lens_ipow(y, 9)*dy + 0.688729 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4) + 1.15053 *lens_ipow(x, 2)*lens_ipow(dy, 8) + -1.75791e-10 *lens_ipow(x, 5)*lens_ipow(y, 4)*dx+0.0f;
const float dx34 =  + -0.796026 *dy*lens_ipow(lambda, 2) + -0.0379018 *y*lens_ipow(lambda, 3) + 14.6349 *dy*lens_ipow(lambda, 9) + 0.472013 *y*lens_ipow(lambda, 9)+0.0f;
const float dx40 =  + -6.74599e-07  + 3.99727e-06 *dy + -0.0036196 *dx + -5.65215e-05 *x + -0.0267483 *dx*lens_ipow(dy, 2) + 1.40227e-05 *lens_ipow(y, 2)*dx + 8.22205e-06 *x*y*dy + -0.000224583 *lens_ipow(dy, 4) + -1.39284e-05 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.00576231 *x*lens_ipow(dy, 4) + -0.000946229 *x*y*lens_ipow(dx, 2)*dy + -0.000737809 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 8.56854e-07 *lens_ipow(x, 4)*dx + 0.169892 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.51404e-09 *x*lens_ipow(y, 5)*dy + -4.54308e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + 1.83003e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + -4.06897e-07 *lens_ipow(x, 4)*y*dx*dy + 1.32677e-07 *lens_ipow(x, 5)*lens_ipow(dy, 2) + 5.36376e-11 *lens_ipow(x, 7) + 0.490614 *y*dx*lens_ipow(dy, 7)+0.0f;
const float dx41 =  + -0.00242783 *dy + -5.93749e-05 *y + -0.0445989 *lens_ipow(dy, 3) + -0.021547 *lens_ipow(dx, 2)*dy + 2.80453e-05 *x*y*dx + 4.11102e-06 *lens_ipow(x, 2)*dy + -1.80828e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 6.04768e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2) + 2.80448e-09 *lens_ipow(y, 5) + -2.78568e-05 *x*y*dx*lens_ipow(dy, 2) + -0.000473114 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + 0.169892 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 3.7851e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -4.54308e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + 1.83003e-10 *lens_ipow(x, 4)*lens_ipow(y, 3) + -8.13794e-08 *lens_ipow(x, 5)*dx*dy + 0.000566177 *lens_ipow(y, 3)*lens_ipow(dy, 6) + 0.490614 *x*dx*lens_ipow(dy, 7)+0.0f;
const float dx42 =  + -6.09378e-05  + -0.206911 *dx + -0.0036196 *x + -0.043094 *y*dx*dy + -0.0267483 *x*lens_ipow(dy, 2) + 1.40227e-05 *x*lens_ipow(y, 2) + -32.9062 *dx*lens_ipow(dy, 4) + -54.3604 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -19.0873 *lens_ipow(dx, 5) + 3.02384e-06 *lens_ipow(y, 4)*dx + -1.39284e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000946229 *lens_ipow(x, 2)*y*dx*dy + -0.000737809 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 1.71371e-07 *lens_ipow(x, 5) + 0.509675 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.51436e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -8.13794e-08 *lens_ipow(x, 5)*y*dy + 0.490614 *x*y*lens_ipow(dy, 7)+0.0f;
const float dx43 =  + -0.230082 *dy + -0.00242783 *y + 3.99727e-06 *x + -0.133797 *y*lens_ipow(dy, 2) + -0.021547 *y*lens_ipow(dx, 2) + -0.0534965 *x*dx*dy + 4.11102e-06 *lens_ipow(x, 2)*y + -0.000898334 *x*lens_ipow(dy, 3) + -35.5303 *lens_ipow(dy, 5) + -65.8123 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -27.1802 *lens_ipow(dx, 4)*dy + -9.04142e-06 *lens_ipow(y, 4)*dy + -2.78568e-05 *x*lens_ipow(y, 2)*dx*dy + -0.0115246 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -0.000473114 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + 0.509675 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 7.57021e-10 *lens_ipow(x, 2)*lens_ipow(y, 5) + -1.51436e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -8.13794e-08 *lens_ipow(x, 5)*y*dx + 4.42257e-08 *lens_ipow(x, 6)*dy + 0.000849266 *lens_ipow(y, 4)*lens_ipow(dy, 5) + 3.4343 *x*y*dx*lens_ipow(dy, 6)+0.0f;
const float dx44 =  + 0.180576  + -0.454775 *lens_ipow(lambda, 2) + 2.99707 *lens_ipow(lambda, 10)+0.0f;
