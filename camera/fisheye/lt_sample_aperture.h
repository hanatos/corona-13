//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + 0.000155008  + 44.0953 *begin_dx + 6.81398e-06 *begin_y + 0.656767 *begin_x + -0.00611466 *lens_ipow(begin_dy, 2) + -3.59568e-06 *begin_x*begin_y + 18.506 *begin_dx*lens_ipow(begin_dy, 2) + 18.7993 *lens_ipow(begin_dx, 3) + 1.45232 *begin_y*begin_dx*begin_dy + 0.0173492 *lens_ipow(begin_y, 2)*begin_dx + 0.274624 *begin_x*lens_ipow(begin_dy, 2) + 1.71924 *begin_x*lens_ipow(begin_dx, 2) + 0.0214982 *begin_x*begin_y*begin_dy + 0.000216627 *begin_x*lens_ipow(begin_y, 2) + 0.0384358 *lens_ipow(begin_x, 2)*begin_dx + 0.000207915 *lens_ipow(begin_x, 3) + -3.78161 *begin_dx*lens_ipow(begin_lambda, 3) + 4.90937 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.157309 *begin_x*lens_ipow(begin_lambda, 4) + 8.60202e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + -3.30109e-06 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + 0.0155756 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 2472.91 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6) + -0.00688976 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.00124823 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 5) + -4.61264e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 7.16037e-11 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + -6.70113e-08 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy + 1.43112e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + 20.6195 *begin_dx*lens_ipow(begin_lambda, 10) + 26507.4 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 4) + 12409.3 *lens_ipow(begin_dx, 9)*lens_ipow(begin_dy, 2) + 1837.33 *lens_ipow(begin_dx, 11) + 0.770513 *begin_x*lens_ipow(begin_lambda, 10) + -0.0523361 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + -0.0148458 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + -3.1209e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5)*begin_dx*begin_dy + 0.000196274 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 6) + -2.18867e-10 *lens_ipow(begin_x, 9)*lens_ipow(begin_dx, 2) + 6.17016e-14 *lens_ipow(begin_x, 11),
       + -1.81429e-06  + 44.0985 *begin_dy + 0.656259 *begin_y + -0.00037931 *begin_x*begin_dy + 4.1033e-06 *begin_x*begin_y + 18.9055 *lens_ipow(begin_dy, 3) + 0.0455439 *begin_dx*lens_ipow(begin_dy, 2) + 18.414 *lens_ipow(begin_dx, 2)*begin_dy + 1.73807 *begin_y*lens_ipow(begin_dy, 2) + 0.262874 *begin_y*lens_ipow(begin_dx, 2) + 0.0390663 *lens_ipow(begin_y, 2)*begin_dy + -3.20286e-05 *lens_ipow(begin_y, 2)*begin_dx + 0.000229581 *lens_ipow(begin_y, 3) + 1.44886 *begin_x*begin_dx*begin_dy + 0.0211923 *begin_x*begin_y*begin_dx + 0.0173283 *lens_ipow(begin_x, 2)*begin_dy + 0.000224903 *lens_ipow(begin_x, 2)*begin_y + -3.8073 *begin_dy*lens_ipow(begin_lambda, 3) + 0.00848631 *begin_x*lens_ipow(begin_dy, 3) + -0.160619 *begin_y*lens_ipow(begin_lambda, 4) + 0.00237679 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.00652786 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 0.000642894 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 4) + 4.72613e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + 2572.86 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 3) + 0.0124217 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 6) + 2.60945e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 4) + 4.43839e-10 *lens_ipow(begin_y, 8)*begin_dy + -0.0045496 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 1.88779e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dx + 7.33568e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dy + 20.9501 *begin_dy*lens_ipow(begin_lambda, 10) + 1167.6 *lens_ipow(begin_dy, 11) + 16011.4 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 9) + 0.789592 *begin_y*lens_ipow(begin_lambda, 10) + 2.20174 *begin_y*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 4) + 1.2535e-10 *lens_ipow(begin_y, 9)*lens_ipow(begin_dx, 2) + 1.04095 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 7) + 2.56328e-08 *begin_x*lens_ipow(begin_y, 7)*begin_dx*lens_ipow(begin_dy, 2) + 6.16022 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 9)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 44.0953  + 18.506 *lens_ipow(begin_dy, 2) + 56.398 *lens_ipow(begin_dx, 2) + 1.45232 *begin_y*begin_dy + 0.0173492 *lens_ipow(begin_y, 2) + 3.43848 *begin_x*begin_dx + 0.0384358 *lens_ipow(begin_x, 2) + -3.78161 *lens_ipow(begin_lambda, 3) + 14.7281 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -6.60218e-06 *begin_x*lens_ipow(begin_y, 4)*begin_dx + 0.0467267 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 7418.74 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6) + -0.0137795 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 3) + -0.00624113 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 4) + -9.22528e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx + -6.70113e-08 *lens_ipow(begin_x, 6)*begin_y*begin_dy + 20.6195 *lens_ipow(begin_lambda, 10) + 185552 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 4) + 111683 *lens_ipow(begin_dx, 8)*lens_ipow(begin_dy, 2) + 20210.6 *lens_ipow(begin_dx, 10) + -0.261681 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -0.0742288 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -3.1209e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5)*begin_dy + -4.37734e-10 *lens_ipow(begin_x, 9)*begin_dx+0.0f;
    dx1_domega0[0][1] =  + -0.0122293 *begin_dy + 37.012 *begin_dx*begin_dy + 1.45232 *begin_y*begin_dx + 0.549248 *begin_x*begin_dy + 0.0214982 *begin_x*begin_y + 9.81873 *lens_ipow(begin_dx, 3)*begin_dy + 2.58061e-05 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 0.0155756 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 14837.5 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5) + -0.0206693 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -6.70113e-08 *lens_ipow(begin_x, 6)*begin_y*begin_dx + 2.86224e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dy + 106029 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 3) + 24818.5 *lens_ipow(begin_dx, 9)*begin_dy + -0.104672 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*begin_dy + -0.0296915 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 5)*begin_dy + -3.1209e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5)*begin_dx + 0.00117765 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 5)+0.0f;
    dx1_domega0[1][0] =  + 0.0455439 *lens_ipow(begin_dy, 2) + 36.828 *begin_dx*begin_dy + 0.525747 *begin_y*begin_dx + -3.20286e-05 *lens_ipow(begin_y, 2) + 1.44886 *begin_x*begin_dy + 0.0211923 *begin_x*begin_y + 0.00475358 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.00652786 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + 0.00257158 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 15437.2 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3) + 0.0745304 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 5) + -0.0136488 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 1.88779e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3) + 32022.8 *begin_dx*lens_ipow(begin_dy, 9) + 2.50699e-10 *lens_ipow(begin_y, 9)*begin_dx + 1.04095 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 7) + 2.56328e-08 *begin_x*lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2)+0.0f;
    dx1_domega0[1][1] =  + 44.0985  + -0.00037931 *begin_x + 56.7165 *lens_ipow(begin_dy, 2) + 0.0910878 *begin_dx*begin_dy + 18.414 *lens_ipow(begin_dx, 2) + 3.47614 *begin_y*begin_dy + 0.0390663 *lens_ipow(begin_y, 2) + 1.44886 *begin_x*begin_dx + 0.0173283 *lens_ipow(begin_x, 2) + -3.8073 *lens_ipow(begin_lambda, 3) + 0.0254589 *begin_x*lens_ipow(begin_dy, 2) + 0.00475358 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.0195836 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 4.72613e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + 7718.59 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + 0.000104378 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 3) + 4.43839e-10 *lens_ipow(begin_y, 8) + -0.0090992 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 7.33568e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2) + 20.9501 *lens_ipow(begin_lambda, 10) + 12843.6 *lens_ipow(begin_dy, 10) + 144103 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 8) + 13.2104 *begin_y*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 4) + 7.28668 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 6) + 5.12656e-08 *begin_x*lens_ipow(begin_y, 7)*begin_dx*begin_dy + 55.442 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 8)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + 0.0117585 *begin_dy + -22.3495 *begin_dx + -0.000884526 *begin_y + -8.28978 *begin_x + 0.045628 *begin_y*begin_dx + 0.00838426 *begin_x*begin_dy + 618.265 *begin_dx*lens_ipow(begin_dy, 2) + -9.43987 *lens_ipow(begin_dx, 2)*begin_dy + 605.402 *lens_ipow(begin_dx, 3) + 25.2313 *begin_y*begin_dx*begin_dy + 0.289827 *lens_ipow(begin_y, 2)*begin_dx + 11.3295 *begin_x*lens_ipow(begin_dy, 2) + 35.3999 *begin_x*lens_ipow(begin_dx, 2) + 0.349916 *begin_x*begin_y*begin_dy + -0.00912985 *begin_x*begin_y*begin_dx + -0.00508106 *begin_x*lens_ipow(begin_y, 2) + 0.634704 *lens_ipow(begin_x, 2)*begin_dx + -0.00406587 *lens_ipow(begin_x, 3) + -20.2301 *begin_dx*lens_ipow(begin_lambda, 4) + -0.706737 *begin_x*lens_ipow(begin_lambda, 4) + -0.0191653 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -0.0920881 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 7.37571e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 0.946716 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + 19928.5 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + 7274.59 *lens_ipow(begin_dx, 7)*begin_lambda + 1.87228 *begin_x*begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + 0.00730453 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 1.23373e-09 *begin_x*lens_ipow(begin_y, 8) + 0.00129279 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 4) + -9.81724e-07 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2) + 121314 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + 1337.48 *begin_x*lens_ipow(begin_dy, 10) + 145.999 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5) + 8.48491 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 8) + -0.00352702 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.00226692 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + 3.22727e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + 1.70541e-07 *lens_ipow(begin_x, 7)*begin_y*lens_ipow(begin_dx, 3) + 8.17591e-12 *lens_ipow(begin_x, 11);
    out[1] =  + 0.00657084  + -20.7283 *begin_dy + -0.25503 *begin_dx + -8.30838 *begin_y + -0.00406695 *begin_x + 0.000416426 *begin_x*begin_y + 464.174 *lens_ipow(begin_dy, 3) + 13.1527 *begin_dx*lens_ipow(begin_dy, 2) + 601.657 *lens_ipow(begin_dx, 2)*begin_dy + 36.5211 *begin_y*lens_ipow(begin_dy, 2) + 12.2377 *begin_y*lens_ipow(begin_dx, 2) + 0.71662 *lens_ipow(begin_y, 2)*begin_dy + -0.0023371 *lens_ipow(begin_y, 3) + 0.265505 *begin_x*lens_ipow(begin_dy, 2) + 24.1507 *begin_x*begin_dx*begin_dy + 0.417748 *begin_x*begin_y*begin_dx + 0.290074 *lens_ipow(begin_x, 2)*begin_dy + -0.00255856 *lens_ipow(begin_x, 2)*begin_y + -0.63527 *begin_y*lens_ipow(begin_lambda, 3) + 0.445646 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1594.89 *lens_ipow(begin_dy, 5) + 1836.8 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -34.3903 *begin_dy*lens_ipow(begin_lambda, 5) + 202.597 *begin_dx*lens_ipow(begin_dy, 5) + 1948.2 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 4.10871e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + -5497.66 *lens_ipow(begin_dy, 10) + 68158.4 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 8) + 643.123 *begin_x*lens_ipow(begin_dy, 9) + -2.82531 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 11382.4 *lens_ipow(begin_dy, 7)*lens_ipow(begin_lambda, 4) + -187226 *lens_ipow(begin_dy, 11) + -1.71104e-07 *lens_ipow(begin_y, 8)*lens_ipow(begin_dy, 3) + 3.38221e-12 *lens_ipow(begin_y, 11) + -4354.38 *begin_x*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6) + 52.1274 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 4) + -0.0017902 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + -1.70887e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dx*lens_ipow(begin_dy, 2) + 8.26979e-05 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 5.3851e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 3);
    out[2] =  + 4.39181e-05  + -0.000691406 *begin_dy + -0.371834 *begin_dx + -0.103921 *begin_x + -0.00535352 *begin_dx*begin_dy + 0.000331089 *begin_y*begin_dx + 6.79024 *begin_dx*lens_ipow(begin_dy, 2) + 6.62924 *lens_ipow(begin_dx, 3) + 0.260144 *begin_y*begin_dx*begin_dy + 0.0029392 *lens_ipow(begin_y, 2)*begin_dx + 0.127067 *begin_x*lens_ipow(begin_dy, 2) + 0.373901 *begin_x*lens_ipow(begin_dx, 2) + 0.0035462 *begin_x*begin_y*begin_dy + -4.39946e-05 *begin_x*begin_y*begin_dx + 5.73413e-05 *begin_x*lens_ipow(begin_y, 2) + 0.00806487 *lens_ipow(begin_x, 2)*begin_dx + 0.000233977 *lens_ipow(begin_x, 3) + -0.133176 *begin_dx*lens_ipow(begin_lambda, 3) + -0.175902 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 1.08306 *lens_ipow(begin_dx, 4)*begin_dy + -0.436332 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 0.00903928 *begin_x*begin_y*lens_ipow(begin_dy, 3) + 1.02796e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dy + 0.00781677 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + -1.81248e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3) + -2.84329e-07 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + -4.79735e-09 *begin_x*lens_ipow(begin_y, 6) + -3.27104e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + -4.62993e-12 *lens_ipow(begin_x, 9) + -0.00665127 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + -17.4935 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 4) + 0.680912 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + -0.019553 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 1.19094e-07 *begin_x*lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 4) + -0.594577 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 9) + 0.000630127 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 5.5158e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000392073 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -6.36822e-06 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + -4.79451e-11 *lens_ipow(begin_x, 8)*begin_y*lens_ipow(begin_dx, 2);
    out[3] =  + 4.60351e-05  + -0.343971 *begin_dy + 0.00051455 *begin_dx + -0.103301 *begin_y + 0.00401013 *lens_ipow(begin_dy, 2) + 3.5394e-06 *begin_x*begin_y + 6.08659 *lens_ipow(begin_dy, 3) + -0.0396805 *begin_dx*lens_ipow(begin_dy, 2) + 6.10086 *lens_ipow(begin_dx, 2)*begin_dy + 0.32933 *begin_y*lens_ipow(begin_dy, 2) + 0.069954 *begin_y*lens_ipow(begin_dx, 2) + 0.00677717 *lens_ipow(begin_y, 2)*begin_dy + 0.000216533 *lens_ipow(begin_y, 3) + 0.222213 *begin_x*begin_dx*begin_dy + 0.00408993 *begin_x*begin_y*begin_dx + 0.00265126 *lens_ipow(begin_x, 2)*begin_dy + 0.000383617 *lens_ipow(begin_x, 2)*begin_y + -0.132187 *begin_dy*lens_ipow(begin_lambda, 3) + 0.00195387 *begin_y*lens_ipow(begin_lambda, 3) + 0.00898349 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.425595 *begin_y*lens_ipow(begin_dx, 4) + 0.000199225 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -0.00390521 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + 8.9035e-06 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 7.47543e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -4.01124e-06 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + 2.09168 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -2.45899e-06 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2) + 1.33329e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy + -39.5143 *lens_ipow(begin_dy, 10) + -16.2815 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 7) + -0.0809489 *begin_x*begin_y*lens_ipow(begin_dy, 8) + 42.5304 *lens_ipow(begin_dy, 7)*lens_ipow(begin_lambda, 4) + 0.444424 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 8) + 0.0584587 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 8) + -2.24918e-08 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 7.60653e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dy + 0.0294376 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 7)*begin_dy + 1.15702e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 5) + -0.0123719 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.103921  + 0.127067 *lens_ipow(begin_dy, 2) + 0.373901 *lens_ipow(begin_dx, 2) + 0.0035462 *begin_y*begin_dy + -4.39946e-05 *begin_y*begin_dx + 5.73413e-05 *lens_ipow(begin_y, 2) + 0.0161297 *begin_x*begin_dx + 0.000701932 *lens_ipow(begin_x, 2) + 0.00903928 *begin_y*lens_ipow(begin_dy, 3) + 3.08387e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -4.79735e-09 *lens_ipow(begin_y, 6) + -6.54208e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + -4.16693e-11 *lens_ipow(begin_x, 8) + -0.00665127 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + 0.680912 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + -0.019553 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 1.19094e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 4) + -1.18915 *begin_x*lens_ipow(begin_dx, 9) + 0.00126025 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 1.65474e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.00196036 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -3.18411e-05 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + -3.83561e-10 *lens_ipow(begin_x, 7)*begin_y*lens_ipow(begin_dx, 2)+0.0f;
    domega2_dx0[0][1] =  + 0.000331089 *begin_dx + 0.260144 *begin_dx*begin_dy + 0.00587841 *begin_y*begin_dx + 0.0035462 *begin_x*begin_dy + -4.39946e-05 *begin_x*begin_dx + 0.000114683 *begin_x*begin_y + -0.436332 *lens_ipow(begin_dx, 3)*begin_dy + 0.00903928 *begin_x*lens_ipow(begin_dy, 3) + 1.02796e-05 *lens_ipow(begin_x, 3)*begin_dy + 0.0156335 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + -7.24992e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3) + -1.42164e-06 *lens_ipow(begin_y, 4)*begin_dx*begin_dy + -2.87841e-08 *begin_x*lens_ipow(begin_y, 5) + -9.81312e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + -0.0133025 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + -17.4935 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 4) + 1.36182 *begin_x*begin_y*lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + -0.0586591 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 7.14564e-07 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 4) + 0.00189038 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 2.20632e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -6.36822e-06 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 4)*begin_dy + -4.79451e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_dx, 2)+0.0f;
    domega2_dx0[1][0] =  + 3.5394e-06 *begin_y + 0.222213 *begin_dx*begin_dy + 0.00408993 *begin_y*begin_dx + 0.00530253 *begin_x*begin_dy + 0.000767235 *begin_x*begin_y + -0.00390521 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + 8.9035e-06 *lens_ipow(begin_y, 3)*begin_dx + 1.49509e-06 *begin_x*lens_ipow(begin_y, 3) + -1.20337e-05 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -9.83597e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2) + 5.33316e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dy + -0.0809489 *begin_y*lens_ipow(begin_dy, 8) + 1.52131e-11 *begin_x*lens_ipow(begin_y, 8)*begin_dy + 0.0883127 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 7)*begin_dy + 3.47105e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 5) + -0.0494876 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5)+0.0f;
    domega2_dx0[1][1] =  + -0.103301  + 3.5394e-06 *begin_x + 0.32933 *lens_ipow(begin_dy, 2) + 0.069954 *lens_ipow(begin_dx, 2) + 0.0135543 *begin_y*begin_dy + 0.000649598 *lens_ipow(begin_y, 2) + 0.00408993 *begin_x*begin_dx + 0.000383617 *lens_ipow(begin_x, 2) + 0.00195387 *lens_ipow(begin_lambda, 3) + 0.00898349 *lens_ipow(begin_dx, 2)*begin_dy + 0.425595 *lens_ipow(begin_dx, 4) + 0.000597675 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.00390521 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 2.67105e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 2.24263e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 2.09168 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -2.45899e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + 2.66658e-07 *lens_ipow(begin_x, 4)*begin_y*begin_dy + -16.2815 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 7) + -0.0809489 *begin_x*lens_ipow(begin_dy, 8) + 0.888848 *begin_y*begin_dx*lens_ipow(begin_dy, 8) + 0.175376 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 8) + -1.57442e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 6.08522e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*begin_dy + 3.47105e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.303237  + 0.000143379 *begin_dy + -5.76695e-06 *begin_x + -0.137045 *lens_ipow(begin_dy, 2) + 0.00338181 *begin_dx*begin_dy + -0.140292 *lens_ipow(begin_dx, 2) + 0.000849689 *begin_y*begin_dy + -0.00011498 *lens_ipow(begin_y, 2) + -0.00163802 *begin_x*begin_dx + -7.60768e-05 *lens_ipow(begin_x, 2) + 0.151728 *lens_ipow(begin_lambda, 3) + -0.0904399 *begin_y*lens_ipow(begin_dy, 3) + 0.000738925 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.000108424 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -0.000900217 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 25.5912 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 8.73982 *lens_ipow(begin_dx, 6) + -3.51514e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + 9.5092e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 2) + -3.10165e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -1.12902e-08 *lens_ipow(begin_x, 6) + -117.273 *lens_ipow(begin_dy, 8) + -5.8025e-11 *lens_ipow(begin_y, 8) + -0.000563117 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 2) + 0.000474406 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 0.0974581 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + -0.00884298 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*begin_dy + -4270.57 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 8) + -10938.7 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 4) + -2230.37 *lens_ipow(begin_dx, 8)*lens_ipow(begin_dy, 2) + -0.723428 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 8) + -0.00250662 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -5.86835e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 4) + 30.6209 *begin_x*lens_ipow(begin_dx, 9) + 2.3652e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*begin_dy + 0.117718 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 6) + 4.85596e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -2.45864e-09 *lens_ipow(begin_x, 7)*begin_y*begin_dx*begin_dy + -1.14705 *lens_ipow(begin_lambda, 11) + 25.4491 *lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 5);
else
  out[4] = 0.0f;
