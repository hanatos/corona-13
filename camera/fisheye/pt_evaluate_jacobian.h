const float dx00 =  + -8.28978  + 0.00838426 *dy + 11.3295 *lens_ipow(dy, 2) + 35.3999 *lens_ipow(dx, 2) + 0.349916 *y*dy + -0.00912985 *y*dx + -0.00508106 *lens_ipow(y, 2) + 1.26941 *x*dx + -0.0121976 *lens_ipow(x, 2) + -0.706737 *lens_ipow(lambda, 4) + -0.0191653 *lens_ipow(y, 2)*dx*dy + -0.184176 *x*y*dx*dy + 0.000221271 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.87228 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 0.00730453 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.23373e-09 *lens_ipow(y, 8) + 0.00646393 *lens_ipow(x, 4)*lens_ipow(dy, 4) + -6.87207e-06 *lens_ipow(x, 6)*lens_ipow(dx, 2) + 1337.48 *lens_ipow(dy, 10) + 291.999 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 5) + 25.4547 *lens_ipow(x, 2)*lens_ipow(dx, 8) + -0.0105811 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.0113346 *lens_ipow(x, 4)*y*lens_ipow(dx, 4)*dy + 1.93636e-07 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy + 1.19379e-06 *lens_ipow(x, 6)*y*lens_ipow(dx, 3) + 8.99351e-11 *lens_ipow(x, 10)+0.0f;
const float dx01 =  + -0.000884526  + 0.045628 *dx + 25.2313 *dx*dy + 0.579653 *y*dx + 0.349916 *x*dy + -0.00912985 *x*dx + -0.0101621 *x*y + -0.0383305 *x*y*dx*dy + -0.0920881 *lens_ipow(x, 2)*dx*dy + 0.000147514 *lens_ipow(x, 3)*y + 1.89343 *y*lens_ipow(dx, 3)*dy + 1.87228 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 0.0292181 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 9.86983e-09 *x*lens_ipow(y, 7) + 145.999 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 5) + -0.0105811 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.00226692 *lens_ipow(x, 5)*lens_ipow(dx, 4)*dy + 9.68182e-08 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy + 1.70541e-07 *lens_ipow(x, 7)*lens_ipow(dx, 3)+0.0f;
const float dx02 =  + -22.3495  + 0.045628 *y + 618.265 *lens_ipow(dy, 2) + -18.8797 *dx*dy + 1816.21 *lens_ipow(dx, 2) + 25.2313 *y*dy + 0.289827 *lens_ipow(y, 2) + 70.7999 *x*dx + -0.00912985 *x*y + 0.634704 *lens_ipow(x, 2) + -20.2301 *lens_ipow(lambda, 4) + -0.0191653 *x*lens_ipow(y, 2)*dy + -0.0920881 *lens_ipow(x, 2)*y*dy + 2.84015 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 59785.5 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 50922.1 *lens_ipow(dx, 6)*lambda + 0.0146091 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + -1.96345e-06 *lens_ipow(x, 7)*dx + 727886 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 437.998 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 5) + 67.8792 *lens_ipow(x, 3)*lens_ipow(dx, 7) + -0.0105811 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00906767 *lens_ipow(x, 5)*y*lens_ipow(dx, 3)*dy + 3.22727e-08 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy + 5.11623e-07 *lens_ipow(x, 7)*y*lens_ipow(dx, 2)+0.0f;
const float dx03 =  + 0.0117585  + 0.00838426 *x + 1236.53 *dx*dy + -9.43987 *lens_ipow(dx, 2) + 25.2313 *y*dx + 22.659 *x*dy + 0.349916 *x*y + -0.0191653 *x*lens_ipow(y, 2)*dx + -0.0920881 *lens_ipow(x, 2)*y*dx + 0.946716 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 79713.9 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 5.61685 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.0146091 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + 0.00517115 *lens_ipow(x, 5)*lens_ipow(dy, 3) + 363943 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 13374.8 *x*lens_ipow(dy, 9) + 729.997 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -0.00705404 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + -0.00226692 *lens_ipow(x, 5)*y*lens_ipow(dx, 4) + 3.22727e-08 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const float dx04 =  + -80.9203 *dx*lens_ipow(lambda, 3) + -2.82695 *x*lens_ipow(lambda, 3) + 7274.59 *lens_ipow(dx, 7) + 5.61685 *x*y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 242629 *lens_ipow(dx, 6)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx10 =  + -0.00406695  + 0.000416426 *y + 0.265505 *lens_ipow(dy, 2) + 24.1507 *dx*dy + 0.417748 *y*dx + 0.580148 *x*dy + -0.00511712 *x*y + 8.21742e-09 *x*lens_ipow(y, 7) + 643.123 *lens_ipow(dy, 9) + -5.65063 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -4354.38 *y*lens_ipow(dx, 3)*lens_ipow(dy, 6) + 52.1274 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 4) + -0.0017902 *lens_ipow(y, 4)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -5.12661e-06 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 0.000496187 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.30808e-10 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const float dx11 =  + -8.30838  + 0.000416426 *x + 36.5211 *lens_ipow(dy, 2) + 12.2377 *lens_ipow(dx, 2) + 1.43324 *y*dy + -0.00701129 *lens_ipow(y, 2) + 0.417748 *x*dx + -0.00255856 *lens_ipow(x, 2) + -0.63527 *lens_ipow(lambda, 3) + 0.445646 *lens_ipow(dx, 2)*dy + 2.8761e-08 *lens_ipow(x, 2)*lens_ipow(y, 6) + -2.82531 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.36883e-06 *lens_ipow(y, 7)*lens_ipow(dy, 3) + 3.72043e-11 *lens_ipow(y, 10) + -4354.38 *x*lens_ipow(dx, 3)*lens_ipow(dy, 6) + 104.255 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 4) + -0.0071608 *x*lens_ipow(y, 3)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -8.54435e-06 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + 8.26979e-05 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.61553e-10 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx12 =  + -0.25503  + 13.1527 *lens_ipow(dy, 2) + 1203.31 *dx*dy + 24.4755 *y*dx + 24.1507 *x*dy + 0.417748 *x*y + 0.891292 *y*dx*dy + 3673.6 *dx*lens_ipow(dy, 3) + 202.597 *lens_ipow(dy, 5) + 9740.99 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 136317 *dx*lens_ipow(dy, 8) + -5.65063 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -13063.1 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 6) + 208.51 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -1.70887e-06 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dy, 2) + 0.000165396 *lens_ipow(x, 6)*y*dx*lens_ipow(dy, 2)+0.0f;
const float dx13 =  + -20.7283  + 1392.52 *lens_ipow(dy, 2) + 26.3053 *dx*dy + 601.657 *lens_ipow(dx, 2) + 73.0421 *y*dy + 0.71662 *lens_ipow(y, 2) + 0.53101 *x*dy + 24.1507 *x*dx + 0.290074 *lens_ipow(x, 2) + 0.445646 *y*lens_ipow(dx, 2) + 7974.46 *lens_ipow(dy, 4) + 5510.39 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -34.3903 *lens_ipow(lambda, 5) + 1012.98 *dx*lens_ipow(dy, 4) + 3896.39 *lens_ipow(dx, 5)*dy + -54976.6 *lens_ipow(dy, 9) + 545268 *lens_ipow(dx, 2)*lens_ipow(dy, 7) + 5788.11 *x*lens_ipow(dy, 8) + -5.65063 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 79677.1 *lens_ipow(dy, 6)*lens_ipow(lambda, 4) + -2.05949e+06 *lens_ipow(dy, 10) + -5.13311e-07 *lens_ipow(y, 8)*lens_ipow(dy, 2) + -26126.3 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 5) + 208.51 *x*lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 3) + -0.0071608 *x*lens_ipow(y, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -3.41774e-06 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + 0.000165396 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)*dy+0.0f;
const float dx14 =  + -1.90581 *y*lens_ipow(lambda, 2) + -171.952 *dy*lens_ipow(lambda, 4) + -8.47594 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 45529.8 *lens_ipow(dy, 7)*lens_ipow(lambda, 3) + -0.0035804 *x*lens_ipow(y, 4)*lens_ipow(dy, 4)*lambda+0.0f;
const float dx20 =  + -0.103921  + 0.127067 *lens_ipow(dy, 2) + 0.373901 *lens_ipow(dx, 2) + 0.0035462 *y*dy + -4.39946e-05 *y*dx + 5.73413e-05 *lens_ipow(y, 2) + 0.0161297 *x*dx + 0.000701932 *lens_ipow(x, 2) + 0.00903928 *y*lens_ipow(dy, 3) + 3.08387e-05 *lens_ipow(x, 2)*y*dy + -4.79735e-09 *lens_ipow(y, 6) + -6.54208e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -4.16693e-11 *lens_ipow(x, 8) + -0.00665127 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 0.680912 *lens_ipow(y, 2)*lens_ipow(dx, 6)*lens_ipow(dy, 2) + -0.019553 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 5) + 1.19094e-07 *lens_ipow(y, 6)*lens_ipow(dy, 4) + -1.18915 *x*lens_ipow(dx, 9) + 0.00126025 *x*lens_ipow(y, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 1.65474e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00196036 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -3.18411e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 4)*dy + -3.83561e-10 *lens_ipow(x, 7)*y*lens_ipow(dx, 2)+0.0f;
const float dx21 =  + 0.000331089 *dx + 0.260144 *dx*dy + 0.00587841 *y*dx + 0.0035462 *x*dy + -4.39946e-05 *x*dx + 0.000114683 *x*y + -0.436332 *lens_ipow(dx, 3)*dy + 0.00903928 *x*lens_ipow(dy, 3) + 1.02796e-05 *lens_ipow(x, 3)*dy + 0.0156335 *y*lens_ipow(dx, 3)*dy + -7.24992e-05 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -1.42164e-06 *lens_ipow(y, 4)*dx*dy + -2.87841e-08 *x*lens_ipow(y, 5) + -9.81312e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.0133025 *x*y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -17.4935 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + 1.36182 *x*y*lens_ipow(dx, 6)*lens_ipow(dy, 2) + -0.0586591 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 5) + 7.14564e-07 *x*lens_ipow(y, 5)*lens_ipow(dy, 4) + 0.00189038 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 2.20632e-06 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -6.36822e-06 *lens_ipow(x, 5)*lens_ipow(dx, 4)*dy + -4.79451e-11 *lens_ipow(x, 8)*lens_ipow(dx, 2)+0.0f;
const float dx22 =  + -0.371834  + -0.00535352 *dy + 0.000331089 *y + 6.79024 *lens_ipow(dy, 2) + 19.8877 *lens_ipow(dx, 2) + 0.260144 *y*dy + 0.0029392 *lens_ipow(y, 2) + 0.747802 *x*dx + -4.39946e-05 *x*y + 0.00806487 *lens_ipow(x, 2) + -0.133176 *lens_ipow(lambda, 3) + -0.351804 *dx*lens_ipow(dy, 2) + 4.33225 *lens_ipow(dx, 3)*dy + -1.309 *y*lens_ipow(dx, 2)*dy + 0.0234503 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -5.43744e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -2.84329e-07 *lens_ipow(y, 5)*dy + -6.54208e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -0.00665127 *x*lens_ipow(y, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -52.4806 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + 4.08547 *x*lens_ipow(y, 2)*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -0.039106 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 5) + -5.3512 *lens_ipow(x, 2)*lens_ipow(dx, 8) + 0.00252051 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 1.10316e-06 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + 0.000784146 *lens_ipow(x, 5)*dx*lens_ipow(dy, 4) + -2.54729e-05 *lens_ipow(x, 5)*y*lens_ipow(dx, 3)*dy + -9.58901e-11 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx23 =  + -0.000691406  + -0.00535352 *dx + 13.5805 *dx*dy + 0.260144 *y*dx + 0.254133 *x*dy + 0.0035462 *x*y + -0.351804 *lens_ipow(dx, 2)*dy + 1.08306 *lens_ipow(dx, 4) + -0.436332 *y*lens_ipow(dx, 3) + 0.0271178 *x*y*lens_ipow(dy, 2) + 1.02796e-05 *lens_ipow(x, 3)*y + 0.00781677 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -2.84329e-07 *lens_ipow(y, 5)*dx + -3.27104e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.0199538 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -52.4806 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 1.36182 *x*lens_ipow(y, 2)*lens_ipow(dx, 6)*dy + -0.0977651 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 4.76376e-07 *x*lens_ipow(y, 6)*lens_ipow(dy, 3) + 0.00126025 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 4)*dy + 1.10316e-06 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + 0.00156829 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -6.36822e-06 *lens_ipow(x, 5)*y*lens_ipow(dx, 4)+0.0f;
const float dx24 =  + -0.399529 *dx*lens_ipow(lambda, 2) + -0.0199538 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -69.9742 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const float dx30 =  + 3.5394e-06 *y + 0.222213 *dx*dy + 0.00408993 *y*dx + 0.00530253 *x*dy + 0.000767235 *x*y + -0.00390521 *y*dx*lens_ipow(dy, 2) + 8.9035e-06 *lens_ipow(y, 3)*dx + 1.49509e-06 *x*lens_ipow(y, 3) + -1.20337e-05 *lens_ipow(x, 2)*dx*dy + -9.83597e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 5.33316e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -0.0809489 *y*lens_ipow(dy, 8) + 1.52131e-11 *x*lens_ipow(y, 8)*dy + 0.0883127 *lens_ipow(x, 2)*lens_ipow(dx, 7)*dy + 3.47105e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 5) + -0.0494876 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 5)+0.0f;
const float dx31 =  + -0.103301  + 3.5394e-06 *x + 0.32933 *lens_ipow(dy, 2) + 0.069954 *lens_ipow(dx, 2) + 0.0135543 *y*dy + 0.000649598 *lens_ipow(y, 2) + 0.00408993 *x*dx + 0.000383617 *lens_ipow(x, 2) + 0.00195387 *lens_ipow(lambda, 3) + 0.00898349 *lens_ipow(dx, 2)*dy + 0.425595 *lens_ipow(dx, 4) + 0.000597675 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00390521 *x*dx*lens_ipow(dy, 2) + 2.67105e-05 *x*lens_ipow(y, 2)*dx + 2.24263e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.09168 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -2.45899e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 2.66658e-07 *lens_ipow(x, 4)*y*dy + -16.2815 *lens_ipow(dx, 2)*lens_ipow(dy, 7) + -0.0809489 *x*lens_ipow(dy, 8) + 0.888848 *y*dx*lens_ipow(dy, 8) + 0.175376 *lens_ipow(y, 2)*lens_ipow(dy, 8) + -1.57442e-07 *lens_ipow(y, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 6.08522e-11 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy + 3.47105e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 5)+0.0f;
const float dx32 =  + 0.00051455  + -0.0396805 *lens_ipow(dy, 2) + 12.2017 *dx*dy + 0.139908 *y*dx + 0.222213 *x*dy + 0.00408993 *x*y + 0.017967 *y*dx*dy + 1.70238 *y*lens_ipow(dx, 3) + 0.00039845 *lens_ipow(y, 3)*dx + -0.00390521 *x*y*lens_ipow(dy, 2) + 8.9035e-06 *x*lens_ipow(y, 3) + -4.01124e-06 *lens_ipow(x, 3)*dy + 4.18336 *y*dx*lens_ipow(dy, 4) + -4.91798e-06 *lens_ipow(x, 4)*y*dx + -32.5631 *y*dx*lens_ipow(dy, 7) + 0.444424 *lens_ipow(y, 2)*lens_ipow(dy, 8) + 0.206063 *lens_ipow(x, 3)*lens_ipow(dx, 6)*dy + 5.78508e-05 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 4) + -0.0247438 *lens_ipow(x, 4)*dx*lens_ipow(dy, 5)+0.0f;
const float dx33 =  + -0.343971  + 0.00802025 *dy + 18.2598 *lens_ipow(dy, 2) + -0.0793609 *dx*dy + 6.10086 *lens_ipow(dx, 2) + 0.65866 *y*dy + 0.00677717 *lens_ipow(y, 2) + 0.222213 *x*dx + 0.00265126 *lens_ipow(x, 2) + -0.132187 *lens_ipow(lambda, 3) + 0.00898349 *y*lens_ipow(dx, 2) + -0.00781042 *x*y*dx*dy + -4.01124e-06 *lens_ipow(x, 3)*dx + 8.36671 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 1.33329e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -395.143 *lens_ipow(dy, 9) + -113.971 *y*lens_ipow(dx, 2)*lens_ipow(dy, 6) + -0.647591 *x*y*lens_ipow(dy, 7) + 297.713 *lens_ipow(dy, 6)*lens_ipow(lambda, 4) + 3.55539 *lens_ipow(y, 2)*dx*lens_ipow(dy, 7) + 0.467669 *lens_ipow(y, 3)*lens_ipow(dy, 7) + -4.49836e-08 *lens_ipow(y, 7)*dy*lens_ipow(lambda, 2) + 7.60653e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + 0.0294376 *lens_ipow(x, 3)*lens_ipow(dx, 7) + -0.0618595 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 4)+0.0f;
const float dx34 =  + -0.396562 *dy*lens_ipow(lambda, 2) + 0.00586163 *y*lens_ipow(lambda, 2) + 170.122 *lens_ipow(dy, 7)*lens_ipow(lambda, 3) + -4.49836e-08 *lens_ipow(y, 7)*lens_ipow(dy, 2)*lambda+0.0f;
const float dx40 =  + -5.76695e-06  + -0.00163802 *dx + -0.000152154 *x + 0.000108424 *y*lens_ipow(dy, 2) + -7.03029e-08 *x*lens_ipow(y, 4) + 3.80368e-05 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -1.24066e-07 *lens_ipow(x, 3)*lens_ipow(y, 2) + -6.7741e-08 *lens_ipow(x, 5) + -0.00168935 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 0.00142322 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*dy + 0.0974581 *y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -0.00884298 *lens_ipow(y, 2)*lens_ipow(dx, 5)*dy + 30.6209 *lens_ipow(dx, 9) + 4.7304e-11 *x*lens_ipow(y, 7)*dy + 0.353154 *lens_ipow(x, 2)*dx*lens_ipow(dy, 6) + 0.000145679 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.72105e-08 *lens_ipow(x, 6)*y*dx*dy+0.0f;
const float dx41 =  + 0.000849689 *dy + -0.00022996 *y + -0.0904399 *lens_ipow(dy, 3) + 0.00147785 *y*lens_ipow(dx, 2) + 0.000108424 *x*lens_ipow(dy, 2) + -0.00180043 *y*lens_ipow(dx, 2)*dy + -1.40606e-07 *lens_ipow(x, 2)*lens_ipow(y, 3) + -6.20329e-08 *lens_ipow(x, 4)*y + -4.642e-10 *lens_ipow(y, 7) + 0.000474406 *lens_ipow(x, 3)*lens_ipow(dx, 3)*dy + 0.0974581 *x*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -0.017686 *x*y*lens_ipow(dx, 5)*dy + -1.44686 *y*lens_ipow(dx, 8) + -0.0100265 *lens_ipow(y, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -3.52101e-06 *lens_ipow(y, 5)*lens_ipow(dy, 4) + 1.65564e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy + 9.71192e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -2.45864e-09 *lens_ipow(x, 7)*dx*dy+0.0f;
const float dx42 =  + 0.00338181 *dy + -0.280584 *dx + -0.00163802 *x + 0.00147785 *lens_ipow(y, 2)*dx + -0.00180043 *lens_ipow(y, 2)*dx*dy + 51.1824 *dx*lens_ipow(dy, 4) + 52.4389 *lens_ipow(dx, 5) + -0.00168935 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.00142322 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy + 0.0974581 *x*y*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -0.0442149 *x*lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + -8541.14 *dx*lens_ipow(dy, 8) + -65632.3 *lens_ipow(dx, 5)*lens_ipow(dy, 4) + -17843 *lens_ipow(dx, 7)*lens_ipow(dy, 2) + -5.78743 *lens_ipow(y, 2)*lens_ipow(dx, 7) + -0.0100265 *lens_ipow(y, 4)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 275.588 *x*lens_ipow(dx, 8) + 0.117718 *lens_ipow(x, 3)*lens_ipow(dy, 6) + 9.71192e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -2.45864e-09 *lens_ipow(x, 7)*y*dy+0.0f;
const float dx43 =  + 0.000143379  + -0.27409 *dy + 0.00338181 *dx + 0.000849689 *y + -0.27132 *y*lens_ipow(dy, 2) + 0.000216848 *x*y*dy + -0.000900217 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 102.365 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 1.90184e-05 *lens_ipow(x, 4)*dy + -938.186 *lens_ipow(dy, 7) + 0.000474406 *lens_ipow(x, 3)*y*lens_ipow(dx, 3) + 0.292374 *x*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.00884298 *x*lens_ipow(y, 2)*lens_ipow(dx, 5) + -34164.6 *lens_ipow(dx, 2)*lens_ipow(dy, 7) + -43754.8 *lens_ipow(dx, 6)*lens_ipow(dy, 3) + -4460.74 *lens_ipow(dx, 8)*dy + -0.00501325 *lens_ipow(y, 4)*lens_ipow(dx, 4)*dy + -2.34734e-06 *lens_ipow(y, 6)*lens_ipow(dy, 3) + 2.3652e-11 *lens_ipow(x, 2)*lens_ipow(y, 7) + 0.706308 *lens_ipow(x, 3)*dx*lens_ipow(dy, 5) + 0.000145679 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.45864e-09 *lens_ipow(x, 7)*y*dx + 152.694 *lens_ipow(dy, 5)*lens_ipow(lambda, 5)+0.0f;
const float dx44 =  + 0.455184 *lens_ipow(lambda, 2) + -0.00112623 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lambda + 0.292374 *x*y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -12.6175 *lens_ipow(lambda, 10) + 127.245 *lens_ipow(dy, 6)*lens_ipow(lambda, 4)+0.0f;
