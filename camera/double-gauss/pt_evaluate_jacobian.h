const float dx00 =  + 0.605699  + -2.16397e-06 *x + 1.64385 *lens_ipow(dy, 2) + 1.84917 *lens_ipow(dx, 2) + 0.03206 *y*dy + 0.000140864 *lens_ipow(y, 2) + 0.0764745 *x*dx + 0.000429354 *lens_ipow(x, 2) + 0.016462 *lens_ipow(lambda, 3) + -0.00339212 *lens_ipow(dx, 2)*dy + -1.22627 *lens_ipow(dx, 4) + 0.000250239 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.033334 *x*dx*lens_ipow(dy, 2) + 0.000505755 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.00662236 *x*dx*lens_ipow(lambda, 3) + -9.31094 *lens_ipow(dy, 6) + 0.00209353 *x*y*dx*dy*lens_ipow(lambda, 2) + 3.73924e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -4.06183e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -5.69843e-13 *lens_ipow(x, 2)*lens_ipow(y, 6) + -0.109802 *lens_ipow(lambda, 10) + 1.87647 *x*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -2.13994e-09 *lens_ipow(x, 6)*lens_ipow(lambda, 4) + -5.4698e-15 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx01 =  + -1.0987e-05  + 7.96105e-05 *dx + 0.146465 *dx*dy + 0.0114462 *y*dx + 0.03206 *x*dy + 0.000281728 *x*y + -0.0118031 *y*lens_ipow(dx, 3) + 0.000500479 *x*y*lens_ipow(dy, 2) + 0.00104677 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 2) + -4.06183e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -1.13969e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -1.21551e-15 *lens_ipow(x, 9)*y+0.0f;
const float dx02 =  + 99.8266  + 7.96105e-05 *y + -41.9148 *lens_ipow(dy, 2) + -126.326 *lens_ipow(dx, 2) + 0.146465 *y*dy + 0.00572308 *lens_ipow(y, 2) + 3.69834 *x*dx + 0.0382372 *lens_ipow(x, 2) + -0.857765 *lens_ipow(lambda, 3) + -0.00678425 *x*dx*dy + -0.0177046 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -4.90506 *x*lens_ipow(dx, 3) + 0.016667 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.00331118 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 3473.28 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 5337.69 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.00104677 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + 1.4957e-06 *lens_ipow(x, 5)*dx + 13910.9 *lens_ipow(dx, 8) + -2.70788e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 179.037 *lens_ipow(dx, 2)*lens_ipow(lambda, 8) + 2524.02 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 0.938236 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 4)+0.0f;
const float dx03 =  + -0.000738553  + -83.8295 *dx*dy + 0.146465 *y*dx + 3.2877 *x*dy + 0.03206 *x*y + -0.00339212 *x*lens_ipow(dx, 2) + 0.000500479 *x*lens_ipow(y, 2)*dy + 0.033334 *lens_ipow(x, 2)*dx*dy + 0.00033717 *lens_ipow(x, 3)*dy + 4631.04 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 2135.07 *lens_ipow(dx, 5)*dy + -55.8657 *x*lens_ipow(dy, 5) + 0.00104677 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + -1.35394e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2) + 1682.68 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 6) + 3.75294 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 4)+0.0f;
const float dx04 =  + -2.5733 *dx*lens_ipow(lambda, 2) + 0.0493861 *x*lens_ipow(lambda, 2) + -0.00993354 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + 0.00209353 *lens_ipow(x, 2)*y*dx*dy*lambda + 477.431 *lens_ipow(dx, 3)*lens_ipow(lambda, 7) + 5048.05 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -1.09802 *x*lens_ipow(lambda, 9) + 3.75294 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -1.22282e-09 *lens_ipow(x, 7)*lens_ipow(lambda, 3)+0.0f;
const float dx10 =  + -8.93651e-06  + -2.04486e-06 *x + 0.153398 *dx*dy + 0.0321332 *y*dx + 0.0113267 *x*dy + 0.000283632 *x*y + -2.96052e-08 *lens_ipow(x, 2)*y + 0.000537593 *x*y*lens_ipow(dx, 2) + 0.000985967 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + 8.52565e-07 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00236358 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.19308e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -4.56232e-13 *lens_ipow(x, 7)*y + -2.28474e-07 *x*lens_ipow(y, 3)*lens_ipow(lambda, 6)+0.0f;
const float dx11 =  + 0.605436  + -6.5863e-05 *dy + -0.00012153 *dx + 1.824 *lens_ipow(dy, 2) + 1.65697 *lens_ipow(dx, 2) + 0.0755696 *y*dy + 0.00042947 *lens_ipow(y, 2) + 0.0321332 *x*dx + 0.000141816 *lens_ipow(x, 2) + 0.0183986 *lens_ipow(lambda, 3) + -9.86841e-09 *lens_ipow(x, 3) + 0.000268796 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -26.4905 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -8.97259 *lens_ipow(dx, 6) + 1.38415e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.00197193 *x*y*dx*dy*lens_ipow(lambda, 2) + 1.27885e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 4.81914e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lambda + -1.49135e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -5.7029e-14 *lens_ipow(x, 8) + -0.121469 *lens_ipow(lambda, 10) + -3.40547e-15 *lens_ipow(y, 10) + -3.42712e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 6)+0.0f;
const float dx12 =  + -0.00053149  + -0.00012153 *y + -81.7913 *dx*dy + 3.31393 *y*dx + 0.153398 *x*dy + 0.0321332 *x*y + 0.000537593 *lens_ipow(x, 2)*y*dx + 3629.85 *dx*lens_ipow(dy, 5) + 445.045 *lens_ipow(dx, 5)*dy + -105.962 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -53.8356 *y*lens_ipow(dx, 5) + 5.5366e-07 *lens_ipow(y, 5)*dx + 0.000985967 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -0.00118179 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3) + 80.4934 *dx*dy*lens_ipow(lambda, 8) + 19449.7 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 4)+0.0f;
const float dx13 =  + 99.8135  + -6.5863e-05 *y + -122.221 *lens_ipow(dy, 2) + -40.8957 *lens_ipow(dx, 2) + 3.648 *y*dy + 0.0377848 *lens_ipow(y, 2) + 0.153398 *x*dx + 0.00566336 *lens_ipow(x, 2) + -0.911193 *lens_ipow(lambda, 3) + 9074.63 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 74.1741 *lens_ipow(dx, 6) + -52.981 *y*lens_ipow(dx, 4)*dy + 0.000985967 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 8.52565e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 1.92766e-06 *lens_ipow(y, 5)*dy*lambda + 50277.9 *lens_ipow(dy, 8) + -0.00177268 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1728.96 *lens_ipow(dy, 4)*lens_ipow(lambda, 6) + 40.2467 *lens_ipow(dx, 2)*lens_ipow(lambda, 8) + 14587.3 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx14 =  + -2.73358 *dy*lens_ipow(lambda, 2) + 0.0551957 *y*lens_ipow(lambda, 2) + 0.00197193 *x*lens_ipow(y, 2)*dx*dy*lambda + 9.63828e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2) + 2074.75 *lens_ipow(dy, 5)*lens_ipow(lambda, 5) + 321.974 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 7) + 19449.7 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -1.21469 *y*lens_ipow(lambda, 9) + -6.85423e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(lambda, 5)+0.0f;
const float dx20 =  + -0.0283114  + 4.24783e-06 *dy + -0.144423 *lens_ipow(dy, 2) + -0.00215444 *y*dy + -6.64521e-06 *lens_ipow(y, 2) + -0.000609978 *x*dx + -6.10906e-09 *x*y + -2.13426e-06 *lens_ipow(x, 2) + -0.000553874 *lens_ipow(lambda, 3) + 0.355106 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -9.45375e-06 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000120916 *x*y*dx*dy*lambda + 1.75944 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -3.75869e-08 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 2.09679e-11 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.000989735 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -0.00467572 *lens_ipow(x, 2)*lens_ipow(dy, 6) + 0.00216962 *lens_ipow(lambda, 9) + -0.00847727 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 5) + -4.1094e-12 *lens_ipow(y, 6)*lens_ipow(lambda, 3)+0.0f;
const float dx21 =  + 1.2233e-06 *dx + -0.194055 *dx*dy + 2.99784e-05 *lens_ipow(dx, 2) + -0.00126721 *y*dx + -0.00215444 *x*dy + -1.32904e-05 *x*y + -3.05453e-09 *lens_ipow(x, 2) + 0.156289 *lens_ipow(dx, 3)*dy + -1.89075e-05 *x*y*lens_ipow(dx, 2) + -6.0458e-05 *lens_ipow(x, 2)*dx*dy*lambda + 3.70426e-08 *lens_ipow(y, 4)*dx*dy + 8.38717e-12 *lens_ipow(x, 5)*y + 0.00301636 *y*lens_ipow(dx, 5)*dy + -0.000989735 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 2.6539 *lens_ipow(dx, 7)*dy + -0.00847727 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 5) + -2.46564e-11 *x*lens_ipow(y, 5)*lens_ipow(lambda, 3) + -147.48 *lens_ipow(dx, 3)*lens_ipow(dy, 7)+0.0f;
const float dx22 =  + -3.01705  + 1.2233e-06 *y + -13.574 *lens_ipow(dy, 2) + 4.41638 *lens_ipow(dx, 2) + -0.194055 *y*dy + 5.99569e-05 *y*dx + -0.000633603 *lens_ipow(y, 2) + -0.000304989 *lens_ipow(x, 2) + 0.0527755 *lens_ipow(lambda, 3) + 73.9064 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.468868 *y*lens_ipow(dx, 2)*dy + 0.710213 *x*dx*lens_ipow(dy, 2) + -1.89075e-05 *x*lens_ipow(y, 2)*dx + -6.0458e-05 *lens_ipow(x, 2)*y*dy*lambda + 25.4933 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -71.3673 *lens_ipow(dx, 6) + 7.40852e-09 *lens_ipow(y, 5)*dy + 3.51888 *x*dx*lens_ipow(dy, 4) + -1.50348e-08 *lens_ipow(x, 5)*dx + 0.00754089 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + -200.905 *lens_ipow(dy, 8) + 7056.72 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + 18.5773 *y*lens_ipow(dx, 6)*dy + -0.0169545 *x*y*dx*dy*lens_ipow(lambda, 5) + -0.263838 *lens_ipow(lambda, 10) + -442.44 *y*lens_ipow(dx, 2)*lens_ipow(dy, 7)+0.0f;
const float dx23 =  + 4.24783e-06 *x + -27.1481 *dx*dy + -0.194055 *y*dx + -0.288847 *x*dy + -0.00215444 *x*y + 49.2709 *lens_ipow(dx, 3)*dy + 0.156289 *y*lens_ipow(dx, 3) + 0.710213 *x*lens_ipow(dx, 2)*dy + -6.0458e-05 *lens_ipow(x, 2)*y*dx*lambda + 16.9955 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + 7.40852e-09 *lens_ipow(y, 5)*dx + 7.03775 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.00150818 *lens_ipow(y, 2)*lens_ipow(dx, 5) + -0.00296921 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1607.24 *dx*lens_ipow(dy, 7) + 5645.38 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 2.6539 *y*lens_ipow(dx, 7) + -0.00935144 *lens_ipow(x, 3)*lens_ipow(dy, 5) + -0.00847727 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 5) + -1032.36 *y*lens_ipow(dx, 3)*lens_ipow(dy, 6)+0.0f;
const float dx24 =  + 0.158327 *dx*lens_ipow(lambda, 2) + -0.00166162 *x*lens_ipow(lambda, 2) + -6.0458e-05 *lens_ipow(x, 2)*y*dx*dy + 16.9955 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + -0.00296921 *x*y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.0195266 *x*lens_ipow(lambda, 8) + -0.0423863 *x*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + -1.23282e-11 *x*lens_ipow(y, 6)*lens_ipow(lambda, 2) + -2.63838 *dx*lens_ipow(lambda, 9)+0.0f;
const float dx30 =  + 0.282896 *dx*dy + 0.000934146 *y*dx + 0.00239939 *x*dy + 1.03964e-05 *x*y + 0.00307992 *x*lens_ipow(dy, 3) + 5.49931e-05 *lens_ipow(x, 2)*dx*dy + 4.649 *dx*lens_ipow(dy, 5) + 1.40753e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 1.07328e-07 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00188625 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -1.04774e-07 *lens_ipow(y, 4)*dx*dy*lambda + -6.85636e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 9.70619e-13 *lens_ipow(x, 7)*dy + 0.00275703 *lens_ipow(x, 3)*lens_ipow(dy, 7) + 1.8514e-08 *lens_ipow(x, 6)*dx*lens_ipow(dy, 3)+0.0f;
const float dx31 =  + -0.0283463  + 0.00512201 *lens_ipow(dy, 2) + 0.0484138 *lens_ipow(dx, 2) + -0.000528592 *y*dy + -1.87764e-06 *lens_ipow(y, 2) + 0.000934146 *x*dx + 5.19818e-06 *lens_ipow(x, 2) + -0.000578779 *lens_ipow(lambda, 3) + -3.59608e-06 *y*lens_ipow(dx, 2) + -0.00179792 *y*lens_ipow(dx, 2)*dy + 1.40753e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 1.60992e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -4.19095e-07 *x*lens_ipow(y, 3)*dx*dy*lambda + 1.68485 *y*lens_ipow(dx, 2)*lens_ipow(dy, 5) + -4.11381e-12 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 0.00225536 *lens_ipow(lambda, 9) + 4.34141 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -44.2499 *lens_ipow(dx, 10) + -0.00740153 *lens_ipow(y, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 3)+0.0f;
const float dx32 =  + 9.43668e-05 *dy + 32.3375 *dx*dy + 0.0968276 *y*dx + 0.282896 *x*dy + 0.000934146 *x*y + -3.59608e-06 *lens_ipow(y, 2)*dx + 12.1189 *dx*lens_ipow(dy, 3) + -0.00179792 *lens_ipow(y, 2)*dx*dy + 1.8331e-05 *lens_ipow(x, 3)*dy + 4.649 *x*lens_ipow(dy, 5) + 1.40753e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -0.00188625 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -1.04774e-07 *x*lens_ipow(y, 4)*dy*lambda + -0.222143 *dx*dy*lens_ipow(lambda, 6) + -14639.6 *lens_ipow(dx, 7)*dy + 1.68485 *lens_ipow(y, 2)*dx*lens_ipow(dy, 5) + -1.37127e-12 *lens_ipow(x, 5)*lens_ipow(y, 3) + 17.3657 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -442.499 *y*lens_ipow(dx, 9) + -0.00740153 *lens_ipow(y, 4)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 2.64486e-09 *lens_ipow(x, 7)*lens_ipow(dy, 3)+0.0f;
const float dx33 =  + -3.02037  + 9.43668e-05 *dx + 4.99616 *lens_ipow(dy, 2) + 16.1687 *lens_ipow(dx, 2) + 0.010244 *y*dy + -0.000264296 *lens_ipow(y, 2) + 0.282896 *x*dx + 0.00119969 *lens_ipow(x, 2) + 0.0513824 *lens_ipow(lambda, 3) + 0.0187834 *lens_ipow(dy, 3) + 18.1784 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00089896 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00461988 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.8331e-05 *lens_ipow(x, 3)*dx + 23.245 *x*dx*lens_ipow(dy, 4) + 7.03767e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.07328e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.000628749 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -1.04774e-07 *x*lens_ipow(y, 4)*dx*lambda + -0.111071 *lens_ipow(dx, 2)*lens_ipow(lambda, 6) + -1829.95 *lens_ipow(dx, 8) + 4.21213 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 1.21327e-13 *lens_ipow(x, 8) + -0.268601 *lens_ipow(lambda, 10) + -6926.59 *lens_ipow(dy, 10) + 8.68283 *y*lens_ipow(dx, 4)*dy*lens_ipow(lambda, 4) + -0.00555115 *lens_ipow(y, 4)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.0048248 *lens_ipow(x, 4)*lens_ipow(dy, 6) + 7.93457e-09 *lens_ipow(x, 7)*dx*lens_ipow(dy, 2)+0.0f;
const float dx34 =  + 0.154147 *dy*lens_ipow(lambda, 2) + -0.00173634 *y*lens_ipow(lambda, 2) + -1.04774e-07 *x*lens_ipow(y, 4)*dx*dy + -0.666428 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 5) + 0.0202983 *y*lens_ipow(lambda, 8) + -2.68601 *dy*lens_ipow(lambda, 9) + 17.3657 *y*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx40 =  + -0.00329846 *dx + 8.81241e-08 *y + -3.01917e-05 *x + -9.86152e-07 *x*dx + -0.0536345 *lens_ipow(dx, 3) + -0.000263898 *y*dx*dy + -0.000273189 *x*lens_ipow(dy, 2) + -0.00115052 *x*lens_ipow(dx, 2) + -0.119997 *dx*lens_ipow(dy, 4) + 0.000307982 *x*y*lens_ipow(dx, 2)*dy + -8.5458e-09 *x*lens_ipow(y, 3)*dy + -0.00054666 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 2.5429e-10 *lens_ipow(x, 3)*lens_ipow(y, 2) + 4.24823e-11 *lens_ipow(x, 5) + 0.463891 *x*lens_ipow(dy, 8) + 0.00037978 *lens_ipow(x, 3)*lens_ipow(dx, 6) + -2.53999e-07 *lens_ipow(x, 5)*lens_ipow(dy, 4)+0.0f;
const float dx41 =  + -1.83399e-07  + -0.00319088 *dy + 6.31783e-06 *dx + -3.18334e-05 *y + 8.81241e-08 *x + -0.0426696 *lens_ipow(dy, 3) + -0.021322 *lens_ipow(dx, 2)*dy + -0.00083617 *y*lens_ipow(dy, 2) + -0.00026085 *y*lens_ipow(dx, 2) + -0.000263898 *x*dx*dy + -0.969031 *lens_ipow(dx, 4)*dy + -0.00447898 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.52195e-10 *lens_ipow(y, 5) + 0.000153991 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + -1.28187e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 1.27145e-10 *lens_ipow(x, 4)*y + -0.360537 *y*lens_ipow(dx, 8)+0.0f;
const float dx42 =  + 0.000118095  + -9.06988e-05 *dy + -0.372691 *dx + 6.31783e-06 *y + -0.00329846 *x + -4.93076e-07 *lens_ipow(x, 2) + -0.0426441 *y*dx*dy + -0.00026085 *lens_ipow(y, 2)*dx + -0.160903 *x*lens_ipow(dx, 2) + -0.000263898 *x*y*dy + -0.00115052 *lens_ipow(x, 2)*dx + -247.377 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -128.572 *lens_ipow(dx, 5) + -3.87613 *y*lens_ipow(dx, 3)*dy + -0.00447898 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.119997 *x*lens_ipow(dy, 4) + 0.000307982 *lens_ipow(x, 2)*y*dx*dy + -0.00018222 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -1.44215 *lens_ipow(y, 2)*lens_ipow(dx, 7) + 0.000569671 *lens_ipow(x, 4)*lens_ipow(dx, 5)+0.0f;
const float dx43 =  + -0.374889 *dy + -9.06988e-05 *dx + -0.00319088 *y + -0.128009 *y*lens_ipow(dy, 2) + -0.021322 *y*lens_ipow(dx, 2) + -0.00083617 *lens_ipow(y, 2)*dy + -0.000263898 *x*y*dx + -0.000273189 *lens_ipow(x, 2)*dy + -84.757 *lens_ipow(dy, 5) + -123.689 *lens_ipow(dx, 4)*dy + -0.969031 *y*lens_ipow(dx, 4) + -0.00447898 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.479989 *x*dx*lens_ipow(dy, 3) + 0.000153991 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + -4.2729e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.00036444 *lens_ipow(x, 3)*dx*dy + 1.85556 *lens_ipow(x, 2)*lens_ipow(dy, 7) + -1.69333e-07 *lens_ipow(x, 6)*lens_ipow(dy, 3)+0.0f;
const float dx44 =  + 0.32616  + -0.814323 *lens_ipow(lambda, 2) + 5.37495 *lens_ipow(lambda, 10)+0.0f;
