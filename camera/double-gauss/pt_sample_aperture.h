float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + 6.99327e-05  + -0.000220837 *begin_dy + 70.1915 *begin_dx + 2.35337e-06 *begin_y + 0.649826 *begin_x + -0.00214024 *lens_ipow(begin_dy, 2) + 0.00141685 *begin_dx*begin_dy + -3.11671e-07 *lens_ipow(begin_x, 2) + -47.6158 *begin_dx*lens_ipow(begin_dy, 2) + -47.0819 *lens_ipow(begin_dx, 3) + -0.642025 *begin_y*begin_dx*begin_dy + -0.00128803 *lens_ipow(begin_y, 2)*begin_dx + -0.307546 *begin_x*lens_ipow(begin_dy, 2) + -0.939448 *begin_x*lens_ipow(begin_dx, 2) + -0.00229259 *begin_x*begin_y*begin_dy + -3.36673e-06 *begin_x*lens_ipow(begin_y, 2) + -0.00354134 *lens_ipow(begin_x, 2)*begin_dx + 0.0457515 *begin_x*lens_ipow(begin_lambda, 3) + 5.26863 *begin_dx*lens_ipow(begin_lambda, 4) + 0.000100019 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -0.00546853 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 1.08478e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + 6.72408e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 2) + -2.61652e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 3.34266e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -1.0192e-08 *lens_ipow(begin_x, 5) + 410.271 *begin_dx*lens_ipow(begin_dy, 6) + 517.796 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + -1.01976e-05 *lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_dy, 2) + 3.46222 *begin_x*lens_ipow(begin_dy, 6) + -0.000873307 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 1.10865e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dy + -0.0722207 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 290.748 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 1892.58 *lens_ipow(begin_dx, 9) + -3.04112e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 3) + 6938.21 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6)*begin_lambda + -25.4932 *begin_dx*lens_ipow(begin_lambda, 10) + -0.240046 *begin_x*lens_ipow(begin_lambda, 10) + -0.00117458 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6);
  pred_y =  + 0.000247115  + 70.1983 *begin_dy + 0.65015 *begin_y + -2.31752e-06 *begin_x + -0.000697927 *lens_ipow(begin_lambda, 2) + -0.00227363 *begin_dx*begin_dy + -47.5935 *lens_ipow(begin_dy, 3) + -0.018217 *begin_dx*lens_ipow(begin_dy, 2) + -47.6177 *lens_ipow(begin_dx, 2)*begin_dy + -0.954763 *begin_y*lens_ipow(begin_dy, 2) + -0.318851 *begin_y*lens_ipow(begin_dx, 2) + -0.00370718 *lens_ipow(begin_y, 2)*begin_dy + -4.49898e-06 *lens_ipow(begin_y, 3) + -0.645079 *begin_x*begin_dx*begin_dy + -0.00245855 *begin_x*begin_y*begin_dx + -0.00131448 *lens_ipow(begin_x, 2)*begin_dy + -3.97232e-06 *lens_ipow(begin_x, 2)*begin_y + 0.0460686 *begin_y*lens_ipow(begin_lambda, 3) + 5.30077 *begin_dy*lens_ipow(begin_lambda, 4) + -0.00723085 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 2.43739e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + -6.84065e-05 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 1084.56 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 395.244 *lens_ipow(begin_dx, 6)*begin_dy + 4.18424 *begin_y*lens_ipow(begin_dx, 6) + -2.01855e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3) + 1.86875e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -0.0691823 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + 3.83542e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + -1.16144e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*begin_dy + -0.0119652 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 3083.33 *lens_ipow(begin_dy, 9) + 6.90568e-12 *lens_ipow(begin_y, 8)*begin_dy + 1.71906e-12 *lens_ipow(begin_x, 8)*begin_dy + 11101 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 3)*begin_lambda + -25.5174 *begin_dy*lens_ipow(begin_lambda, 10) + -0.247098 *begin_y*lens_ipow(begin_lambda, 10) + -0.00709034 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + 3.50304e-16 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + 1.31354e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3);
  pred_dx =  + 4.36649e-06  + 0.665725 *begin_dx + -5.0903e-08 *begin_y + -0.00812669 *begin_x + 0.00020652 *lens_ipow(begin_dy, 2) + -0.000918814 *lens_ipow(begin_dx, 2) + 8.28468e-06 *begin_y*begin_dx + -2.46735e-08 *lens_ipow(begin_y, 2) + -1.34331e-06 *begin_x*begin_dy + 1.73507 *begin_dx*lens_ipow(begin_dy, 2) + 1.72597 *lens_ipow(begin_dx, 3) + 0.0230546 *begin_y*begin_dx*begin_dy + -7.12384e-05 *begin_y*lens_ipow(begin_dx, 2) + 9.84913e-05 *lens_ipow(begin_y, 2)*begin_dx + 0.0116621 *begin_x*lens_ipow(begin_dy, 2) + 0.0348802 *begin_x*lens_ipow(begin_dx, 2) + 0.000196552 *begin_x*begin_y*begin_dy + -8.71346e-07 *begin_x*begin_y*begin_dx + 2.8143e-07 *begin_x*lens_ipow(begin_y, 2) + 0.000298654 *lens_ipow(begin_x, 2)*begin_dx + 3.59308e-07 *lens_ipow(begin_x, 3) + -0.123221 *begin_dx*lens_ipow(begin_lambda, 3) + -0.000259437 *begin_x*lens_ipow(begin_dx, 3) + 3.80544e-06 *begin_x*begin_y*lens_ipow(begin_dx, 2) + 8.0343e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 0.0782513 *begin_y*lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 2) + 0.00416928 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -3.28396e-09 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + -4.59752e-07 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + -1.04929e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 4) + 6.02464e-07 *lens_ipow(begin_x, 4)*begin_dx*lens_ipow(begin_dy, 2) + -4.52223e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2) + -0.000449871 *begin_x*lens_ipow(begin_lambda, 7) + 0.753242 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + 1.50278 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 6) + 0.729667 *begin_x*lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 2) + 0.540299 *begin_dx*lens_ipow(begin_lambda, 10) + 1287.61 *lens_ipow(begin_dx, 11) + -0.000281917 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 8) + -0.000603902 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 8);
  pred_dy =  + -1.70166e-06  + 0.663793 *begin_dy + -0.00812472 *begin_y + 1.17108e-07 *begin_x + -1.86085e-06 *begin_y*begin_dy + -2.22912e-08 *begin_x*begin_y + 1.75872 *lens_ipow(begin_dy, 3) + 1.7835 *lens_ipow(begin_dx, 2)*begin_dy + 0.0348281 *begin_y*lens_ipow(begin_dy, 2) + 0.0117789 *begin_y*lens_ipow(begin_dx, 2) + 0.000298311 *lens_ipow(begin_y, 2)*begin_dy + 2.76865e-07 *lens_ipow(begin_y, 3) + 0.024277 *begin_x*begin_dx*begin_dy + 0.000202803 *begin_x*begin_y*begin_dx + 0.000125271 *lens_ipow(begin_x, 2)*begin_dy + 4.0781e-07 *lens_ipow(begin_x, 2)*begin_y + -0.112295 *begin_dy*lens_ipow(begin_lambda, 3) + 0.00564752 *begin_dx*lens_ipow(begin_dy, 3) + -8.75853e-05 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 7.73145e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 0.0382453 *begin_y*lens_ipow(begin_dy, 4)*begin_lambda + -6.59328e-09 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + 0.00480622 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + -1.55928e-06 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_lambda, 4) + 5.17152e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 2.78368e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*begin_dy + -15.2052 *lens_ipow(begin_dx, 6)*begin_dy*begin_lambda + -0.000579155 *begin_y*lens_ipow(begin_lambda, 7) + 0.874929 *begin_x*begin_dx*lens_ipow(begin_dy, 5)*begin_lambda + 1.17577 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + 8.04592e-06 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -2.24488e-09 *lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 4) + -0.0244804 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 6) + 0.490308 *begin_dy*lens_ipow(begin_lambda, 10) + 973.44 *lens_ipow(begin_dy, 11) + -1.13002 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + -0.0684489 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + -0.000488508 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 8) + 6.93841e-18 *lens_ipow(begin_y, 11) + -0.000665633 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 8);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 70.1915  + 0.00141685 *begin_dy + -47.6158 *lens_ipow(begin_dy, 2) + -141.246 *lens_ipow(begin_dx, 2) + -0.642025 *begin_y*begin_dy + -0.00128803 *lens_ipow(begin_y, 2) + -1.8789 *begin_x*begin_dx + -0.00354134 *lens_ipow(begin_x, 2) + 5.26863 *lens_ipow(begin_lambda, 4) + 0.000100019 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -0.0164056 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 1.08478e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 410.271 *lens_ipow(begin_dy, 6) + 2588.98 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -1.01976e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -0.0722207 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 872.244 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 17033.2 *lens_ipow(begin_dx, 8) + -9.12336e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2) + 20814.6 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6)*begin_lambda + -25.4932 *lens_ipow(begin_lambda, 10)+0.0f;
  dx1_domega0[0][1] =  + -0.000220837  + -0.00428048 *begin_dy + 0.00141685 *begin_dx + -95.2315 *begin_dx*begin_dy + -0.642025 *begin_y*begin_dx + -0.615093 *begin_x*begin_dy + -0.00229259 *begin_x*begin_y + -5.23304e-05 *lens_ipow(begin_x, 3)*begin_dy + 2461.62 *begin_dx*lens_ipow(begin_dy, 5) + 1035.59 *lens_ipow(begin_dx, 5)*begin_dy + -2.03952e-05 *lens_ipow(begin_y, 4)*begin_dx*begin_dy + 20.7733 *begin_x*lens_ipow(begin_dy, 5) + -0.000873307 *begin_x*begin_y*lens_ipow(begin_lambda, 4) + 1.10865e-09 *begin_x*lens_ipow(begin_y, 5) + -0.144441 *lens_ipow(begin_x, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 581.496 *lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 4) + 41629.2 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5)*begin_lambda + -0.00234915 *lens_ipow(begin_x, 3)*begin_dy*lens_ipow(begin_lambda, 6)+0.0f;
  dx1_domega0[1][0] =  + -0.00227363 *begin_dy + -0.018217 *lens_ipow(begin_dy, 2) + -95.2353 *begin_dx*begin_dy + -0.637701 *begin_y*begin_dx + -0.645079 *begin_x*begin_dy + -0.00245855 *begin_x*begin_y + -0.0144617 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 2169.11 *begin_dx*lens_ipow(begin_dy, 5) + 2371.46 *lens_ipow(begin_dx, 5)*begin_dy + 25.1054 *begin_y*lens_ipow(begin_dx, 5) + 1.86875e-09 *begin_x*lens_ipow(begin_y, 5) + -2.32289e-05 *lens_ipow(begin_x, 4)*begin_dx*begin_dy + -0.0239305 *lens_ipow(begin_y, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 66605.8 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3)*begin_lambda + -0.021271 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 3.94061e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)+0.0f;
  dx1_domega0[1][1] =  + 70.1983  + -0.00227363 *begin_dx + -142.781 *lens_ipow(begin_dy, 2) + -0.0364339 *begin_dx*begin_dy + -47.6177 *lens_ipow(begin_dx, 2) + -1.90953 *begin_y*begin_dy + -0.00370718 *lens_ipow(begin_y, 2) + -0.645079 *begin_x*begin_dx + -0.00131448 *lens_ipow(begin_x, 2) + 5.30077 *lens_ipow(begin_lambda, 4) + -0.00723085 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.84065e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 2) + 5422.78 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 395.244 *lens_ipow(begin_dx, 6) + -6.05566e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -0.345912 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 3.83542e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -1.16144e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + -0.0119652 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 27750 *lens_ipow(begin_dy, 8) + 6.90568e-12 *lens_ipow(begin_y, 8) + 1.71906e-12 *lens_ipow(begin_x, 8) + 33302.9 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2)*begin_lambda + -25.5174 *lens_ipow(begin_lambda, 10) + -0.0283614 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
