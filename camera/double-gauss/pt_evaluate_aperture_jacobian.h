const float dx00 =  + 0.649826  + -6.23342e-07 *x + -0.307546 *lens_ipow(dy, 2) + -0.939448 *lens_ipow(dx, 2) + -0.00229259 *y*dy + -3.36673e-06 *lens_ipow(y, 2) + -0.00708268 *x*dx + 0.0457515 *lens_ipow(lambda, 3) + 2.16955e-06 *x*lens_ipow(y, 2)*dx + 2.01722e-06 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -7.84956e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.0028e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.09598e-08 *lens_ipow(x, 4) + 3.46222 *lens_ipow(dy, 6) + -0.000873307 *y*dy*lens_ipow(lambda, 4) + 1.10865e-09 *lens_ipow(y, 5)*dy + -0.144441 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.82467e-07 *lens_ipow(x, 5)*lens_ipow(dx, 3) + -0.240046 *lens_ipow(lambda, 10) + -0.00352373 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6)+0.0f;
const float dx01 =  + 2.35337e-06  + -0.642025 *dx*dy + -0.00257607 *y*dx + -0.00229259 *x*dy + -6.73346e-06 *x*y + 0.000200038 *y*dx*lens_ipow(lambda, 2) + -0.0109371 *y*lens_ipow(dx, 3) + 2.16955e-06 *lens_ipow(x, 2)*y*dx + 6.68532e-09 *lens_ipow(x, 3)*y + -4.07904e-05 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -0.000873307 *x*dy*lens_ipow(lambda, 4) + 5.54323e-09 *x*lens_ipow(y, 4)*dy+0.0f;
const float dx02 =  + 70.1915  + 0.00141685 *dy + -47.6158 *lens_ipow(dy, 2) + -141.246 *lens_ipow(dx, 2) + -0.642025 *y*dy + -0.00128803 *lens_ipow(y, 2) + -1.8789 *x*dx + -0.00354134 *lens_ipow(x, 2) + 5.26863 *lens_ipow(lambda, 4) + 0.000100019 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.0164056 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.08478e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 410.271 *lens_ipow(dy, 6) + 2588.98 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -1.01976e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -0.0722207 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 872.244 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 17033.2 *lens_ipow(dx, 8) + -9.12336e-08 *lens_ipow(x, 6)*lens_ipow(dx, 2) + 20814.6 *lens_ipow(dx, 2)*lens_ipow(dy, 6)*lambda + -25.4932 *lens_ipow(lambda, 10)+0.0f;
const float dx03 =  + -0.000220837  + -0.00428048 *dy + 0.00141685 *dx + -95.2315 *dx*dy + -0.642025 *y*dx + -0.615093 *x*dy + -0.00229259 *x*y + -5.23304e-05 *lens_ipow(x, 3)*dy + 2461.62 *dx*lens_ipow(dy, 5) + 1035.59 *lens_ipow(dx, 5)*dy + -2.03952e-05 *lens_ipow(y, 4)*dx*dy + 20.7733 *x*lens_ipow(dy, 5) + -0.000873307 *x*y*lens_ipow(lambda, 4) + 1.10865e-09 *x*lens_ipow(y, 5) + -0.144441 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 3) + 581.496 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 4) + 41629.2 *lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda + -0.00234915 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx04 =  + 0.137255 *x*lens_ipow(lambda, 2) + 21.0745 *dx*lens_ipow(lambda, 3) + 0.000200038 *lens_ipow(y, 2)*dx*lambda + 1.34482e-06 *lens_ipow(x, 3)*lambda + -0.00349323 *x*y*dy*lens_ipow(lambda, 3) + -0.216662 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1162.99 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 6938.21 *lens_ipow(dx, 3)*lens_ipow(dy, 6) + -254.932 *dx*lens_ipow(lambda, 9) + -2.40046 *x*lens_ipow(lambda, 9) + -0.00704746 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const float dx10 =  + -2.31752e-06  + -0.645079 *dx*dy + -0.00245855 *y*dx + -0.00262896 *x*dy + -7.94465e-06 *x*y + -0.000136813 *x*dy*lens_ipow(lambda, 2) + 1.86875e-09 *lens_ipow(y, 5)*dx + -0.138365 *x*lens_ipow(dy, 5) + 7.67084e-09 *x*lens_ipow(y, 4)*dy + -4.64578e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 1.37525e-11 *lens_ipow(x, 7)*dy + -0.00709034 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 4) + 7.00607e-16 *x*lens_ipow(y, 9) + 6.56768e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 3)+0.0f;
const float dx11 =  + 0.65015  + -0.954763 *lens_ipow(dy, 2) + -0.318851 *lens_ipow(dx, 2) + -0.00741436 *y*dy + -1.34969e-05 *lens_ipow(y, 2) + -0.00245855 *x*dx + -3.97232e-06 *lens_ipow(x, 2) + 0.0460686 *lens_ipow(lambda, 3) + -0.0144617 *y*lens_ipow(dx, 2)*dy + 7.31218e-06 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 4.18424 *lens_ipow(dx, 6) + -8.07421e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 9.34374e-09 *x*lens_ipow(y, 4)*dx + 1.53417e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.0239305 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 5.52455e-11 *lens_ipow(y, 7)*dy + -0.247098 *lens_ipow(lambda, 10) + -0.021271 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4) + 3.15273e-15 *lens_ipow(x, 2)*lens_ipow(y, 8) + 3.94061e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 3)+0.0f;
const float dx12 =  + -0.00227363 *dy + -0.018217 *lens_ipow(dy, 2) + -95.2353 *dx*dy + -0.637701 *y*dx + -0.645079 *x*dy + -0.00245855 *x*y + -0.0144617 *lens_ipow(y, 2)*dx*dy + 2169.11 *dx*lens_ipow(dy, 5) + 2371.46 *lens_ipow(dx, 5)*dy + 25.1054 *y*lens_ipow(dx, 5) + 1.86875e-09 *x*lens_ipow(y, 5) + -2.32289e-05 *lens_ipow(x, 4)*dx*dy + -0.0239305 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 3) + 66605.8 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lambda + -0.021271 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 3.94061e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const float dx13 =  + 70.1983  + -0.00227363 *dx + -142.781 *lens_ipow(dy, 2) + -0.0364339 *dx*dy + -47.6177 *lens_ipow(dx, 2) + -1.90953 *y*dy + -0.00370718 *lens_ipow(y, 2) + -0.645079 *x*dx + -0.00131448 *lens_ipow(x, 2) + 5.30077 *lens_ipow(lambda, 4) + -0.00723085 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -6.84065e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 5422.78 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 395.244 *lens_ipow(dx, 6) + -6.05566e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -0.345912 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 3.83542e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.16144e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.0119652 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 27750 *lens_ipow(dy, 8) + 6.90568e-12 *lens_ipow(y, 8) + 1.71906e-12 *lens_ipow(x, 8) + 33302.9 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lambda + -25.5174 *lens_ipow(lambda, 10) + -0.0283614 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const float dx14 =  + -0.00139585 *lambda + 0.138206 *y*lens_ipow(lambda, 2) + 21.2031 *dy*lens_ipow(lambda, 3) + 4.87478e-06 *lens_ipow(y, 3)*lambda + -0.000136813 *lens_ipow(x, 2)*dy*lambda + -0.0358957 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 11101 *lens_ipow(dx, 6)*lens_ipow(dy, 3) + -255.174 *dy*lens_ipow(lambda, 9) + -2.47098 *y*lens_ipow(lambda, 9)+0.0f;
const float dx20 =  + -0.00812669  + -1.34331e-06 *dy + 0.0116621 *lens_ipow(dy, 2) + 0.0348802 *lens_ipow(dx, 2) + 0.000196552 *y*dy + -8.71346e-07 *y*dx + 2.8143e-07 *lens_ipow(y, 2) + 0.000597309 *x*dx + 1.07793e-06 *lens_ipow(x, 2) + -0.000259437 *lens_ipow(dx, 3) + 3.80544e-06 *y*lens_ipow(dx, 2) + 2.41029e-10 *lens_ipow(x, 2)*lens_ipow(y, 2) + -4.59752e-07 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + -3.14787e-06 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + 2.40985e-06 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -2.26111e-08 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.000449871 *lens_ipow(lambda, 7) + 0.729667 *lens_ipow(dx, 6)*lens_ipow(lambda, 2) + -0.000281917 *y*dy*lens_ipow(lambda, 8) + -0.0012078 *x*dx*lens_ipow(lambda, 8)+0.0f;
const float dx21 =  + -5.0903e-08  + 8.28468e-06 *dx + -4.9347e-08 *y + 0.0230546 *dx*dy + -7.12384e-05 *lens_ipow(dx, 2) + 0.000196983 *y*dx + 0.000196552 *x*dy + -8.71346e-07 *x*dx + 5.6286e-07 *x*y + 3.80544e-06 *x*lens_ipow(dx, 2) + 1.60686e-10 *lens_ipow(x, 3)*y + 0.0782513 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + 0.00833857 *y*lens_ipow(dx, 5) + -1.64198e-08 *lens_ipow(y, 4)*dx*dy + -9.19504e-07 *x*y*lens_ipow(lambda, 4) + -0.000281917 *x*dy*lens_ipow(lambda, 8)+0.0f;
const float dx22 =  + 0.665725  + -0.00183763 *dx + 8.28468e-06 *y + 1.73507 *lens_ipow(dy, 2) + 5.1779 *lens_ipow(dx, 2) + 0.0230546 *y*dy + -0.000142477 *y*dx + 9.84913e-05 *lens_ipow(y, 2) + 0.0697605 *x*dx + -8.71346e-07 *x*y + 0.000298654 *lens_ipow(x, 2) + -0.123221 *lens_ipow(lambda, 3) + -0.000778312 *x*lens_ipow(dx, 2) + 7.61088e-06 *x*y*dx + 0.234754 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 0.0208464 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -3.28396e-09 *lens_ipow(y, 5)*dy + 6.02464e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -9.04446e-09 *lens_ipow(x, 5)*dx + 0.753242 *lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 4.50833 *lens_ipow(dx, 2)*lens_ipow(lambda, 6) + 4.378 *x*lens_ipow(dx, 5)*lens_ipow(lambda, 2) + 0.540299 *lens_ipow(lambda, 10) + 14163.7 *lens_ipow(dx, 10) + -0.000603902 *lens_ipow(x, 2)*lens_ipow(lambda, 8)+0.0f;
const float dx23 =  + 0.00041304 *dy + -1.34331e-06 *x + 3.47013 *dx*dy + 0.0230546 *y*dx + 0.0233242 *x*dy + 0.000196552 *x*y + 0.0782513 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -3.28396e-09 *lens_ipow(y, 5)*dx + 1.20493e-06 *lens_ipow(x, 4)*dx*dy + 1.50648 *dx*dy*lens_ipow(lambda, 6) + -0.000281917 *x*y*lens_ipow(lambda, 8)+0.0f;
const float dx24 =  + -0.369662 *dx*lens_ipow(lambda, 2) + 0.156503 *y*lens_ipow(dx, 3)*dy*lambda + -1.83901e-06 *x*lens_ipow(y, 2)*lens_ipow(lambda, 3) + -4.19715e-06 *lens_ipow(x, 3)*lens_ipow(lambda, 3) + -0.0031491 *x*lens_ipow(lambda, 6) + 4.51945 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 9.01665 *lens_ipow(dx, 3)*lens_ipow(lambda, 5) + 1.45933 *x*lens_ipow(dx, 6)*lambda + 5.40299 *dx*lens_ipow(lambda, 9) + -0.00225534 *x*y*dy*lens_ipow(lambda, 7) + -0.00483121 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 7)+0.0f;
const float dx30 =  + 1.17108e-07  + -2.22912e-08 *y + 0.024277 *dx*dy + 0.000202803 *y*dx + 0.000250542 *x*dy + 8.1562e-07 *x*y + -0.000175171 *x*dy*lens_ipow(lambda, 2) + 1.54629e-10 *x*lens_ipow(y, 3) + 0.00961243 *x*lens_ipow(dy, 5) + -3.11855e-06 *x*y*lens_ipow(lambda, 4) + 1.0343e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 1.11347e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 0.874929 *dx*lens_ipow(dy, 5)*lambda + -0.0244804 *dx*dy*lens_ipow(lambda, 6) + -0.000665633 *y*dx*lens_ipow(lambda, 8)+0.0f;
const float dx31 =  + -0.00812472  + -1.86085e-06 *dy + -2.22912e-08 *x + 0.0348281 *lens_ipow(dy, 2) + 0.0117789 *lens_ipow(dx, 2) + 0.000596621 *y*dy + 8.30595e-07 *lens_ipow(y, 2) + 0.000202803 *x*dx + 4.0781e-07 *lens_ipow(x, 2) + 2.31944e-10 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0382453 *lens_ipow(dy, 4)*lambda + -3.29664e-08 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.55928e-06 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + 1.0343e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.000579155 *lens_ipow(lambda, 7) + 3.21837e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.12244e-08 *lens_ipow(y, 4)*lens_ipow(lambda, 4) + -0.0684489 *lens_ipow(dx, 4)*lens_ipow(lambda, 6) + -0.000977016 *y*dy*lens_ipow(lambda, 8) + 7.63225e-17 *lens_ipow(y, 10) + -0.000665633 *x*dx*lens_ipow(lambda, 8)+0.0f;
const float dx32 =  + 3.567 *dx*dy + 0.0235578 *y*dx + 0.024277 *x*dy + 0.000202803 *x*y + 0.00564752 *lens_ipow(dy, 3) + 1.0343e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 5.56736e-07 *lens_ipow(x, 4)*dx*dy + -91.231 *lens_ipow(dx, 5)*dy*lambda + 0.874929 *x*lens_ipow(dy, 5)*lambda + 1.60918e-05 *lens_ipow(y, 4)*dx*lens_ipow(dy, 3) + -0.0244804 *x*dy*lens_ipow(lambda, 6) + -2.26003 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 6) + -0.273796 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 6) + -0.000665633 *x*y*lens_ipow(lambda, 8)+0.0f;
const float dx33 =  + 0.663793  + -1.86085e-06 *y + 5.27616 *lens_ipow(dy, 2) + 1.7835 *lens_ipow(dx, 2) + 0.0696562 *y*dy + 0.000298311 *lens_ipow(y, 2) + 0.024277 *x*dx + 0.000125271 *lens_ipow(x, 2) + -0.112295 *lens_ipow(lambda, 3) + 0.0169426 *dx*lens_ipow(dy, 2) + -8.75853e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.152981 *y*lens_ipow(dy, 3)*lambda + -1.31866e-08 *lens_ipow(y, 5)*dy + 0.0240311 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 5.17152e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 2.78368e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -15.2052 *lens_ipow(dx, 6)*lambda + 4.37464 *x*dx*lens_ipow(dy, 4)*lambda + 3.52732 *lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 2.41377e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0244804 *x*dx*lens_ipow(lambda, 6) + 0.490308 *lens_ipow(lambda, 10) + 10707.8 *lens_ipow(dy, 10) + -3.39005 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -0.000488508 *lens_ipow(y, 2)*lens_ipow(lambda, 8)+0.0f;
const float dx34 =  + -0.336886 *dy*lens_ipow(lambda, 2) + -0.000175171 *lens_ipow(x, 2)*dy*lambda + 0.0382453 *y*lens_ipow(dy, 4) + -6.23711e-06 *lens_ipow(x, 2)*y*lens_ipow(lambda, 3) + -15.2052 *lens_ipow(dx, 6)*dy + -0.00405408 *y*lens_ipow(lambda, 6) + 0.874929 *x*dx*lens_ipow(dy, 5) + 7.05465 *lens_ipow(dy, 3)*lens_ipow(lambda, 5) + -8.97954e-09 *lens_ipow(y, 5)*lens_ipow(lambda, 3) + -0.146882 *x*dx*dy*lens_ipow(lambda, 5) + 4.90308 *dy*lens_ipow(lambda, 9) + -6.7801 *lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 5) + -0.410693 *y*lens_ipow(dx, 4)*lens_ipow(lambda, 5) + -0.00390807 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 7) + -0.00532507 *x*y*dx*lens_ipow(lambda, 7)+0.0f;
const float dx40 =  + -2.18583e-07  + -0.00174496 *dx + 4.457e-08 *y + -1.42416e-05 *x + -0.0212093 *dx*lens_ipow(dy, 2) + -0.0368258 *lens_ipow(dx, 3) + 3.03914e-06 *lens_ipow(y, 2)*dx + 4.88867e-06 *x*y*dy + 4.82119e-08 *x*lens_ipow(y, 2) + 1.08586e-05 *lens_ipow(x, 2)*dx + 0.00821537 *y*dx*lens_ipow(dy, 3) + -6.50817e-07 *lens_ipow(y, 3)*dx*dy + -9.63879e-07 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + 8.716e-11 *x*lens_ipow(y, 4) + 3.13771e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 2.43664e-10 *lens_ipow(x, 5)+0.0f;
const float dx41 =  + 2.46684e-07  + -0.00148256 *dy + 4.64565e-06 *dx + -1.43927e-05 *y + 4.457e-08 *x + -0.0305506 *lens_ipow(dy, 3) + -0.0302617 *lens_ipow(dx, 2)*dy + 6.07829e-06 *x*y*dx + 2.44433e-06 *lens_ipow(x, 2)*dy + 4.82119e-08 *lens_ipow(x, 2)*y + 4.50615e-08 *lens_ipow(y, 4)*dy + 0.00821537 *x*dx*lens_ipow(dy, 3) + -1.95245e-06 *x*lens_ipow(y, 2)*dx*dy + -9.63879e-07 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + 1.7432e-10 *lens_ipow(x, 2)*lens_ipow(y, 3) + 1.10539e-12 *lens_ipow(y, 7) + 1.93102 *y*lens_ipow(dx, 6)*lens_ipow(dy, 2) + 0.000188669 *lens_ipow(y, 3)*lens_ipow(dy, 6)+0.0f;
const float dx42 =  + -0.205407 *dx + 4.64565e-06 *y + -0.00174496 *x + -6.30207 *lens_ipow(dx, 3) + -0.0605233 *y*dx*dy + -0.0212093 *x*lens_ipow(dy, 2) + -0.110478 *x*lens_ipow(dx, 2) + 3.03914e-06 *x*lens_ipow(y, 2) + 3.61954e-06 *lens_ipow(x, 3) + 0.216033 *dx*lens_ipow(dy, 3) + -134.463 *dx*lens_ipow(dy, 4) + -156.491 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.00821537 *x*y*lens_ipow(dy, 3) + -6.50817e-07 *x*lens_ipow(y, 3)*dy + -182.844 *lens_ipow(dx, 7) + 38274.2 *lens_ipow(dx, 3)*lens_ipow(dy, 6) + 5.79305 *lens_ipow(y, 2)*lens_ipow(dx, 5)*lens_ipow(dy, 2)+0.0f;
const float dx43 =  + -0.21179 *dy + -0.00148256 *y + -4.39172 *lens_ipow(dy, 3) + -0.0916518 *y*lens_ipow(dy, 2) + -0.0302617 *y*lens_ipow(dx, 2) + -0.0424187 *x*dx*dy + 2.44433e-06 *lens_ipow(x, 2)*y + 0.32405 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -268.925 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -78.2454 *lens_ipow(dx, 4)*dy + 9.0123e-09 *lens_ipow(y, 5) + 0.0246461 *x*y*dx*lens_ipow(dy, 2) + -6.50817e-07 *x*lens_ipow(y, 3)*dx + -9.63879e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 1.56885e-07 *lens_ipow(x, 4)*dy + -619.068 *lens_ipow(dy, 7) + 57411.3 *lens_ipow(dx, 4)*lens_ipow(dy, 5) + 1.93102 *lens_ipow(y, 2)*lens_ipow(dx, 6)*dy + 0.000283003 *lens_ipow(y, 4)*lens_ipow(dy, 5)+0.0f;
const float dx44 =  + 0.244252  + -0.614091 *lens_ipow(lambda, 2) + 4.0821 *lens_ipow(lambda, 10)+0.0f;
