//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + 6.99327e-05  + -0.000220837 *begin_dy + 70.1915 *begin_dx + 2.35337e-06 *begin_y + 0.649826 *begin_x + -0.00214024 *lens_ipow(begin_dy, 2) + 0.00141685 *begin_dx*begin_dy + -3.11671e-07 *lens_ipow(begin_x, 2) + -47.6158 *begin_dx*lens_ipow(begin_dy, 2) + -47.0819 *lens_ipow(begin_dx, 3) + -0.642025 *begin_y*begin_dx*begin_dy + -0.00128803 *lens_ipow(begin_y, 2)*begin_dx + -0.307546 *begin_x*lens_ipow(begin_dy, 2) + -0.939448 *begin_x*lens_ipow(begin_dx, 2) + -0.00229259 *begin_x*begin_y*begin_dy + -3.36673e-06 *begin_x*lens_ipow(begin_y, 2) + -0.00354134 *lens_ipow(begin_x, 2)*begin_dx + 0.0457515 *begin_x*lens_ipow(begin_lambda, 3) + 5.26863 *begin_dx*lens_ipow(begin_lambda, 4) + 0.000100019 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -0.00546853 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 1.08478e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + 6.72408e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 2) + -2.61652e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 3.34266e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -1.0192e-08 *lens_ipow(begin_x, 5) + 410.271 *begin_dx*lens_ipow(begin_dy, 6) + 517.796 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + -1.01976e-05 *lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_dy, 2) + 3.46222 *begin_x*lens_ipow(begin_dy, 6) + -0.000873307 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 1.10865e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dy + -0.0722207 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 290.748 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 1892.58 *lens_ipow(begin_dx, 9) + -3.04112e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 3) + 6938.21 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6)*begin_lambda + -25.4932 *begin_dx*lens_ipow(begin_lambda, 10) + -0.240046 *begin_x*lens_ipow(begin_lambda, 10) + -0.00117458 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6),
       + 0.000247115  + 70.1983 *begin_dy + 0.65015 *begin_y + -2.31752e-06 *begin_x + -0.000697927 *lens_ipow(begin_lambda, 2) + -0.00227363 *begin_dx*begin_dy + -47.5935 *lens_ipow(begin_dy, 3) + -0.018217 *begin_dx*lens_ipow(begin_dy, 2) + -47.6177 *lens_ipow(begin_dx, 2)*begin_dy + -0.954763 *begin_y*lens_ipow(begin_dy, 2) + -0.318851 *begin_y*lens_ipow(begin_dx, 2) + -0.00370718 *lens_ipow(begin_y, 2)*begin_dy + -4.49898e-06 *lens_ipow(begin_y, 3) + -0.645079 *begin_x*begin_dx*begin_dy + -0.00245855 *begin_x*begin_y*begin_dx + -0.00131448 *lens_ipow(begin_x, 2)*begin_dy + -3.97232e-06 *lens_ipow(begin_x, 2)*begin_y + 0.0460686 *begin_y*lens_ipow(begin_lambda, 3) + 5.30077 *begin_dy*lens_ipow(begin_lambda, 4) + -0.00723085 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 2.43739e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + -6.84065e-05 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 1084.56 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 395.244 *lens_ipow(begin_dx, 6)*begin_dy + 4.18424 *begin_y*lens_ipow(begin_dx, 6) + -2.01855e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3) + 1.86875e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -0.0691823 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + 3.83542e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + -1.16144e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*begin_dy + -0.0119652 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 3083.33 *lens_ipow(begin_dy, 9) + 6.90568e-12 *lens_ipow(begin_y, 8)*begin_dy + 1.71906e-12 *lens_ipow(begin_x, 8)*begin_dy + 11101 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 3)*begin_lambda + -25.5174 *begin_dy*lens_ipow(begin_lambda, 10) + -0.247098 *begin_y*lens_ipow(begin_lambda, 10) + -0.00709034 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + 3.50304e-16 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + 1.31354e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 70.1915  + 0.00141685 *begin_dy + -47.6158 *lens_ipow(begin_dy, 2) + -141.246 *lens_ipow(begin_dx, 2) + -0.642025 *begin_y*begin_dy + -0.00128803 *lens_ipow(begin_y, 2) + -1.8789 *begin_x*begin_dx + -0.00354134 *lens_ipow(begin_x, 2) + 5.26863 *lens_ipow(begin_lambda, 4) + 0.000100019 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -0.0164056 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 1.08478e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 410.271 *lens_ipow(begin_dy, 6) + 2588.98 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -1.01976e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -0.0722207 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 872.244 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 17033.2 *lens_ipow(begin_dx, 8) + -9.12336e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2) + 20814.6 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6)*begin_lambda + -25.4932 *lens_ipow(begin_lambda, 10)+0.0f;
    dx1_domega0[0][1] =  + -0.000220837  + -0.00428048 *begin_dy + 0.00141685 *begin_dx + -95.2315 *begin_dx*begin_dy + -0.642025 *begin_y*begin_dx + -0.615093 *begin_x*begin_dy + -0.00229259 *begin_x*begin_y + -5.23304e-05 *lens_ipow(begin_x, 3)*begin_dy + 2461.62 *begin_dx*lens_ipow(begin_dy, 5) + 1035.59 *lens_ipow(begin_dx, 5)*begin_dy + -2.03952e-05 *lens_ipow(begin_y, 4)*begin_dx*begin_dy + 20.7733 *begin_x*lens_ipow(begin_dy, 5) + -0.000873307 *begin_x*begin_y*lens_ipow(begin_lambda, 4) + 1.10865e-09 *begin_x*lens_ipow(begin_y, 5) + -0.144441 *lens_ipow(begin_x, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 581.496 *lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 4) + 41629.2 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5)*begin_lambda + -0.00234915 *lens_ipow(begin_x, 3)*begin_dy*lens_ipow(begin_lambda, 6)+0.0f;
    dx1_domega0[1][0] =  + -0.00227363 *begin_dy + -0.018217 *lens_ipow(begin_dy, 2) + -95.2353 *begin_dx*begin_dy + -0.637701 *begin_y*begin_dx + -0.645079 *begin_x*begin_dy + -0.00245855 *begin_x*begin_y + -0.0144617 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 2169.11 *begin_dx*lens_ipow(begin_dy, 5) + 2371.46 *lens_ipow(begin_dx, 5)*begin_dy + 25.1054 *begin_y*lens_ipow(begin_dx, 5) + 1.86875e-09 *begin_x*lens_ipow(begin_y, 5) + -2.32289e-05 *lens_ipow(begin_x, 4)*begin_dx*begin_dy + -0.0239305 *lens_ipow(begin_y, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 66605.8 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3)*begin_lambda + -0.021271 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 3.94061e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)+0.0f;
    dx1_domega0[1][1] =  + 70.1983  + -0.00227363 *begin_dx + -142.781 *lens_ipow(begin_dy, 2) + -0.0364339 *begin_dx*begin_dy + -47.6177 *lens_ipow(begin_dx, 2) + -1.90953 *begin_y*begin_dy + -0.00370718 *lens_ipow(begin_y, 2) + -0.645079 *begin_x*begin_dx + -0.00131448 *lens_ipow(begin_x, 2) + 5.30077 *lens_ipow(begin_lambda, 4) + -0.00723085 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.84065e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 2) + 5422.78 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 395.244 *lens_ipow(begin_dx, 6) + -6.05566e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -0.345912 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 3.83542e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -1.16144e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + -0.0119652 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 27750 *lens_ipow(begin_dy, 8) + 6.90568e-12 *lens_ipow(begin_y, 8) + 1.71906e-12 *lens_ipow(begin_x, 8) + 33302.9 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2)*begin_lambda + -25.5174 *lens_ipow(begin_lambda, 10) + -0.0283614 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + 3.57824e-05  + -0.000738553 *begin_dy + 99.8266 *begin_dx + -1.0987e-05 *begin_y + 0.605699 *begin_x + 7.96105e-05 *begin_y*begin_dx + -1.08198e-06 *lens_ipow(begin_x, 2) + -41.9148 *begin_dx*lens_ipow(begin_dy, 2) + -42.1087 *lens_ipow(begin_dx, 3) + 0.146465 *begin_y*begin_dx*begin_dy + 0.00572308 *lens_ipow(begin_y, 2)*begin_dx + 1.64385 *begin_x*lens_ipow(begin_dy, 2) + 1.84917 *begin_x*lens_ipow(begin_dx, 2) + 0.03206 *begin_x*begin_y*begin_dy + 0.000140864 *begin_x*lens_ipow(begin_y, 2) + 0.0382372 *lens_ipow(begin_x, 2)*begin_dx + 0.000143118 *lens_ipow(begin_x, 3) + -0.857765 *begin_dx*lens_ipow(begin_lambda, 3) + 0.016462 *begin_x*lens_ipow(begin_lambda, 3) + -0.00339212 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + -0.00590154 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + -1.22627 *begin_x*lens_ipow(begin_dx, 4) + 0.000250239 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.016667 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.000168585 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + -0.00331118 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 3) + 1157.76 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + 1067.54 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + -9.31094 *begin_x*lens_ipow(begin_dy, 6) + 0.00104677 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + 7.47849e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2) + 1545.65 *lens_ipow(begin_dx, 9) + -1.35394e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + -1.89948e-13 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6) + 59.6789 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 8) + 841.341 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -0.109802 *begin_x*lens_ipow(begin_lambda, 10) + 0.938236 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 4) + -3.05705e-10 *lens_ipow(begin_x, 7)*lens_ipow(begin_lambda, 4) + -6.07755e-16 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2);
    out[1] =  + 9.90496e-05  + 99.8135 *begin_dy + -0.00053149 *begin_dx + 0.605436 *begin_y + -8.93651e-06 *begin_x + -6.5863e-05 *begin_y*begin_dy + -0.00012153 *begin_y*begin_dx + -1.02243e-06 *lens_ipow(begin_x, 2) + -40.7404 *lens_ipow(begin_dy, 3) + -40.8957 *lens_ipow(begin_dx, 2)*begin_dy + 1.824 *begin_y*lens_ipow(begin_dy, 2) + 1.65697 *begin_y*lens_ipow(begin_dx, 2) + 0.0377848 *lens_ipow(begin_y, 2)*begin_dy + 0.000143157 *lens_ipow(begin_y, 3) + 0.153398 *begin_x*begin_dx*begin_dy + 0.0321332 *begin_x*begin_y*begin_dx + 0.00566336 *lens_ipow(begin_x, 2)*begin_dy + 0.000141816 *lens_ipow(begin_x, 2)*begin_y + -0.911193 *begin_dy*lens_ipow(begin_lambda, 3) + 0.0183986 *begin_y*lens_ipow(begin_lambda, 3) + -9.86841e-09 *lens_ipow(begin_x, 3)*begin_y + 0.000268796 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2) + 1814.93 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 74.1741 *lens_ipow(begin_dx, 6)*begin_dy + -26.4905 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -8.97259 *begin_y*lens_ipow(begin_dx, 6) + 2.7683e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + 0.000985967 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + 4.26282e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 9.63828e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2)*begin_lambda + 5586.43 *lens_ipow(begin_dy, 9) + -0.000590894 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -2.98269e-13 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -5.7029e-14 *lens_ipow(begin_x, 8)*begin_y + 345.792 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 6) + 40.2467 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 8) + 4862.43 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 4) + -0.121469 *begin_y*lens_ipow(begin_lambda, 10) + -3.09589e-16 *lens_ipow(begin_y, 11) + -1.14237e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 6);
    out[2] =  + 3.25265e-06  + -3.01705 *begin_dx + -0.0283114 *begin_x + 1.2233e-06 *begin_y*begin_dx + 4.24783e-06 *begin_x*begin_dy + -13.574 *begin_dx*lens_ipow(begin_dy, 2) + 1.47213 *lens_ipow(begin_dx, 3) + -0.194055 *begin_y*begin_dx*begin_dy + 2.99784e-05 *begin_y*lens_ipow(begin_dx, 2) + -0.000633603 *lens_ipow(begin_y, 2)*begin_dx + -0.144423 *begin_x*lens_ipow(begin_dy, 2) + -0.00215444 *begin_x*begin_y*begin_dy + -6.64521e-06 *begin_x*lens_ipow(begin_y, 2) + -0.000304989 *lens_ipow(begin_x, 2)*begin_dx + -3.05453e-09 *lens_ipow(begin_x, 2)*begin_y + -7.11419e-07 *lens_ipow(begin_x, 3) + 0.0527755 *begin_dx*lens_ipow(begin_lambda, 3) + -0.000553874 *begin_x*lens_ipow(begin_lambda, 3) + 24.6355 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 0.156289 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 0.355106 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -9.45375e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.0458e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy*begin_lambda + 8.49777 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -10.1953 *lens_ipow(begin_dx, 7) + 7.40852e-09 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + 1.75944 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -7.51738e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2) + 4.19359e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + 0.00150818 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*begin_dy + -0.000989735 *begin_x*begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + -200.905 *begin_dx*lens_ipow(begin_dy, 8) + 1411.34 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 4) + 2.6539 *begin_y*lens_ipow(begin_dx, 7)*begin_dy + -0.00155857 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 6) + 0.00216962 *begin_x*lens_ipow(begin_lambda, 9) + -0.00847727 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 5) + -4.1094e-12 *begin_x*lens_ipow(begin_y, 6)*lens_ipow(begin_lambda, 3) + -0.263838 *begin_dx*lens_ipow(begin_lambda, 10) + -147.48 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 7);
    out[3] =  + -1.2588e-06  + -3.02037 *begin_dy + -0.0283463 *begin_y + 9.43668e-05 *begin_dx*begin_dy + 1.66539 *lens_ipow(begin_dy, 3) + 16.1687 *lens_ipow(begin_dx, 2)*begin_dy + 0.00512201 *begin_y*lens_ipow(begin_dy, 2) + 0.0484138 *begin_y*lens_ipow(begin_dx, 2) + -0.000264296 *lens_ipow(begin_y, 2)*begin_dy + -6.2588e-07 *lens_ipow(begin_y, 3) + 0.282896 *begin_x*begin_dx*begin_dy + 0.000934146 *begin_x*begin_y*begin_dx + 0.00119969 *lens_ipow(begin_x, 2)*begin_dy + 5.19818e-06 *lens_ipow(begin_x, 2)*begin_y + 0.0513824 *begin_dy*lens_ipow(begin_lambda, 3) + 0.00469586 *lens_ipow(begin_dy, 4) + -0.000578779 *begin_y*lens_ipow(begin_lambda, 3) + -1.79804e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 6.05946 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.00089896 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.00153996 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 1.8331e-05 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + 4.649 *begin_x*begin_dx*lens_ipow(begin_dy, 5) + 7.03767e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 5.36639e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -0.000628749 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*begin_dy + -1.04774e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda + -0.111071 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 6) + -1829.95 *lens_ipow(begin_dx, 8)*begin_dy + 0.842426 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + -1.37127e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dx + 1.21327e-13 *lens_ipow(begin_x, 8)*begin_dy + 0.00225536 *begin_y*lens_ipow(begin_lambda, 9) + -0.268601 *begin_dy*lens_ipow(begin_lambda, 10) + -629.69 *lens_ipow(begin_dy, 11) + 4.34141 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -44.2499 *begin_y*lens_ipow(begin_dx, 10) + -0.00185038 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + 0.000689258 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 7) + 2.64486e-09 *lens_ipow(begin_x, 7)*begin_dx*lens_ipow(begin_dy, 3);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0283114  + 4.24783e-06 *begin_dy + -0.144423 *lens_ipow(begin_dy, 2) + -0.00215444 *begin_y*begin_dy + -6.64521e-06 *lens_ipow(begin_y, 2) + -0.000609978 *begin_x*begin_dx + -6.10906e-09 *begin_x*begin_y + -2.13426e-06 *lens_ipow(begin_x, 2) + -0.000553874 *lens_ipow(begin_lambda, 3) + 0.355106 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -9.45375e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.000120916 *begin_x*begin_y*begin_dx*begin_dy*begin_lambda + 1.75944 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -3.75869e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + 2.09679e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -0.000989735 *begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + -0.00467572 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 6) + 0.00216962 *lens_ipow(begin_lambda, 9) + -0.00847727 *begin_y*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 5) + -4.1094e-12 *lens_ipow(begin_y, 6)*lens_ipow(begin_lambda, 3)+0.0f;
    domega2_dx0[0][1] =  + 1.2233e-06 *begin_dx + -0.194055 *begin_dx*begin_dy + 2.99784e-05 *lens_ipow(begin_dx, 2) + -0.00126721 *begin_y*begin_dx + -0.00215444 *begin_x*begin_dy + -1.32904e-05 *begin_x*begin_y + -3.05453e-09 *lens_ipow(begin_x, 2) + 0.156289 *lens_ipow(begin_dx, 3)*begin_dy + -1.89075e-05 *begin_x*begin_y*lens_ipow(begin_dx, 2) + -6.0458e-05 *lens_ipow(begin_x, 2)*begin_dx*begin_dy*begin_lambda + 3.70426e-08 *lens_ipow(begin_y, 4)*begin_dx*begin_dy + 8.38717e-12 *lens_ipow(begin_x, 5)*begin_y + 0.00301636 *begin_y*lens_ipow(begin_dx, 5)*begin_dy + -0.000989735 *begin_x*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + 2.6539 *lens_ipow(begin_dx, 7)*begin_dy + -0.00847727 *begin_x*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 5) + -2.46564e-11 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 3) + -147.48 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 7)+0.0f;
    domega2_dx0[1][0] =  + 0.282896 *begin_dx*begin_dy + 0.000934146 *begin_y*begin_dx + 0.00239939 *begin_x*begin_dy + 1.03964e-05 *begin_x*begin_y + 0.00307992 *begin_x*lens_ipow(begin_dy, 3) + 5.49931e-05 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 4.649 *begin_dx*lens_ipow(begin_dy, 5) + 1.40753e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 1.07328e-07 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -0.00188625 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*begin_dy + -1.04774e-07 *lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda + -6.85636e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx + 9.70619e-13 *lens_ipow(begin_x, 7)*begin_dy + 0.00275703 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 7) + 1.8514e-08 *lens_ipow(begin_x, 6)*begin_dx*lens_ipow(begin_dy, 3)+0.0f;
    domega2_dx0[1][1] =  + -0.0283463  + 0.00512201 *lens_ipow(begin_dy, 2) + 0.0484138 *lens_ipow(begin_dx, 2) + -0.000528592 *begin_y*begin_dy + -1.87764e-06 *lens_ipow(begin_y, 2) + 0.000934146 *begin_x*begin_dx + 5.19818e-06 *lens_ipow(begin_x, 2) + -0.000578779 *lens_ipow(begin_lambda, 3) + -3.59608e-06 *begin_y*lens_ipow(begin_dx, 2) + -0.00179792 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.40753e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.60992e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -4.19095e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + 1.68485 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + -4.11381e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx + 0.00225536 *lens_ipow(begin_lambda, 9) + 4.34141 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -44.2499 *lens_ipow(begin_dx, 10) + -0.00740153 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.428598  + 0.32616 *begin_lambda + 0.000118095 *begin_dx + -1.83399e-07 *begin_y + -0.187444 *lens_ipow(begin_dy, 2) + -9.06988e-05 *begin_dx*begin_dy + -0.186345 *lens_ipow(begin_dx, 2) + -0.00319088 *begin_y*begin_dy + 6.31783e-06 *begin_y*begin_dx + -1.59167e-05 *lens_ipow(begin_y, 2) + -0.00329846 *begin_x*begin_dx + 8.81241e-08 *begin_x*begin_y + -1.50958e-05 *lens_ipow(begin_x, 2) + -0.271441 *lens_ipow(begin_lambda, 3) + -4.93076e-07 *lens_ipow(begin_x, 2)*begin_dx + -0.0426696 *begin_y*lens_ipow(begin_dy, 3) + -0.021322 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.000418085 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.000130425 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.0536345 *begin_x*lens_ipow(begin_dx, 3) + -0.000263898 *begin_x*begin_y*begin_dx*begin_dy + -0.000136595 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -0.00057526 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -14.1262 *lens_ipow(begin_dy, 6) + -61.8443 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -21.4287 *lens_ipow(begin_dx, 6) + -0.969031 *begin_y*lens_ipow(begin_dx, 4)*begin_dy + -0.00223949 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 2.53658e-11 *lens_ipow(begin_y, 6) + -0.119997 *begin_x*begin_dx*lens_ipow(begin_dy, 4) + 0.000153991 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -4.2729e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -0.00018222 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 2) + 6.35724e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + 7.08037e-12 *lens_ipow(begin_x, 6) + -0.180268 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 8) + 0.231945 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 8) + 9.49451e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 6) + -4.23332e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 4) + 0.488632 *lens_ipow(begin_lambda, 11);
else
  out[4] = 0.0f;
