const float dx00 =  + 0.57611  + -1.56179e-06 *x + 1.19486 *lens_ipow(dy, 2) + 4.31218 *lens_ipow(dx, 2) + 0.0795652 *y*dy + 5.09669e-05 *y*dx + 0.00107686 *lens_ipow(y, 2) + 0.251628 *x*dx + 0.00323953 *lens_ipow(x, 2) + -0.0644539 *lens_ipow(lambda, 3) + 0.00160243 *x*y*dx*dy + 2.38629e-05 *lens_ipow(x, 2)*y*dy + 5.53427e-08 *lens_ipow(x, 3)*y + 8.34116e-08 *lens_ipow(x, 4) + 3.01886e-07 *lens_ipow(x, 3)*y*dy + 1.52972e-07 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 2) + 3.87508e-12 *lens_ipow(y, 8) + -2.13006e-06 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 2.38109e-10 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.5054e-07 *lens_ipow(x, 6)*lens_ipow(dy, 2) + 51.781 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + 2.53133e-13 *lens_ipow(x, 9) + 0.342727 *lens_ipow(lambda, 10) + -0.00300336 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 2.56481e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 3) + -2.88226e-09 *lens_ipow(x, 7)*y*dx*dy + 7.61415e-13 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx01 =  + 9.16576e-06  + 8.06954e-05 *dx + 5.06926e-06 *y + 3.0928 *dx*dy + 0.0909473 *y*dx + 0.0795652 *x*dy + 5.09669e-05 *x*dx + 0.00215371 *x*y + 0.000801215 *lens_ipow(x, 2)*dx*dy + 7.95431e-06 *lens_ipow(x, 3)*dy + 1.38357e-08 *lens_ipow(x, 4) + -0.316163 *lens_ipow(dx, 4)*dy + 7.54716e-08 *lens_ipow(x, 4)*dy + 7.64858e-07 *x*lens_ipow(y, 4)*dy*lens_ipow(lambda, 2) + 3.10007e-11 *x*lens_ipow(y, 7) + -1.59755e-06 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 1.90487e-10 *lens_ipow(x, 5)*lens_ipow(y, 3) + 51.781 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + -0.00300336 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 8.54936e-08 *lens_ipow(x, 6)*y*lens_ipow(dx, 3) + -3.60283e-10 *lens_ipow(x, 8)*dx*dy + 1.69203e-13 *lens_ipow(x, 9)*y+0.0f;
const float dx02 =  + 35.5802  + 0.0045315 *dy + 8.06954e-05 *y + 38.1235 *lens_ipow(dy, 2) + 114.667 *lens_ipow(dx, 2) + 3.0928 *y*dy + 0.0454737 *lens_ipow(y, 2) + 8.62436 *x*dx + 5.09669e-05 *x*y + 0.125814 *lens_ipow(x, 2) + -1.96618 *lens_ipow(lambda, 4) + 0.000801215 *lens_ipow(x, 2)*y*dy + -1.26465 *y*lens_ipow(dx, 3)*dy + -5.32515e-07 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 207.124 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + 9.4202 *lens_ipow(lambda, 10) + -0.00200224 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 1.2824e-07 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -3.60283e-10 *lens_ipow(x, 8)*y*dy+0.0f;
const float dx03 =  + 0.0045315 *dx + 76.247 *dx*dy + 3.0928 *y*dx + 2.38972 *x*dy + 0.0795652 *x*y + 0.000801215 *lens_ipow(x, 2)*y*dx + 7.95431e-06 *lens_ipow(x, 3)*y + -0.316163 *y*lens_ipow(dx, 4) + 7.54716e-08 *lens_ipow(x, 4)*y + 1.52972e-07 *x*lens_ipow(y, 5)*lens_ipow(lambda, 2) + -5.32515e-07 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 4.30114e-08 *lens_ipow(x, 7)*dy + 155.343 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + -0.00300336 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.60283e-10 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx04 =  + -0.193362 *x*lens_ipow(lambda, 2) + -7.86472 *dx*lens_ipow(lambda, 3) + 3.05943e-07 *x*lens_ipow(y, 5)*dy*lambda + 51.781 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 94.202 *dx*lens_ipow(lambda, 9) + 3.42727 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + 4.90396e-06  + -3.6962e-05 *dy + 3.10618 *dx*dy + 0.0801155 *y*dx + 0.0911399 *x*dy + 0.00216596 *x*y + 1.09019e-07 *lens_ipow(y, 3) + 0.000867341 *lens_ipow(y, 2)*dx*dy + 3.22142e-06 *lens_ipow(y, 3)*dx + 1.90247e-05 *x*lens_ipow(y, 2)*dy + 1.96136 *y*dx*lens_ipow(dy, 4)*lambda + -5.8194e-08 *lens_ipow(y, 6)*dx*dy + 0.00106972 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.8608e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + 2.83906e-10 *lens_ipow(x, 3)*lens_ipow(y, 5) + -5.33428 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 5) + 0.00927332 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 5) + -9.95588e-05 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 5) + -0.00177478 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 4) + -7.28687e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 4) + 9.00637e-08 *lens_ipow(x, 7)*lens_ipow(dy, 3) + 3.74945e-09 *lens_ipow(x, 7)*y*lens_ipow(dy, 2)+0.0f;
const float dx11 =  + 0.57582  + 0.00020035 *dx + 4.30109 *lens_ipow(dy, 2) + 1.20187 *lens_ipow(dx, 2) + 0.251135 *y*dy + 0.00323715 *lens_ipow(y, 2) + 0.0801155 *x*dx + 0.00108298 *lens_ipow(x, 2) + -0.0622474 *lens_ipow(lambda, 3) + 3.27058e-07 *x*lens_ipow(y, 2) + 9.39771e-08 *lens_ipow(y, 4) + 0.00173468 *x*y*dx*dy + 9.66426e-06 *x*lens_ipow(y, 2)*dx + 1.90247e-05 *lens_ipow(x, 2)*y*dy + 1.96136 *x*dx*lens_ipow(dy, 4)*lambda + -3.49164e-07 *x*lens_ipow(y, 5)*dx*dy + 0.00160458 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.48106e-06 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 3.54882e-10 *lens_ipow(x, 4)*lens_ipow(y, 4) + 0.0185466 *x*y*dx*dy*lens_ipow(lambda, 5) + 0.323866 *lens_ipow(lambda, 10) + 4.46109e-05 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 2.43671e-09 *lens_ipow(y, 8)*lens_ipow(dx, 2) + -0.00177478 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + -5.46515e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(lambda, 4) + 4.68681e-10 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const float dx12 =  + 0.0082467 *dx + 0.00020035 *y + 76.1035 *dx*dy + 2.40374 *y*dx + 3.10618 *x*dy + 0.0801155 *x*y + 0.000867341 *x*lens_ipow(y, 2)*dy + 3.22142e-06 *x*lens_ipow(y, 3) + 1.96136 *x*y*lens_ipow(dy, 4)*lambda + -5.8194e-08 *x*lens_ipow(y, 6)*dy + 0.00106972 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -6.20265e-07 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -16.0029 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 5) + 0.00927332 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 5) + 1.48703e-05 *lens_ipow(y, 6)*dx*dy*lens_ipow(lambda, 2) + 5.4149e-10 *lens_ipow(y, 9)*dx + -0.000591592 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 4)+0.0f;
const float dx13 =  + 35.5792  + -3.6962e-05 *x + 113.975 *lens_ipow(dy, 2) + 38.0517 *lens_ipow(dx, 2) + 8.60218 *y*dy + 0.125568 *lens_ipow(y, 2) + 3.10618 *x*dx + 0.0455699 *lens_ipow(x, 2) + -1.88828 *lens_ipow(lambda, 4) + 0.000867341 *x*lens_ipow(y, 2)*dx + 9.51235e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 7.84544 *x*y*dx*lens_ipow(dy, 3)*lambda + -5.8194e-08 *x*lens_ipow(y, 6)*dx + 0.00106972 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -6.20265e-07 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -5.33428 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 5) + 0.00927332 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 5) + -2.48897e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 5) + 8.90388 *lens_ipow(lambda, 10) + 7.43515e-06 *lens_ipow(y, 6)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.00236637 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 3.37739e-08 *lens_ipow(x, 8)*lens_ipow(dy, 2) + 9.37362e-10 *lens_ipow(x, 8)*y*dy+0.0f;
const float dx14 =  + -0.186742 *y*lens_ipow(lambda, 2) + -7.55313 *dy*lens_ipow(lambda, 3) + 1.96136 *x*y*dx*lens_ipow(dy, 4) + -26.6714 *x*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 4) + 0.0463666 *x*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 4) + -0.000124448 *lens_ipow(x, 4)*dy*lens_ipow(lambda, 4) + 89.0388 *dy*lens_ipow(lambda, 9) + 3.23866 *y*lens_ipow(lambda, 9) + 1.48703e-05 *lens_ipow(y, 6)*lens_ipow(dx, 2)*dy*lambda + -7.28687e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(lambda, 3)+0.0f;
const float dx20 =  + -0.0302107  + 2.19055e-07 *x + -0.00215066 *lens_ipow(dy, 2) + -0.0214227 *lens_ipow(dx, 2) + 0.00185727 *y*dy + 3.01562e-05 *lens_ipow(y, 2) + 0.0045828 *x*dx + 8.26091e-05 *lens_ipow(x, 2) + -0.00330274 *lens_ipow(lambda, 3) + 0.000298543 *y*lens_ipow(dx, 2)*dy + -7.53406e-07 *lens_ipow(x, 2)*y*dy + 1.2438e-07 *lens_ipow(x, 4) + 0.000645342 *lens_ipow(y, 2)*lens_ipow(dx, 4) + 1.21254e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -2.65566e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.135426 *x*dx*lens_ipow(dy, 4)*lambda + -0.0251942 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -0.000157243 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + 0.0182498 *lens_ipow(x, 2)*lens_ipow(dx, 6) + 2.91974e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 1.39625e-07 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 3) + 0.0167349 *lens_ipow(lambda, 10) + -0.00144778 *y*dy*lens_ipow(lambda, 8) + 1.58442e-15 *lens_ipow(y, 10) + -3.2982e-10 *x*lens_ipow(y, 7)*dx*dy + 4.38938e-13 *lens_ipow(x, 4)*lens_ipow(y, 6) + -6.00754e-10 *lens_ipow(x, 7)*y*dx*dy + 1.95359e-13 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx21 =  + 1.22714e-06  + -0.0159219 *dx*dy + 0.00100866 *y*dx + 0.00185727 *x*dy + 6.03124e-05 *x*y + 0.000298543 *x*lens_ipow(dx, 2)*dy + -2.51135e-07 *lens_ipow(x, 3)*dy + 0.00129068 *x*y*lens_ipow(dx, 4) + 6.06269e-08 *lens_ipow(x, 4)*y*dx + -0.000157243 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lambda + 2.91974e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -0.00144778 *x*dy*lens_ipow(lambda, 8) + 1.58442e-14 *x*lens_ipow(y, 9) + -1.15437e-09 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy + 5.26726e-13 *lens_ipow(x, 5)*lens_ipow(y, 5) + -7.50942e-11 *lens_ipow(x, 8)*dx*dy + 4.34131e-14 *lens_ipow(x, 9)*y+0.0f;
const float dx22 =  + -0.139957  + -0.000658809 *dx + -2.49266 *lens_ipow(dy, 2) + -7.65965 *lens_ipow(dx, 2) + -0.0159219 *y*dy + 0.00050433 *lens_ipow(y, 2) + -0.0428454 *x*dx + 0.0022914 *lens_ipow(x, 2) + -0.218552 *lens_ipow(lambda, 4) + 0.000597087 *x*y*dx*dy + 0.00258137 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + 3.03135e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.06226e-06 *lens_ipow(x, 5)*dx + -0.067713 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + -0.0377913 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -7.86213e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.0364996 *lens_ipow(x, 3)*lens_ipow(dx, 5) + 2.32709e-08 *lens_ipow(x, 6)*lens_ipow(lambda, 3) + 1.03168 *lens_ipow(lambda, 10) + 1163.69 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 4) + 1377.53 *lens_ipow(dx, 6)*lens_ipow(lambda, 4) + -1.6491e-10 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy + -7.50942e-11 *lens_ipow(x, 8)*y*dy+0.0f;
const float dx23 =  + -4.98533 *dx*dy + -0.0159219 *y*dx + -0.00430132 *x*dy + 0.00185727 *x*y + 0.000298543 *x*y*lens_ipow(dx, 2) + -2.51135e-07 *lens_ipow(x, 3)*y + -0.270852 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lambda + -0.000157243 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + 9.73246e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + 1551.58 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -0.00144778 *x*y*lens_ipow(lambda, 8) + -1.6491e-10 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + -7.50942e-11 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx24 =  + -0.00990821 *x*lens_ipow(lambda, 2) + -0.874208 *dx*lens_ipow(lambda, 3) + -0.067713 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4) + -0.0377913 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -7.86213e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 1.94649e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy*lambda + 6.98126e-08 *lens_ipow(x, 6)*dx*lens_ipow(lambda, 2) + 10.3168 *dx*lens_ipow(lambda, 9) + 1551.58 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lens_ipow(lambda, 3) + 787.162 *lens_ipow(dx, 7)*lens_ipow(lambda, 3) + 0.167349 *x*lens_ipow(lambda, 9) + -0.0115823 *x*y*dy*lens_ipow(lambda, 7)+0.0f;
const float dx30 =  + 8.11769e-07  + -0.01588 *dx*dy + 0.00177903 *y*dx + 0.00101696 *x*dy + 5.99323e-05 *x*y + 0.0049142 *y*dx*lens_ipow(dy, 2) + 0.000213464 *lens_ipow(y, 2)*dx*dy + 1.49055e-06 *lens_ipow(y, 3)*dx + -9.66801e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -9.82203e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + 1.3823e-07 *x*lens_ipow(y, 4)*dy*lambda + -4.54129e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lambda + -0.0504257 *y*lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -1.3532e-08 *lens_ipow(y, 6)*dx*dy + 0.0804529 *lens_ipow(x, 2)*dx*lens_ipow(dy, 5) + 3.13507e-11 *lens_ipow(x, 3)*lens_ipow(y, 5) + -0.0098225 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 3.25275e-14 *x*lens_ipow(y, 9) + 5.79511e-13 *lens_ipow(x, 9)*dy + 3.61017e-14 *lens_ipow(x, 9)*y+0.0f;
const float dx31 =  + -0.0303397  + -0.0184507 *lens_ipow(dy, 2) + -0.00271495 *lens_ipow(dx, 2) + 0.00457767 *y*dy + 8.22879e-05 *lens_ipow(y, 2) + 0.00177903 *x*dx + 2.99661e-05 *lens_ipow(x, 2) + -0.00481273 *lens_ipow(lambda, 4) + 1.3658e-07 *lens_ipow(y, 4) + 0.0049142 *x*dx*lens_ipow(dy, 2) + 0.000426928 *x*y*dx*dy + 4.47164e-06 *x*lens_ipow(y, 2)*dx + 0.00441829 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -4.82028e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -6.44534e-06 *lens_ipow(x, 3)*y*dx*dy + -9.82203e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 3)*lambda + 2.76459e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -1.13532e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lambda + -0.00227748 *lens_ipow(y, 3)*lens_ipow(dy, 5) + -0.0504257 *x*lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -8.11918e-08 *x*lens_ipow(y, 5)*dx*dy + 3.91883e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + -1.54948e-07 *lens_ipow(y, 4)*lens_ipow(lambda, 5) + -0.0098225 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 0.0234807 *lens_ipow(lambda, 10) + 1.46374e-13 *lens_ipow(x, 2)*lens_ipow(y, 8) + 3.61017e-15 *lens_ipow(x, 10)+0.0f;
const float dx32 =  + -4.94466 *dx*dy + -0.00542991 *y*dx + -0.01588 *x*dy + 0.00177903 *x*y + 0.0049142 *x*y*lens_ipow(dy, 2) + 0.000213464 *x*lens_ipow(y, 2)*dy + 1.49055e-06 *x*lens_ipow(y, 3) + 0.00294552 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -3.22267e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -2.27065e-06 *lens_ipow(x, 4)*y*dx*lambda + 356.416 *dx*lens_ipow(dy, 5)*lens_ipow(lambda, 2) + -0.252129 *x*y*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -1.3532e-08 *x*lens_ipow(y, 6)*dy + 0.0268176 *lens_ipow(x, 3)*lens_ipow(dy, 5) + -0.0098225 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lambda+0.0f;
const float dx33 =  + -0.140321  + -7.54717 *lens_ipow(dy, 2) + -2.47233 *lens_ipow(dx, 2) + -0.0369014 *y*dy + 0.00228883 *lens_ipow(y, 2) + -0.01588 *x*dx + 0.000508481 *lens_ipow(x, 2) + -0.221456 *lens_ipow(lambda, 4) + 0.00982839 *x*y*dx*dy + 0.000213464 *x*lens_ipow(y, 2)*dx + 0.00294552 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -1.92811e-06 *lens_ipow(y, 5)*dy + -3.22267e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -0.000147331 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 6.91148e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 2045.04 *lens_ipow(dy, 8) + 891.04 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -0.00284685 *lens_ipow(y, 4)*lens_ipow(dy, 4) + -1.3532e-08 *x*lens_ipow(y, 6)*dx + 0.134088 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4) + -0.0147338 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 1.05358 *lens_ipow(lambda, 10) + 5.79511e-14 *lens_ipow(x, 10)+0.0f;
const float dx34 =  + -0.885822 *dy*lens_ipow(lambda, 3) + -0.0192509 *y*lens_ipow(lambda, 3) + -4.91102e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3) + 6.91148e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -1.13532e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 2) + 356.416 *lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda + -0.100851 *x*y*lens_ipow(dx, 5)*lambda + -1.54948e-07 *lens_ipow(y, 5)*lens_ipow(lambda, 4) + -0.00491125 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 10.5358 *dy*lens_ipow(lambda, 9) + 0.234807 *y*lens_ipow(lambda, 9)+0.0f;
const float dx40 =  + 6.59577e-07  + -9.5859e-06 *dy + -0.00115347 *dx + -2.36694e-07 *y + -3.24334e-05 *x + 1.14856e-06 *y*dy + -0.00566463 *dx*lens_ipow(dy, 2) + -0.000358716 *y*dx*dy + -1.14071e-05 *x*y*dy + -2.84125e-09 *x*lens_ipow(y, 4) + 4.49434e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -7.34581e-09 *lens_ipow(x, 3)*lens_ipow(y, 2) + -2.43546e-09 *lens_ipow(x, 5) + 0.330474 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 2.65969e-08 *lens_ipow(y, 5)*dx*dy + -0.00062519 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.00803e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -6.33094e-05 *lens_ipow(x, 3)*lens_ipow(dy, 4) + 0.00170369 *lens_ipow(y, 3)*lens_ipow(dx, 5)*dy + 2.31389e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)+0.0f;
const float dx41 =  + -0.00109379 *dy + -3.25278e-05 *y + -2.36694e-07 *x + 1.14856e-06 *x*dy + 0.000254964 *y*lens_ipow(dx, 2) + -3.35833e-07 *lens_ipow(y, 2)*dx + -0.000358716 *x*dx*dy + -5.70355e-06 *lens_ipow(x, 2)*dy + 5.28914e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.39771e-09 *lens_ipow(y, 5) + -5.6825e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -3.6729e-09 *lens_ipow(x, 4)*y + 9.32773e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.330474 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.32985e-07 *x*lens_ipow(y, 4)*dx*dy + -0.00062519 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.00803e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -1.99849e-06 *lens_ipow(y, 5)*lens_ipow(dx, 4) + 0.00511106 *x*lens_ipow(y, 2)*lens_ipow(dx, 5)*dy + 7.71297e-10 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)+0.0f;
const float dx42 =  + 3.36175e-05  + -0.000302309 *dy + -0.0569887 *dx + -0.00115347 *x + 0.000254964 *lens_ipow(y, 2)*dx + -1.11944e-07 *lens_ipow(y, 3) + -0.00566463 *x*lens_ipow(dy, 2) + -0.000358716 *x*y*dy + -5.9726 *dx*lens_ipow(dy, 4) + -17.2945 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -4.78804 *lens_ipow(dx, 5) + 2.24717e-06 *lens_ipow(x, 4)*dx + 4.66387e-06 *lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + 0.991423 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 2.65969e-08 *x*lens_ipow(y, 5)*dy + -0.00062519 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 1.33601e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -1.33233e-06 *lens_ipow(y, 6)*lens_ipow(dx, 3) + 0.00851843 *x*lens_ipow(y, 3)*lens_ipow(dx, 4)*dy + 7.71297e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx+0.0f;
const float dx43 =  + -0.055395 *dy + -0.000302309 *dx + -0.00109379 *y + -9.5859e-06 *x + 1.14856e-06 *x*y + -0.0113293 *x*dx*dy + -0.000358716 *x*y*dx + -5.70355e-06 *lens_ipow(x, 2)*y + -3.48822 *lens_ipow(dy, 5) + -11.9452 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -8.64725 *lens_ipow(dx, 4)*dy + 2.64457e-06 *lens_ipow(y, 4)*dy + 4.66387e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + 0.991423 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.65969e-08 *x*lens_ipow(y, 5)*dx + -0.00062519 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 1.33601e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -6.33094e-05 *lens_ipow(x, 4)*lens_ipow(dy, 3) + 0.00170369 *x*lens_ipow(y, 3)*lens_ipow(dx, 5)+0.0f;
const float dx44 =  + 0.303212  + -0.759815 *lens_ipow(lambda, 2) + 5.03995 *lens_ipow(lambda, 10)+0.0f;
