const float dx00 =  + -0.306395  + 0.263571 *lens_ipow(dy, 2) + -0.00398067 *y*dy + -0.000318567 *lens_ipow(y, 2) + -1.95453e-05 *x*dy + -0.0240519 *x*dx + -0.00107279 *lens_ipow(x, 2) + 0.0792932 *lens_ipow(lambda, 3) + 8.50345e-09 *lens_ipow(y, 3) + 0.000427785 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000818465 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -9.23088e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -11.3435 *lens_ipow(dy, 6) + 0.0115362 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -7.56181e-05 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + -1.27612e-12 *lens_ipow(y, 8) + -7.57463e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -7.07353e-12 *lens_ipow(x, 8) + -1.37203e-05 *lens_ipow(y, 4)*lens_ipow(dx, 4)*lambda + -0.000276258 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -0.419884 *lens_ipow(lambda, 10) + 0.0658889 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 6) + 3.06616e-08 *lens_ipow(y, 6)*lens_ipow(dy, 4) + 0.591927 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -1.90419e-05 *lens_ipow(x, 5)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 1.93625e-07 *lens_ipow(x, 6)*lens_ipow(dx, 4)+0.0f;
const float dx01 =  + 0.162736 *dx*dy + -0.00398067 *x*dy + -0.000637135 *x*y + 2.55104e-08 *x*lens_ipow(y, 2) + 0.00085557 *x*y*lens_ipow(dy, 2) + 0.00163693 *x*y*lens_ipow(dx, 2) + -6.15392e-07 *lens_ipow(x, 3)*y + -0.00198889 *y*dx*lens_ipow(lambda, 3) + -2.5206e-05 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 2) + -1.6033e-10 *lens_ipow(y, 7)*dx + -1.0209e-11 *x*lens_ipow(y, 7) + -6.0597e-12 *lens_ipow(x, 5)*lens_ipow(y, 3) + -5.4881e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 4)*lambda + 0.0658889 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 6) + 1.83969e-07 *x*lens_ipow(y, 5)*lens_ipow(dy, 4)+0.0f;
const float dx02 =  + 52.9073  + -15.8883 *lens_ipow(dy, 2) + -72.9608 *lens_ipow(dx, 2) + 0.162736 *y*dy + -0.012026 *lens_ipow(x, 2) + 7.76432 *lens_ipow(lambda, 4) + 0.00163693 *x*lens_ipow(y, 2)*dx + -0.000994446 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 7017.59 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 61580.9 *lens_ipow(dx, 2)*lens_ipow(dy, 6) + 33765.3 *lens_ipow(dx, 8) + -2.00412e-11 *lens_ipow(y, 8) + -5.4881e-05 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)*lambda + -0.000207194 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -33.2699 *lens_ipow(lambda, 10) + -66.2609 *lens_ipow(dy, 2)*lens_ipow(lambda, 8) + -109.194 *lens_ipow(dx, 2)*lens_ipow(lambda, 8) + 0.295963 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -9.52096e-06 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.10643e-07 *lens_ipow(x, 7)*lens_ipow(dx, 3)+0.0f;
const float dx03 =  + -31.7767 *dx*dy + 0.162736 *y*dx + 0.527142 *x*dy + -0.00398067 *x*y + -9.77267e-06 *lens_ipow(x, 2) + 0.00085557 *x*lens_ipow(y, 2)*dy + 2807.04 *lens_ipow(dx, 5)*dy + -68.061 *x*lens_ipow(dy, 5) + 0.0153816 *lens_ipow(x, 3)*lens_ipow(dy, 3) + -2.5206e-05 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2) + 123162 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + -132.522 *dx*dy*lens_ipow(lambda, 8) + 0.197667 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 1.22646e-07 *x*lens_ipow(y, 6)*lens_ipow(dy, 3) + 0.591927 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 6) + -6.34731e-06 *lens_ipow(x, 6)*lens_ipow(dx, 3)*dy+0.0f;
const float dx04 =  + 0.23788 *x*lens_ipow(lambda, 2) + 31.0573 *dx*lens_ipow(lambda, 3) + -0.00298334 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -5.04121e-05 *lens_ipow(x, 3)*y*dy*lambda + -1.37203e-05 *x*lens_ipow(y, 4)*lens_ipow(dx, 4) + -0.000207194 *lens_ipow(x, 4)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -332.699 *dx*lens_ipow(lambda, 9) + -530.087 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 7) + -291.185 *lens_ipow(dx, 3)*lens_ipow(lambda, 7) + -4.19884 *x*lens_ipow(lambda, 9) + 0.395334 *x*y*lens_ipow(dy, 3)*lens_ipow(lambda, 5) + 1.77578 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const float dx10 =  + -2.2853e-05  + 0.322632 *dx*dy + -0.000635175 *x*y + -1.83029e-06 *lens_ipow(x, 2)*dy + -0.0255707 *y*dx*lens_ipow(dy, 2) + -0.0253877 *x*lens_ipow(dy, 3) + 0.00127502 *x*y*lens_ipow(dx, 2) + 4.62006e-06 *lens_ipow(x, 3)*dy + -0.00649975 *y*dx*lens_ipow(lambda, 4) + -1.23463e-09 *x*lens_ipow(y, 5) + -8.16891e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -6.73467e-12 *lens_ipow(x, 7)*y + -1.51188e-09 *lens_ipow(y, 7)*dx*lens_ipow(dy, 2)+0.0f;
const float dx11 =  + -0.312299  + 0.062463 *lens_ipow(lambda, 2) + 0.646762 *lens_ipow(dy, 2) + 0.397963 *lens_ipow(dx, 2) + -0.000952767 *lens_ipow(y, 2) + -0.000317588 *lens_ipow(x, 2) + -0.00808901 *y*dy*lambda + 0.000132015 *y*lens_ipow(dx, 2) + -0.0255707 *x*dx*lens_ipow(dy, 2) + 0.000637511 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.0917648 *lens_ipow(lambda, 6) + -7.68566 *lens_ipow(dx, 6) + -0.000259523 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 2.36911e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -0.00649975 *x*dx*lens_ipow(lambda, 4) + -3.08656e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.02111e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + -8.41834e-13 *lens_ipow(x, 8) + -12.2081 *lens_ipow(dx, 4)*lens_ipow(lambda, 6) + 0.295084 *lens_ipow(y, 2)*lens_ipow(dx, 6)*lens_ipow(lambda, 2) + -1.46192e-09 *lens_ipow(y, 6)*lens_ipow(lambda, 4) + -1.94826e-14 *lens_ipow(y, 10) + -1.05832e-08 *x*lens_ipow(y, 6)*dx*lens_ipow(dy, 2)+0.0f;
const float dx12 =  + -0.00167567  + -16.0455 *dx*dy + 0.795926 *y*dx + 0.322632 *x*dy + 0.000132015 *lens_ipow(y, 2)*dx + -0.0255707 *x*y*lens_ipow(dy, 2) + 0.00127502 *lens_ipow(x, 2)*y*dx + -46.114 *y*lens_ipow(dx, 5) + 9.47645e-07 *lens_ipow(y, 5)*dx + -0.00649975 *x*y*lens_ipow(lambda, 4) + -41.6358 *dx*dy*lens_ipow(lambda, 5) + 8119.29 *dx*lens_ipow(dy, 5)*lambda + 1.91498e+06 *lens_ipow(dx, 7)*lens_ipow(dy, 3) + -48.8324 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 6) + 0.590168 *lens_ipow(y, 3)*lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -1.51188e-09 *x*lens_ipow(y, 7)*lens_ipow(dy, 2)+0.0f;
const float dx13 =  + 52.7629  + -28.3959 *lens_ipow(dy, 2) + -8.02277 *lens_ipow(dx, 2) + 1.29352 *y*dy + 0.322632 *x*dx + -0.00404451 *lens_ipow(y, 2)*lambda + -6.10098e-07 *lens_ipow(x, 3) + 7.44775 *lens_ipow(lambda, 4) + -0.0511413 *x*y*dx*dy + -0.0380816 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.15502e-06 *lens_ipow(x, 4) + -0.000194642 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -20.8179 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + 20298.2 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + -121.423 *lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -31.7692 *lens_ipow(lambda, 10) + 455156 *lens_ipow(dy, 10) + 718118 *lens_ipow(dx, 8)*lens_ipow(dy, 2) + -3.02376e-09 *x*lens_ipow(y, 7)*dx*dy+0.0f;
const float dx14 =  + 0.124926 *y*lambda + -0.00404451 *lens_ipow(y, 2)*dy + 29.791 *dy*lens_ipow(lambda, 3) + -0.550589 *y*lens_ipow(lambda, 5) + -0.025999 *x*y*dx*lens_ipow(lambda, 3) + -104.089 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + 4059.64 *lens_ipow(dx, 2)*lens_ipow(dy, 5) + -97.1381 *lens_ipow(dy, 5)*lens_ipow(lambda, 3) + -317.692 *dy*lens_ipow(lambda, 9) + -73.2487 *y*lens_ipow(dx, 4)*lens_ipow(lambda, 5) + 0.196723 *lens_ipow(y, 3)*lens_ipow(dx, 6)*lambda + -8.35381e-10 *lens_ipow(y, 7)*lens_ipow(lambda, 3)+0.0f;
const float dx20 =  + -0.0155829  + -0.00228854 *lens_ipow(dy, 2) + 2.03873e-06 *lens_ipow(y, 2) + 6.80194e-06 *lens_ipow(x, 2) + 0.000274302 *x*dx*lambda + 0.000353448 *lens_ipow(lambda, 4) + 3.59491e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.18216e-10 *lens_ipow(y, 5)*dy + 3.99924e-11 *lens_ipow(x, 6)*lens_ipow(lambda, 3)+0.0f;
const float dx21 =  + 4.07747e-06 *x*y + 0.000218454 *y*dx*lambda + 2.39661e-09 *lens_ipow(x, 3)*y + -5.91081e-10 *x*lens_ipow(y, 4)*dy + 1.11274 *lens_ipow(dx, 5)*dy*lens_ipow(lambda, 4)+0.0f;
const float dx22 =  + -0.56295  + 0.104956 *lens_ipow(dy, 2) + 0.538187 *lens_ipow(dx, 2) + 0.000109227 *lens_ipow(y, 2)*lambda + 0.000137151 *lens_ipow(x, 2)*lambda + 5.5637 *y*lens_ipow(dx, 4)*dy*lens_ipow(lambda, 4)+0.0f;
const float dx23 =  + 0.209912 *dx*dy + -0.00457709 *x*dy + -1.18216e-10 *x*lens_ipow(y, 5) + 1.11274 *y*lens_ipow(dx, 5)*lens_ipow(lambda, 4)+0.0f;
const float dx24 =  + 0.000109227 *lens_ipow(y, 2)*dx + 0.000137151 *lens_ipow(x, 2)*dx + 0.00141379 *x*lens_ipow(lambda, 3) + 1.71396e-11 *lens_ipow(x, 7)*lens_ipow(lambda, 2) + 4.45096 *y*lens_ipow(dx, 5)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx30 =  + -1.74736e-07  + 6.16322e-05 *x*dy + 4.74369e-06 *x*y + 0.000116356 *x*dy*lens_ipow(lambda, 3) + -2.53778e-10 *lens_ipow(y, 5)*dx + 3.09154e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + -1.8031e-12 *lens_ipow(x, 6)*y*dx+0.0f;
const float dx31 =  + -0.0155891  + -0.00243562 *lens_ipow(dx, 2) + 0.000162271 *y*dy + 7.42025e-06 *lens_ipow(y, 2) + 2.37184e-06 *lens_ipow(x, 2) + 0.000444725 *lens_ipow(lambda, 5) + -0.00492669 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -1.26889e-09 *x*lens_ipow(y, 4)*dx + -5.21314e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -8.51052e-06 *lens_ipow(y, 3)*lens_ipow(dy, 5) + 4.12205e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + -2.57585e-13 *lens_ipow(x, 7)*dx+0.0f;
const float dx32 =  + 0.211104 *dx*dy + -0.00487124 *y*dx + -2.53778e-10 *x*lens_ipow(y, 5) + -3.47543e-05 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + 1.03051e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -2.57585e-13 *lens_ipow(x, 7)*y+0.0f;
const float dx33 =  + -0.56519  + 0.00778184 *lens_ipow(lambda, 2) + 0.453412 *lens_ipow(dy, 2) + 0.105552 *lens_ipow(dx, 2) + 8.11353e-05 *lens_ipow(y, 2) + 3.08161e-05 *lens_ipow(x, 2) + 5.8178e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + -0.00985337 *y*dy*lens_ipow(lambda, 4) + -1.06382e-05 *lens_ipow(y, 4)*lens_ipow(dy, 4) + 1.03051e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx+0.0f;
const float dx34 =  + 0.0155637 *dy*lambda + 0.00222363 *y*lens_ipow(lambda, 4) + 0.000174534 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 2) + -0.0197067 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -5.21314e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx40 =  + -4.92382e-07  + -1.93657e-05 *x + -0.002689 *dx*lambda + 5.36178e-07 *x*dy + -4.99922e-08 *x*lens_ipow(y, 2) + 4.42392e-08 *lens_ipow(x, 2)*dy + -4.72555e-08 *lens_ipow(x, 3) + 0.0765178 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000257263 *y*dx*dy*lens_ipow(lambda, 2) + -0.0014376 *x*lens_ipow(dy, 4) + 0.0571956 *lens_ipow(dx, 5)*lambda + 3.21831e-05 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -8.17714e-05 *x*lens_ipow(lambda, 6) + 4.49694e-11 *lens_ipow(x, 5)*y*dy + -6.03483e-09 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lambda + -4.61617e-11 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + -1.68686e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)+0.0f;
const float dx41 =  + 6.09359e-08  + -1.66851e-05 *y + -0.00276445 *dy*lambda + 2.06559e-05 *lens_ipow(dx, 2) + -3.48741e-08 *lens_ipow(y, 3) + -4.99922e-08 *lens_ipow(x, 2)*y + -4.00524e-05 *y*lens_ipow(lambda, 3) + -0.00113449 *y*lens_ipow(dx, 4) + -1.11194e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.000257263 *x*dx*dy*lens_ipow(lambda, 2) + 7.05719e-05 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.00294731 *y*lens_ipow(dy, 6) + 0.000614576 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 7.4949e-12 *lens_ipow(x, 6)*dy + -0.00160834 *lens_ipow(dy, 3)*lens_ipow(lambda, 5) + -7.69362e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy + -5.62288e-12 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)+0.0f;
const float dx42 =  + -2.56885e-05  + -0.0587562 *dx + 4.13119e-05 *y*dx + -0.002689 *x*lambda + -0.293451 *dx*lens_ipow(lambda, 3) + -0.00226897 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 0.229553 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000257263 *x*y*dy*lens_ipow(lambda, 2) + 7.05719e-05 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 3) + 0.285978 *x*lens_ipow(dx, 4)*lambda + 0.000409717 *lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + -2.01161e-09 *lens_ipow(x, 6)*dx*lambda + -1.53872e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy + -5.62288e-12 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx + 9.19075 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 7) + 12.2298 *lens_ipow(dx, 3)*lens_ipow(lambda, 7)+0.0f;
const float dx43 =  + -0.067458 *dy + -0.00276445 *y*lambda + 2.68089e-07 *lens_ipow(x, 2) + 1.47464e-08 *lens_ipow(x, 3) + -0.229648 *dy*lens_ipow(lambda, 3) + -5.5597e-07 *lens_ipow(y, 4)*dy + 0.153036 *x*lens_ipow(dx, 3)*dy + -0.000257263 *x*y*dx*lens_ipow(lambda, 2) + -0.00287519 *lens_ipow(x, 2)*lens_ipow(dy, 3) + 3.21831e-05 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 3) + -0.00884194 *lens_ipow(y, 2)*lens_ipow(dy, 5) + 0.000614576 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 7.4949e-12 *lens_ipow(x, 6)*y + -0.00482501 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -1.53872e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx + 9.19075 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 7)+0.0f;
const float dx44 =  + 0.292582  + -0.712469 *lens_ipow(lambda, 2) + -0.00276445 *y*dy + -0.002689 *x*dx + -0.344472 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.440176 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -6.00786e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.000514527 *x*y*dx*dy*lambda + 0.000105858 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.0571956 *x*lens_ipow(dx, 5) + 4.82746e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000245314 *lens_ipow(x, 2)*lens_ipow(lambda, 5) + -0.00804169 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -1.0058e-09 *lens_ipow(x, 6)*lens_ipow(dx, 2) + 4.74806 *lens_ipow(lambda, 10) + 32.1676 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 21.4022 *lens_ipow(dx, 4)*lens_ipow(lambda, 6)+0.0f;
