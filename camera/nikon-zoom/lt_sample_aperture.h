//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + -2.2864e-05  + 61.7449 *begin_dx + 0.995072 *begin_x + -0.00620699 *begin_dx*begin_dy + 1.89009e-06 *begin_x*begin_y + 53.4254 *begin_dx*lens_ipow(begin_dy, 2) + 55.5556 *lens_ipow(begin_dx, 3) + 1.11534 *begin_y*begin_dx*begin_dy + -0.00159888 *lens_ipow(begin_y, 2)*begin_dx + 0.652066 *begin_x*lens_ipow(begin_dy, 2) + 1.85633 *begin_x*lens_ipow(begin_dx, 2) + -0.000339802 *begin_x*lens_ipow(begin_y, 2) + -0.000319854 *lens_ipow(begin_x, 3) + 0.0079601 *begin_x*lens_ipow(begin_lambda, 3) + 3.44221e-05 *begin_x*begin_y*begin_dx*begin_dy + -0.990878 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.707743 *begin_dx*lens_ipow(begin_lambda, 5) + 6.59443e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -0.000161494 *lens_ipow(begin_x, 4)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 1.09219e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_lambda, 3) + -12888.8 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2) + -0.0319596 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 5)*begin_dy + 6.31065e-06 *lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_lambda, 4) + 4.2464e-12 *lens_ipow(begin_y, 8)*begin_dx + 8.9391e-08 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.00114401 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 4) + 0.000149891 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -1.32075e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + 0.000698271 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 5) + -1.26756e-05 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 4) + -1.05387e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + -6.14316e-13 *lens_ipow(begin_x, 9) + -1.49913 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 5) + -29803.3 *lens_ipow(begin_dx, 11) + 212.242 *begin_y*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + -0.471225 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5) + -0.622995 *begin_x*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 8) + -0.262091 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -6.01552e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 1.14297e-11 *lens_ipow(begin_x, 9)*lens_ipow(begin_dx, 2),
       + -5.735e-05  + 61.7517 *begin_dy + 0.994438 *begin_y + -1.60575e-06 *begin_x*begin_y + 54.2948 *lens_ipow(begin_dy, 3) + 51.8407 *lens_ipow(begin_dx, 2)*begin_dy + 1.82013 *begin_y*lens_ipow(begin_dy, 2) + 0.636496 *begin_y*lens_ipow(begin_dx, 2) + -0.000317611 *lens_ipow(begin_y, 3) + 1.05814 *begin_x*begin_dx*begin_dy + 8.86919e-08 *begin_x*lens_ipow(begin_y, 2) + -0.00180391 *lens_ipow(begin_x, 2)*begin_dy + -0.000322421 *lens_ipow(begin_x, 2)*begin_y + 0.0972283 *lens_ipow(begin_dx, 3)*begin_dy + 0.0125377 *begin_y*lens_ipow(begin_lambda, 3) + 1.0348e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 0.000447567 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -9.13585e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 0.698269 *begin_dy*lens_ipow(begin_lambda, 5) + -3.55578e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + 0.151471 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.00158399 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 4) + -1.17166e-10 *lens_ipow(begin_x, 6)*begin_y + 8.10225e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 3) + -6.56211e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dx*lens_ipow(begin_lambda, 3) + -18.8099 *begin_y*lens_ipow(begin_dx, 8) + 9.66381e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2) + -3.40349e-13 *lens_ipow(begin_y, 9) + 1.93644e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 4) + -5.98583e-13 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -7.39297e-08 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 3) + 1.1384e-12 *lens_ipow(begin_x, 8)*begin_dy + -1.95615 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 5) + 597.703 *lens_ipow(begin_dy, 11) + -290341 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 7) + -0.0346746 *begin_y*lens_ipow(begin_lambda, 10) + -0.394193 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 8) + -0.616356 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6) + 21.6478 *begin_x*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + -7.1867e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 61.7449  + -0.00620699 *begin_dy + 53.4254 *lens_ipow(begin_dy, 2) + 166.667 *lens_ipow(begin_dx, 2) + 1.11534 *begin_y*begin_dy + -0.00159888 *lens_ipow(begin_y, 2) + 3.71266 *begin_x*begin_dx + 3.44221e-05 *begin_x*begin_y*begin_dy + -1.98176 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 0.707743 *lens_ipow(begin_lambda, 5) + -0.000161494 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 2)*begin_lambda + -90221.9 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + -0.159798 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4)*begin_dy + 6.31065e-06 *lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 4) + 4.2464e-12 *lens_ipow(begin_y, 8) + -0.00114401 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 0.000749455 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + 0.00349136 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 4) + -5.99653 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 5) + -327837 *lens_ipow(begin_dx, 10) + 1061.21 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + -1.41367 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + -1.04836 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -1.80466e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 2.28594e-11 *lens_ipow(begin_x, 9)*begin_dx+0.0f;
    dx1_domega0[0][1] =  + -0.00620699 *begin_dx + 106.851 *begin_dx*begin_dy + 1.11534 *begin_y*begin_dx + 1.30413 *begin_x*begin_dy + 3.44221e-05 *begin_x*begin_y*begin_dx + -1.98176 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + -0.000322988 *lens_ipow(begin_x, 4)*begin_dx*begin_dy*begin_lambda + -25777.7 *lens_ipow(begin_dx, 7)*begin_dy + -0.0319596 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 5) + 1.78782e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 2) + -0.00457604 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + -5.07023e-05 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 3) + 636.725 *begin_y*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -2.35612 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + -1.24599 *begin_x*begin_dy*lens_ipow(begin_lambda, 8) + -0.524182 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 2) + -1.2031e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy+0.0f;
    dx1_domega0[1][0] =  + 103.681 *begin_dx*begin_dy + 1.27299 *begin_y*begin_dx + 1.05814 *begin_x*begin_dy + 0.291685 *lens_ipow(begin_dx, 2)*begin_dy + 0.000447567 *begin_x*lens_ipow(begin_y, 2)*begin_dy + -7.11156e-07 *lens_ipow(begin_y, 5)*begin_dx + 0.302942 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 3) + -6.56211e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_lambda, 3) + -150.479 *begin_y*lens_ipow(begin_dx, 7) + -2.21789e-07 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 2) + -1.16137e+06 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 7) + -0.788386 *begin_y*begin_dx*lens_ipow(begin_lambda, 8) + -1.23271 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 6) + 64.9434 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + -1.43734e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_dy, 3)+0.0f;
    dx1_domega0[1][1] =  + 61.7517  + 162.884 *lens_ipow(begin_dy, 2) + 51.8407 *lens_ipow(begin_dx, 2) + 3.64026 *begin_y*begin_dy + 1.05814 *begin_x*begin_dx + -0.00180391 *lens_ipow(begin_x, 2) + 0.0972283 *lens_ipow(begin_dx, 3) + 0.000447567 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 0.698269 *lens_ipow(begin_lambda, 5) + 0.454413 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.00633598 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 3) + 1.93276e-09 *lens_ipow(begin_y, 7)*begin_dy + 1.1384e-12 *lens_ipow(begin_x, 8) + -7.82459 *begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 5) + 6574.73 *lens_ipow(begin_dy, 10) + -2.03239e+06 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 6) + -3.69814 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 86.5912 *begin_x*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + -2.15601e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + 2.19425e-05  + 52.9073 *begin_dx + -0.306395 *begin_x + -15.8883 *begin_dx*lens_ipow(begin_dy, 2) + -24.3203 *lens_ipow(begin_dx, 3) + 0.162736 *begin_y*begin_dx*begin_dy + 0.263571 *begin_x*lens_ipow(begin_dy, 2) + -0.00398067 *begin_x*begin_y*begin_dy + -0.000318567 *begin_x*lens_ipow(begin_y, 2) + -9.77267e-06 *lens_ipow(begin_x, 2)*begin_dy + -0.012026 *lens_ipow(begin_x, 2)*begin_dx + -0.000357596 *lens_ipow(begin_x, 3) + 0.0792932 *begin_x*lens_ipow(begin_lambda, 3) + 8.50345e-09 *begin_x*lens_ipow(begin_y, 3) + 7.76432 *begin_dx*lens_ipow(begin_lambda, 4) + 0.000427785 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.000818465 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -3.07696e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -0.000994446 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 3) + 1403.52 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + -11.3435 *begin_x*lens_ipow(begin_dy, 6) + 0.0038454 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4) + -2.5206e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dy*lens_ipow(begin_lambda, 2) + 20527 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6) + 3751.7 *lens_ipow(begin_dx, 9) + -2.00412e-11 *lens_ipow(begin_y, 8)*begin_dx + -1.27612e-12 *begin_x*lens_ipow(begin_y, 8) + -1.51493e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + -7.85948e-13 *lens_ipow(begin_x, 9) + -1.37203e-05 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4)*begin_lambda + -6.90645e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 3) + -33.2699 *begin_dx*lens_ipow(begin_lambda, 10) + -66.2609 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 8) + -36.3981 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 8) + -0.419884 *begin_x*lens_ipow(begin_lambda, 10) + 0.0658889 *begin_x*begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + 3.06616e-08 *begin_x*lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 4) + 0.295963 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -3.17365e-06 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 2.76606e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 4);
    out[1] =  + -0.000137081  + 52.7629 *begin_dy + -0.00167567 *begin_dx + -0.312299 *begin_y + -2.2853e-05 *begin_x + -9.46529 *lens_ipow(begin_dy, 3) + -8.02277 *lens_ipow(begin_dx, 2)*begin_dy + 0.062463 *begin_y*lens_ipow(begin_lambda, 2) + 0.646762 *begin_y*lens_ipow(begin_dy, 2) + 0.397963 *begin_y*lens_ipow(begin_dx, 2) + -0.000317589 *lens_ipow(begin_y, 3) + 0.322632 *begin_x*begin_dx*begin_dy + -0.000317588 *lens_ipow(begin_x, 2)*begin_y + -0.00404451 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 6.60074e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.10098e-07 *lens_ipow(begin_x, 3)*begin_dy + 7.44775 *begin_dy*lens_ipow(begin_lambda, 4) + -0.0255707 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.0126939 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 0.000637511 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2) + 1.15502e-06 *lens_ipow(begin_x, 4)*begin_dy + -0.0917648 *begin_y*lens_ipow(begin_lambda, 6) + -7.68566 *begin_y*lens_ipow(begin_dx, 6) + -6.48807e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3) + 4.73822e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + -0.00649975 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 4) + -6.17313e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + -20.8179 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 5) + 4059.64 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5)*begin_lambda + -24.2845 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 4) + -2.04223e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -8.41834e-13 *lens_ipow(begin_x, 8)*begin_y + -31.7692 *begin_dy*lens_ipow(begin_lambda, 10) + 41377.8 *lens_ipow(begin_dy, 11) + 239373 *lens_ipow(begin_dx, 8)*lens_ipow(begin_dy, 3) + -12.2081 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + 0.0983613 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 2) + -2.08845e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_lambda, 4) + -1.77115e-15 *lens_ipow(begin_y, 11) + -1.51188e-09 *begin_x*lens_ipow(begin_y, 7)*begin_dx*lens_ipow(begin_dy, 2);
    out[2] =  + -0.56295 *begin_dx + -0.0155829 *begin_x + 0.104956 *begin_dx*lens_ipow(begin_dy, 2) + 0.179396 *lens_ipow(begin_dx, 3) + -0.00228854 *begin_x*lens_ipow(begin_dy, 2) + 2.03873e-06 *begin_x*lens_ipow(begin_y, 2) + 2.26731e-06 *lens_ipow(begin_x, 3) + 0.000109227 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 0.000137151 *lens_ipow(begin_x, 2)*begin_dx*begin_lambda + 0.000353448 *begin_x*lens_ipow(begin_lambda, 4) + 1.1983e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -1.18216e-10 *begin_x*lens_ipow(begin_y, 5)*begin_dy + 5.71321e-12 *lens_ipow(begin_x, 7)*lens_ipow(begin_lambda, 3) + 1.11274 *begin_y*lens_ipow(begin_dx, 5)*begin_dy*lens_ipow(begin_lambda, 4);
    out[3] =  + -0.56519 *begin_dy + -0.0155891 *begin_y + -1.74736e-07 *begin_x + 0.00778184 *begin_dy*lens_ipow(begin_lambda, 2) + 0.151137 *lens_ipow(begin_dy, 3) + 0.105552 *lens_ipow(begin_dx, 2)*begin_dy + -0.00243562 *begin_y*lens_ipow(begin_dx, 2) + 8.11353e-05 *lens_ipow(begin_y, 2)*begin_dy + 2.47342e-06 *lens_ipow(begin_y, 3) + 3.08161e-05 *lens_ipow(begin_x, 2)*begin_dy + 2.37184e-06 *lens_ipow(begin_x, 2)*begin_y + 0.000444725 *begin_y*lens_ipow(begin_lambda, 5) + 5.8178e-05 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 3) + -0.00492669 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -2.53778e-10 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -1.73771e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -2.12763e-06 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 5) + 1.03051e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy + -2.57585e-13 *lens_ipow(begin_x, 7)*begin_y*begin_dx;
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0155829  + -0.00228854 *lens_ipow(begin_dy, 2) + 2.03873e-06 *lens_ipow(begin_y, 2) + 6.80194e-06 *lens_ipow(begin_x, 2) + 0.000274302 *begin_x*begin_dx*begin_lambda + 0.000353448 *lens_ipow(begin_lambda, 4) + 3.59491e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -1.18216e-10 *lens_ipow(begin_y, 5)*begin_dy + 3.99924e-11 *lens_ipow(begin_x, 6)*lens_ipow(begin_lambda, 3)+0.0f;
    domega2_dx0[0][1] =  + 4.07747e-06 *begin_x*begin_y + 0.000218454 *begin_y*begin_dx*begin_lambda + 2.39661e-09 *lens_ipow(begin_x, 3)*begin_y + -5.91081e-10 *begin_x*lens_ipow(begin_y, 4)*begin_dy + 1.11274 *lens_ipow(begin_dx, 5)*begin_dy*lens_ipow(begin_lambda, 4)+0.0f;
    domega2_dx0[1][0] =  + -1.74736e-07  + 6.16322e-05 *begin_x*begin_dy + 4.74369e-06 *begin_x*begin_y + 0.000116356 *begin_x*begin_dy*lens_ipow(begin_lambda, 3) + -2.53778e-10 *lens_ipow(begin_y, 5)*begin_dx + 3.09154e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*begin_dy + -1.8031e-12 *lens_ipow(begin_x, 6)*begin_y*begin_dx+0.0f;
    domega2_dx0[1][1] =  + -0.0155891  + -0.00243562 *lens_ipow(begin_dx, 2) + 0.000162271 *begin_y*begin_dy + 7.42025e-06 *lens_ipow(begin_y, 2) + 2.37184e-06 *lens_ipow(begin_x, 2) + 0.000444725 *lens_ipow(begin_lambda, 5) + -0.00492669 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -1.26889e-09 *begin_x*lens_ipow(begin_y, 4)*begin_dx + -5.21314e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -8.51052e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 5) + 4.12205e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -2.57585e-13 *lens_ipow(begin_x, 7)*begin_dx+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.167239  + 0.292582 *begin_lambda + -2.56885e-05 *begin_dx + 6.09359e-08 *begin_y + -4.92382e-07 *begin_x + -0.033729 *lens_ipow(begin_dy, 2) + -0.0293781 *lens_ipow(begin_dx, 2) + -8.34256e-06 *lens_ipow(begin_y, 2) + -9.68285e-06 *lens_ipow(begin_x, 2) + -0.23749 *lens_ipow(begin_lambda, 3) + -0.00276445 *begin_y*begin_dy*begin_lambda + 2.06559e-05 *begin_y*lens_ipow(begin_dx, 2) + -0.002689 *begin_x*begin_dx*begin_lambda + 2.68089e-07 *lens_ipow(begin_x, 2)*begin_dy + -8.71852e-09 *lens_ipow(begin_y, 4) + -2.49961e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 1.47464e-08 *lens_ipow(begin_x, 3)*begin_dy + -1.18139e-08 *lens_ipow(begin_x, 4) + -0.114824 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -0.146725 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -2.00262e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -0.000567243 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -2.77985e-07 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + 0.0765178 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.000257263 *begin_x*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -0.000718798 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 3.52859e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 0.0571956 *begin_x*lens_ipow(begin_dx, 5)*begin_lambda + 1.60915e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -0.00147366 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 6) + 0.000204859 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -4.08857e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 6) + 7.4949e-12 *lens_ipow(begin_x, 6)*begin_y*begin_dy + -0.00160834 *begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 5) + -1.0058e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2)*begin_lambda + -1.53872e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dx*begin_dy + -2.81144e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.431642 *lens_ipow(begin_lambda, 11) + 4.59538 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 7) + 3.05745 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 7);
else
  out[4] = 0.0f;
