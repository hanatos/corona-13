const float dx00 =  + 0.590865  + 6.94731e-06 *y + 4.79859e-06 *x + 1.03501 *lens_ipow(dy, 2) + -0.000629516 *dx*dy + 3.78078 *lens_ipow(dx, 2) + 0.0773786 *y*dy + 0.00113911 *lens_ipow(y, 2) + 0.243793 *x*dx + 1.07186e-06 *x*y + 0.00338034 *lens_ipow(x, 2) + 1.03302e-05 *lens_ipow(y, 2)*dx + -0.075106 *lens_ipow(lambda, 4) + 0.112328 *lens_ipow(dy, 4) + -3.78744e-05 *x*y*dx*dy + 0.000864175 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 3.84125e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.0786e-06 *lens_ipow(x, 4) + -2.70093e-06 *lens_ipow(x, 2)*y*lens_ipow(lambda, 2) + 4.80858e-07 *lens_ipow(x, 5)*dx + 1.3095e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 4.29905e-12 *lens_ipow(y, 8) + -5.87135e-07 *lens_ipow(x, 5)*y*dx*dy + 3.48272e-12 *lens_ipow(x, 8)*y + 0.359032 *lens_ipow(lambda, 10) + 1.54873e-07 *x*lens_ipow(y, 6)*dx*lens_ipow(dy, 2) + 3.26088e-12 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const float dx01 =  + 4.34706e-06  + 0.000107017 *dx + 7.20188e-06 *y + 6.94731e-06 *x + 2.72925 *dx*dy + 0.0887892 *y*dx + 0.0773786 *x*dy + 0.00227822 *x*y + 5.35929e-07 *lens_ipow(x, 2) + -0.0121689 *lens_ipow(dx, 2)*dy + 2.06604e-05 *x*y*dx + -1.89372e-05 *lens_ipow(x, 2)*dx*dy + 2.56083e-07 *lens_ipow(x, 3)*y + -9.00309e-07 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + 1.3095e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + 3.43924e-11 *x*lens_ipow(y, 7) + -9.78558e-08 *lens_ipow(x, 6)*dx*dy + 3.86969e-13 *lens_ipow(x, 9) + 4.64619e-07 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 3.91305e-12 *lens_ipow(x, 5)*lens_ipow(y, 5)+0.0f;
const float dx02 =  + 33.0198  + 0.000107017 *y + 28.7241 *lens_ipow(dy, 2) + 86.3086 *lens_ipow(dx, 2) + 2.72925 *y*dy + 0.0443946 *lens_ipow(y, 2) + -0.000629516 *x*dy + 7.56156 *x*dx + 0.121896 *lens_ipow(x, 2) + -0.0243377 *y*dx*dy + 1.03302e-05 *x*lens_ipow(y, 2) + -1.89372e-05 *lens_ipow(x, 2)*y*dy + -2.21332 *lens_ipow(lambda, 5) + 8.0143e-08 *lens_ipow(x, 6) + -9.78558e-08 *lens_ipow(x, 6)*y*dy + 8.87442 *lens_ipow(lambda, 10) + 7.74365e-08 *lens_ipow(x, 2)*lens_ipow(y, 6)*lens_ipow(dy, 2)+0.0f;
const float dx03 =  + -0.0122488 *dy + 57.4482 *dx*dy + 2.72925 *y*dx + 2.07003 *x*dy + -0.000629516 *x*dx + 0.0773786 *x*y + -0.0121689 *y*lens_ipow(dx, 2) + 0.449312 *x*lens_ipow(dy, 3) + -1.89372e-05 *lens_ipow(x, 2)*y*dx + 0.000576116 *lens_ipow(x, 3)*dy + 4.365e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + -9.78558e-08 *lens_ipow(x, 6)*y*dx + 1.54873e-07 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy+0.0f;
const float dx04 =  + -0.300424 *x*lens_ipow(lambda, 3) + -11.0666 *dx*lens_ipow(lambda, 4) + -1.80062e-06 *lens_ipow(x, 3)*y*lambda + 4.365e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + 88.7442 *dx*lens_ipow(lambda, 9) + 3.59032 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + 5.99218e-06  + 3.71186e-06 *y + 2.73214 *dx*dy + 2.9143e-05 *y*dy + 0.0776132 *y*dx + 9.04475e-07 *lens_ipow(y, 2) + 0.0891507 *x*dy + 0.00228643 *x*y + -0.000251576 *lens_ipow(y, 2)*dx*dy + -1.09881e-07 *x*lens_ipow(y, 3) + 1.51681e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00117102 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -0.00013509 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 4) + 0.00159912 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.19822e-06 *lens_ipow(x, 4)*y*dx*lens_ipow(lambda, 2) + 7.5768e-08 *lens_ipow(x, 6)*dx*dy + 4.55903e-11 *lens_ipow(x, 7)*y + 2.06753e-08 *x*lens_ipow(y, 6)*dy*lambda + 1.23698e-12 *x*lens_ipow(y, 9) + -1.95835e-08 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy + 0.00297183 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 4.42775e-12 *lens_ipow(x, 5)*lens_ipow(y, 5)+0.0f;
const float dx11 =  + 0.592062  + 0.000153303 *dx + 3.71186e-06 *x + 3.76492 *lens_ipow(dy, 2) + 1.04157 *lens_ipow(dx, 2) + 0.243773 *y*dy + 0.00341793 *lens_ipow(y, 2) + 2.9143e-05 *x*dy + 0.0776132 *x*dx + 1.80895e-06 *x*y + 0.00114321 *lens_ipow(x, 2) + -0.0476118 *lens_ipow(lambda, 3) + 0.0873411 *lens_ipow(dx, 4) + 0.000426288 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.09634e-07 *lens_ipow(y, 4) + -0.000503152 *x*y*dx*dy + -1.64821e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.27521e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000390339 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -0.00013509 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 4) + 0.00239868 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.39644e-07 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 2) + 5.69878e-12 *lens_ipow(x, 8) + 6.2026e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lambda + 0.246937 *lens_ipow(lambda, 10) + 5.56641e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + -3.9167e-08 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + 0.00148592 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 3.68979e-12 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const float dx12 =  + 0.00400811 *dx + 0.000153303 *y + 57.6535 *dx*dy + 2.08315 *y*dx + 2.73214 *x*dy + 0.0776132 *x*y + 0.349364 *y*lens_ipow(dx, 3) + 0.000284192 *lens_ipow(y, 3)*dx + -0.000251576 *x*lens_ipow(y, 2)*dy + -0.000390339 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 0.00159912 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 2.39644e-07 *lens_ipow(x, 5)*y*lens_ipow(lambda, 2) + 1.0824e-08 *lens_ipow(x, 7)*dy + -6.52784e-09 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy + 0.00148592 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3)+0.0f;
const float dx13 =  + 33.028  + 85.8108 *lens_ipow(dy, 2) + 28.8268 *lens_ipow(dx, 2) + 7.52983 *y*dy + 0.121886 *lens_ipow(y, 2) + 2.73214 *x*dx + 2.9143e-05 *x*y + 0.0445754 *lens_ipow(x, 2) + -1.26068 *lens_ipow(lambda, 4) + -0.000251576 *x*lens_ipow(y, 2)*dx + 1.51681e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.000780678 *lens_ipow(x, 3)*y*dx*dy + -6.75449e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 4) + 0.00159912 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 1.0824e-08 *lens_ipow(x, 7)*dx + 1.03377e-08 *lens_ipow(x, 2)*lens_ipow(y, 6)*lambda + 5.96074 *lens_ipow(lambda, 10) + -6.52784e-09 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + 0.00222887 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const float dx14 =  + -0.142836 *y*lens_ipow(lambda, 2) + -5.04272 *dy*lens_ipow(lambda, 3) + -0.000270179 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy*lens_ipow(lambda, 3) + 4.79288e-07 *lens_ipow(x, 5)*y*dx*lambda + 1.03377e-08 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy + 59.6074 *dy*lens_ipow(lambda, 9) + 2.46937 *y*lens_ipow(lambda, 9)+0.0f;
const float dx20 =  + -0.0310928  + -0.0223645 *lens_ipow(dy, 2) + -0.076129 *lens_ipow(dx, 2) + 0.00119072 *y*dy + 2.75323e-05 *lens_ipow(y, 2) + 0.00280348 *x*dx + 1.33606e-07 *x*y + 8.33054e-05 *lens_ipow(x, 2) + -0.00643498 *lens_ipow(lambda, 4) + 0.000988239 *y*lens_ipow(dx, 2)*dy + 0.314136 *lens_ipow(dy, 6) + 7.31978e-09 *lens_ipow(y, 5)*dy + 1.61367e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -0.0183113 *x*dx*lens_ipow(dy, 4)*lambda + 2.69194e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 2.2842e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2)*lambda + 0.0734845 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 4.13827e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + -0.00079535 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.00145904 *lens_ipow(x, 3)*lens_ipow(dx, 5)*lambda + 0.0317773 *lens_ipow(lambda, 10) + 7.46485e-12 *x*lens_ipow(y, 8)*dx + -2.35819e-09 *lens_ipow(x, 6)*lens_ipow(lambda, 4) + -8.73328e-10 *lens_ipow(x, 7)*y*dx*dy + -5.60673e-10 *lens_ipow(x, 8)*lens_ipow(dx, 2) + 5.77433e-13 *lens_ipow(x, 8)*lens_ipow(y, 2) + 8.85979e-14 *lens_ipow(x, 10)+0.0f;
const float dx21 =  + -3.91902e-07  + -0.0544335 *dx*dy + 0.000363045 *y*dx + 0.00119072 *x*dy + 5.50646e-05 *x*y + 6.68032e-08 *lens_ipow(x, 2) + 0.000988239 *x*lens_ipow(dx, 2)*dy + -0.0434831 *y*lens_ipow(dx, 5) + 3.65989e-08 *x*lens_ipow(y, 4)*dy + 8.06836e-08 *lens_ipow(x, 4)*y*dx + 2.69194e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + 8.27655e-11 *lens_ipow(x, 3)*lens_ipow(y, 5) + -0.00079535 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -3.14508 *dx*lens_ipow(dy, 5)*lens_ipow(lambda, 4) + 2.98594e-11 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + -1.09166e-10 *lens_ipow(x, 8)*dx*dy + 1.28318e-13 *lens_ipow(x, 9)*y+0.0f;
const float dx22 =  + -0.0430707  + -3.21064 *lens_ipow(dy, 2) + -9.63571 *lens_ipow(dx, 2) + -0.0544335 *y*dy + 0.000181522 *lens_ipow(y, 2) + -0.152258 *x*dx + 0.00140174 *lens_ipow(x, 2) + -0.182264 *lens_ipow(lambda, 3) + 0.00197648 *x*y*dx*dy + -0.108708 *lens_ipow(y, 2)*lens_ipow(dx, 4) + 4.03418e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.00915566 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + 665.84 *lens_ipow(dx, 8) + 0.0979793 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000397675 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.0018238 *lens_ipow(x, 4)*lens_ipow(dx, 4)*lambda + 0.975594 *lens_ipow(lambda, 10) + 13307 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -3.14508 *y*lens_ipow(dy, 5)*lens_ipow(lambda, 4) + 3.73242e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + -1.09166e-10 *lens_ipow(x, 8)*y*dy + -1.24594e-10 *lens_ipow(x, 9)*dx+0.0f;
const float dx23 =  + -6.42128 *dx*dy + -0.0544335 *y*dx + -0.044729 *x*dy + 0.00119072 *x*y + 0.000988239 *x*y*lens_ipow(dx, 2) + 1.88482 *x*lens_ipow(dy, 5) + 7.31978e-09 *x*lens_ipow(y, 5) + -0.0366226 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lambda + 8.97312e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + 9.13682e-08 *lens_ipow(x, 5)*dy*lambda + 0.0489897 *lens_ipow(x, 3)*lens_ipow(dx, 4)*dy + -0.00079535 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 3) + 3802 *lens_ipow(dx, 7)*dy*lens_ipow(lambda, 2) + -15.7254 *y*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -1.09166e-10 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx24 =  + -0.546791 *dx*lens_ipow(lambda, 2) + -0.0257399 *x*lens_ipow(lambda, 3) + -0.00915566 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4) + 8.97312e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + 4.56841e-08 *lens_ipow(x, 5)*lens_ipow(dy, 2) + -0.00119302 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00036476 *lens_ipow(x, 4)*lens_ipow(dx, 5) + 9.75594 *dx*lens_ipow(lambda, 9) + 3802 *lens_ipow(dx, 7)*lens_ipow(dy, 2)*lambda + -12.5803 *y*dx*lens_ipow(dy, 5)*lens_ipow(lambda, 3) + 0.317773 *x*lens_ipow(lambda, 9) + -1.34753e-09 *lens_ipow(x, 7)*lens_ipow(lambda, 3)+0.0f;
const float dx30 =  + 3.38804e-07  + -0.0539869 *dx*dy + 0.00120299 *y*dx + 0.000395888 *x*dy + 5.52642e-05 *x*y + 0.00101406 *y*dx*lens_ipow(dy, 2) + 9.78031e-10 *lens_ipow(y, 4) + -0.0395968 *x*lens_ipow(dy, 5) + -1.86505e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -5.034e-05 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lambda + 1.16009e-07 *x*lens_ipow(y, 4)*dy*lambda + -1.12065e-08 *x*lens_ipow(y, 5)*lens_ipow(dx, 2) + -0.00176827 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.55347e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 5.37348e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + 3.01687e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + -1.09944e-10 *lens_ipow(y, 8)*dx*dy + -0.00134861 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + 1.22996e-13 *x*lens_ipow(y, 9)+0.0f;
const float dx31 =  + -0.031091  + 6.15983e-06 *dx + -0.0762984 *lens_ipow(dy, 2) + -0.0224616 *lens_ipow(dx, 2) + 0.00277745 *y*dy + 8.23777e-05 *lens_ipow(y, 2) + 0.00120299 *x*dx + 2.76321e-05 *lens_ipow(x, 2) + -0.00634061 *lens_ipow(lambda, 4) + 0.00101406 *x*dx*lens_ipow(dy, 2) + 3.91212e-09 *x*lens_ipow(y, 3) + 0.441651 *lens_ipow(dx, 6) + -0.150228 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -4.66264e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.00010068 *x*y*lens_ipow(dx, 3)*dy*lambda + 2.32018e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -0.000799124 *lens_ipow(y, 3)*lens_ipow(dy, 5) + -4.32034e-08 *lens_ipow(y, 6)*lens_ipow(dy, 2) + -2.80161e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2) + -6.21387e-08 *lens_ipow(x, 5)*y*dx*dy + 2.68674e-11 *lens_ipow(x, 6)*lens_ipow(y, 2) + 3.01687e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 3) + 0.0306743 *lens_ipow(lambda, 10) + 5.90719e-14 *lens_ipow(y, 10) + -8.79552e-10 *x*lens_ipow(y, 7)*dx*dy + -0.00134861 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + 5.53481e-13 *lens_ipow(x, 2)*lens_ipow(y, 8)+0.0f;
const float dx32 =  + 6.15983e-06 *y + -6.38725 *dx*dy + -0.0449231 *y*dx + -0.0539869 *x*dy + 0.00120299 *x*y + 0.00101406 *x*y*lens_ipow(dy, 2) + 2.64991 *y*lens_ipow(dx, 5) + -0.150228 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -9.32527e-07 *lens_ipow(x, 4)*y*dx + -0.00015102 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda + -1.12065e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx + -0.000884134 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3) + -3.10694e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy + 1.00562e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 3) + 24695.2 *dx*lens_ipow(dy, 9) + 15836.4 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -1.09944e-10 *x*lens_ipow(y, 8)*dy + -0.00134861 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 4)+0.0f;
const float dx33 =  + -0.0438014  + -9.56569 *lens_ipow(dy, 2) + -3.19362 *lens_ipow(dx, 2) + -0.152597 *y*dy + 0.00138872 *lens_ipow(y, 2) + -0.0539869 *x*dx + 0.000197944 *lens_ipow(x, 2) + -0.181453 *lens_ipow(lambda, 3) + 0.00202811 *x*y*dx*dy + -0.225341 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.098992 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -5.034e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + 5.80044e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + -0.000998905 *lens_ipow(y, 4)*lens_ipow(dy, 4) + -1.23438e-08 *lens_ipow(y, 7)*dy + -0.0013262 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.10694e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 0.966882 *lens_ipow(lambda, 10) + 111128 *lens_ipow(dx, 2)*lens_ipow(dy, 8) + 7918.18 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.09944e-10 *x*lens_ipow(y, 8)*dx + -0.000674305 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx34 =  + -0.54436 *dy*lens_ipow(lambda, 2) + -0.0253625 *y*lens_ipow(lambda, 3) + -5.034e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 5.80044e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + 3.01687e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + 9.66882 *dy*lens_ipow(lambda, 9) + 5278.79 *lens_ipow(dx, 6)*lens_ipow(dy, 3)*lambda + 0.306743 *y*lens_ipow(lambda, 9) + -0.00269722 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx40 =  + -8.97658e-08  + -7.0025e-06 *dy + -0.00150093 *dx + -2.4183e-07 *y + -4.21378e-05 *x + -0.0145451 *dx*lens_ipow(dy, 2) + -0.000609004 *y*dx*dy + -0.000216516 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 1.30942e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -5.28564e-09 *x*lens_ipow(y, 4) + 6.59532e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -7.62817e-09 *lens_ipow(x, 3)*lens_ipow(y, 2) + -4.05717e-09 *lens_ipow(x, 5) + 0.215885 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.00149846 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00079133 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 3) + -0.000266625 *lens_ipow(x, 3)*lens_ipow(dy, 4) + 3.35413e-07 *lens_ipow(x, 4)*y*dx*dy + 0.00503066 *lens_ipow(y, 3)*lens_ipow(dx, 5)*dy + 2.96613e-05 *lens_ipow(y, 4)*dx*lens_ipow(dy, 4) + 9.04654e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + 0.000276477 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*dy+0.0f;
const float dx41 =  + -0.00151568 *dy + -4.50782e-05 *y + -2.4183e-07 *x + -0.0146816 *lens_ipow(dx, 2)*dy + -0.000609004 *x*dx*dy + 2.67618e-05 *y*lens_ipow(dx, 2)*lambda + 3.6767e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.000433032 *x*y*lens_ipow(dx, 3) + 1.30942e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -1.05713e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + -3.81409e-09 *lens_ipow(x, 4)*y + -3.38929e-11 *lens_ipow(y, 7) + 0.215885 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.00149846 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000263777 *lens_ipow(x, 3)*dx*lens_ipow(dy, 3) + 6.70826e-08 *lens_ipow(x, 5)*dx*dy + -0.00614061 *lens_ipow(y, 3)*lens_ipow(dx, 6) + 0.015092 *x*lens_ipow(y, 2)*lens_ipow(dx, 5)*dy + 0.000118645 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 4) + 1.50776e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy + 6.91193e-05 *lens_ipow(x, 4)*lens_ipow(dx, 4)*dy+0.0f;
const float dx42 =  + 1.50159e-05  + -2.93414e-05 *dy + -0.0727277 *dx + -0.00150093 *x + -0.957276 *dx*lens_ipow(dy, 2) + -0.0293632 *y*dx*dy + -0.0145451 *x*lens_ipow(dy, 2) + -0.000609004 *x*y*dy + 2.67618e-05 *lens_ipow(y, 2)*dx*lambda + -5.85609 *lens_ipow(dx, 5) + -0.000649549 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.29766e-06 *lens_ipow(x, 4)*dx + 0.647656 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00149846 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.000263777 *lens_ipow(x, 3)*y*lens_ipow(dy, 3) + 6.70826e-08 *lens_ipow(x, 5)*y*dy + -0.00921092 *lens_ipow(y, 4)*lens_ipow(dx, 5) + 0.0251533 *x*lens_ipow(y, 3)*lens_ipow(dx, 4)*dy + 2.96613e-05 *x*lens_ipow(y, 4)*lens_ipow(dy, 4) + 3.01551e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy + 0.000276477 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*dy+0.0f;
const float dx43 =  + -0.0718117 *dy + -2.93414e-05 *dx + -0.00151568 *y + -7.0025e-06 *x + -0.957276 *lens_ipow(dx, 2)*dy + -0.0146816 *y*lens_ipow(dx, 2) + -0.0290902 *x*dx*dy + -0.000609004 *x*y*dx + -3.76699 *lens_ipow(dy, 5) + 1.83835e-06 *lens_ipow(y, 4)*dy + 1.30942e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 0.647656 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.00149846 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.00079133 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 2) + -0.000266625 *lens_ipow(x, 4)*lens_ipow(dy, 3) + 6.70826e-08 *lens_ipow(x, 5)*y*dx + 0.00503066 *x*lens_ipow(y, 3)*lens_ipow(dx, 5) + 0.000118645 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 3) + 3.01551e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx + 6.91193e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 4)+0.0f;
const float dx44 =  + 0.28406  + -0.712442 *lens_ipow(lambda, 2) + 1.33809e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 4.73458 *lens_ipow(lambda, 10)+0.0f;
