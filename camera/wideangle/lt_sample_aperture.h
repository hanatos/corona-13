//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + -1.45977e-05  + 33.0198 *begin_dx + 4.34706e-06 *begin_y + 0.590865 *begin_x + -0.00612442 *lens_ipow(begin_dy, 2) + 0.000107017 *begin_y*begin_dx + 3.60094e-06 *lens_ipow(begin_y, 2) + 6.94731e-06 *begin_x*begin_y + 2.39929e-06 *lens_ipow(begin_x, 2) + 28.7241 *begin_dx*lens_ipow(begin_dy, 2) + 28.7695 *lens_ipow(begin_dx, 3) + 2.72925 *begin_y*begin_dx*begin_dy + 0.0443946 *lens_ipow(begin_y, 2)*begin_dx + 1.03501 *begin_x*lens_ipow(begin_dy, 2) + -0.000629516 *begin_x*begin_dx*begin_dy + 3.78078 *begin_x*lens_ipow(begin_dx, 2) + 0.0773786 *begin_x*begin_y*begin_dy + 0.00113911 *begin_x*lens_ipow(begin_y, 2) + 0.121896 *lens_ipow(begin_x, 2)*begin_dx + 5.35929e-07 *lens_ipow(begin_x, 2)*begin_y + 0.00112678 *lens_ipow(begin_x, 3) + -0.0121689 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.03302e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.075106 *begin_x*lens_ipow(begin_lambda, 4) + 0.112328 *begin_x*lens_ipow(begin_dy, 4) + -1.89372e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 0.000288058 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 1.28042e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 2.15719e-07 *lens_ipow(begin_x, 5) + -2.21332 *begin_dx*lens_ipow(begin_lambda, 5) + -9.00309e-07 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_lambda, 2) + 8.0143e-08 *lens_ipow(begin_x, 6)*begin_dx + 4.365e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy*begin_lambda + 4.29905e-12 *begin_x*lens_ipow(begin_y, 8) + -9.78558e-08 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy + 3.86969e-13 *lens_ipow(begin_x, 9)*begin_y + 8.87442 *begin_dx*lens_ipow(begin_lambda, 10) + 0.359032 *begin_x*lens_ipow(begin_lambda, 10) + 7.74365e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_dx*lens_ipow(begin_dy, 2) + 6.52176e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 6),
       + -1.27715e-05  + 33.028 *begin_dy + 0.592062 *begin_y + 5.99218e-06 *begin_x + 0.00200405 *lens_ipow(begin_dx, 2) + 0.000153303 *begin_y*begin_dx + 3.71186e-06 *begin_x*begin_y + 28.6036 *lens_ipow(begin_dy, 3) + 28.8268 *lens_ipow(begin_dx, 2)*begin_dy + 3.76492 *begin_y*lens_ipow(begin_dy, 2) + 1.04157 *begin_y*lens_ipow(begin_dx, 2) + 0.121886 *lens_ipow(begin_y, 2)*begin_dy + 0.00113931 *lens_ipow(begin_y, 3) + 2.73214 *begin_x*begin_dx*begin_dy + 2.9143e-05 *begin_x*begin_y*begin_dy + 0.0776132 *begin_x*begin_y*begin_dx + 9.04475e-07 *begin_x*lens_ipow(begin_y, 2) + 0.0445754 *lens_ipow(begin_x, 2)*begin_dy + 0.00114321 *lens_ipow(begin_x, 2)*begin_y + -0.0476118 *begin_y*lens_ipow(begin_lambda, 3) + -1.26068 *begin_dy*lens_ipow(begin_lambda, 4) + 0.0873411 *begin_y*lens_ipow(begin_dx, 4) + 0.000142096 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 2.19267e-08 *lens_ipow(begin_y, 5) + -0.000251576 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -5.49403e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 7.58404e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -0.000390339 *lens_ipow(begin_x, 3)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -6.75449e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 4) + 0.000799558 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 2.39644e-07 *lens_ipow(begin_x, 5)*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + 1.0824e-08 *lens_ipow(begin_x, 7)*begin_dx*begin_dy + 5.69878e-12 *lens_ipow(begin_x, 8)*begin_y + 1.03377e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_dy*begin_lambda + 5.96074 *begin_dy*lens_ipow(begin_lambda, 10) + 0.246937 *begin_y*lens_ipow(begin_lambda, 10) + 6.1849e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + -6.52784e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dx*begin_dy + 0.000742958 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 7.37959e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 5)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 33.0198  + 0.000107017 *begin_y + 28.7241 *lens_ipow(begin_dy, 2) + 86.3086 *lens_ipow(begin_dx, 2) + 2.72925 *begin_y*begin_dy + 0.0443946 *lens_ipow(begin_y, 2) + -0.000629516 *begin_x*begin_dy + 7.56156 *begin_x*begin_dx + 0.121896 *lens_ipow(begin_x, 2) + -0.0243377 *begin_y*begin_dx*begin_dy + 1.03302e-05 *begin_x*lens_ipow(begin_y, 2) + -1.89372e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -2.21332 *lens_ipow(begin_lambda, 5) + 8.0143e-08 *lens_ipow(begin_x, 6) + -9.78558e-08 *lens_ipow(begin_x, 6)*begin_y*begin_dy + 8.87442 *lens_ipow(begin_lambda, 10) + 7.74365e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 2)+0.0f;
    dx1_domega0[0][1] =  + -0.0122488 *begin_dy + 57.4482 *begin_dx*begin_dy + 2.72925 *begin_y*begin_dx + 2.07003 *begin_x*begin_dy + -0.000629516 *begin_x*begin_dx + 0.0773786 *begin_x*begin_y + -0.0121689 *begin_y*lens_ipow(begin_dx, 2) + 0.449312 *begin_x*lens_ipow(begin_dy, 3) + -1.89372e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 0.000576116 *lens_ipow(begin_x, 3)*begin_dy + 4.365e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_lambda + -9.78558e-08 *lens_ipow(begin_x, 6)*begin_y*begin_dx + 1.54873e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_dx*begin_dy+0.0f;
    dx1_domega0[1][0] =  + 0.00400811 *begin_dx + 0.000153303 *begin_y + 57.6535 *begin_dx*begin_dy + 2.08315 *begin_y*begin_dx + 2.73214 *begin_x*begin_dy + 0.0776132 *begin_x*begin_y + 0.349364 *begin_y*lens_ipow(begin_dx, 3) + 0.000284192 *lens_ipow(begin_y, 3)*begin_dx + -0.000251576 *begin_x*lens_ipow(begin_y, 2)*begin_dy + -0.000390339 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dy, 2) + 0.00159912 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + 2.39644e-07 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_lambda, 2) + 1.0824e-08 *lens_ipow(begin_x, 7)*begin_dy + -6.52784e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dy + 0.00148592 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3)+0.0f;
    dx1_domega0[1][1] =  + 33.028  + 85.8108 *lens_ipow(begin_dy, 2) + 28.8268 *lens_ipow(begin_dx, 2) + 7.52983 *begin_y*begin_dy + 0.121886 *lens_ipow(begin_y, 2) + 2.73214 *begin_x*begin_dx + 2.9143e-05 *begin_x*begin_y + 0.0445754 *lens_ipow(begin_x, 2) + -1.26068 *lens_ipow(begin_lambda, 4) + -0.000251576 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 1.51681e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -0.000780678 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_dy + -6.75449e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + 0.00159912 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + 1.0824e-08 *lens_ipow(begin_x, 7)*begin_dx + 1.03377e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_lambda + 5.96074 *lens_ipow(begin_lambda, 10) + -6.52784e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dx + 0.00222887 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + -0.000310249  + 15.983 *begin_dx + -1.82627 *begin_x + 0.000854024 *begin_y*begin_dx + 28.0752 *begin_dx*lens_ipow(begin_dy, 2) + 27.6115 *lens_ipow(begin_dx, 3) + 1.58758 *begin_y*begin_dx*begin_dy + 0.0523987 *lens_ipow(begin_y, 2)*begin_dx + 1.44199e-06 *lens_ipow(begin_y, 3) + 0.859651 *begin_x*lens_ipow(begin_dy, 2) + 2.4542 *begin_x*lens_ipow(begin_dx, 2) + 0.0583735 *begin_x*begin_y*begin_dy + 0.000158755 *begin_x*begin_y*begin_dx + 0.0031524 *begin_x*lens_ipow(begin_y, 2) + 0.11186 *lens_ipow(begin_x, 2)*begin_dx + 0.00320021 *lens_ipow(begin_x, 3) + 0.000929252 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.287397 *begin_x*lens_ipow(begin_lambda, 4) + 1.42363 *begin_x*lens_ipow(begin_dx, 4) + -0.315245 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.00797403 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.010072 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 0.00402744 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 59.486 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 2) + 2.20592 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + 0.00135204 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3) + 1.93719e-05 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + -0.899481 *begin_x*begin_y*lens_ipow(begin_dy, 5) + -28.9797 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -4.85736 *begin_dx*lens_ipow(begin_lambda, 8) + 1752.5 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6) + 0.0983038 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 4) + -5.77033e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6) + -1.87231e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dx + -3.88332e-10 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2) + -7.29392e-11 *lens_ipow(begin_x, 9) + -605284 *lens_ipow(begin_dx, 9)*lens_ipow(begin_dy, 2) + 1.24533 *begin_x*lens_ipow(begin_lambda, 10) + 8.79015e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + 5.95383e-07 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2);
    out[1] =  + 0.000257696  + 16.0201 *begin_dy + -1.82256 *begin_y + 4.4789e-05 *begin_x + -0.0621616 *lens_ipow(begin_dy, 2) + 0.0225652 *lens_ipow(begin_dx, 2) + 26.2104 *lens_ipow(begin_dy, 3) + 28.1415 *lens_ipow(begin_dx, 2)*begin_dy + 2.54778 *begin_y*lens_ipow(begin_dy, 2) + 0.940597 *begin_y*lens_ipow(begin_dx, 2) + 0.113385 *lens_ipow(begin_y, 2)*begin_dy + 0.00322763 *lens_ipow(begin_y, 3) + 1.6031 *begin_x*begin_dx*begin_dy + 0.0599259 *begin_x*begin_y*begin_dx + 0.0514373 *lens_ipow(begin_x, 2)*begin_dy + 0.00325811 *lens_ipow(begin_x, 2)*begin_y + -0.186441 *begin_y*lens_ipow(begin_lambda, 3) + -1.33388 *begin_y*lens_ipow(begin_dy, 4) + 0.00260526 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -0.146538 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00723343 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.00576635 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + 0.030025 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 2.94253e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + 5.35234 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + -4.00482e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + -0.00472476 *lens_ipow(begin_x, 3)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -2.80148e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3) + -1.44855e-08 *lens_ipow(begin_x, 6)*begin_y + -3.23319 *begin_dy*lens_ipow(begin_lambda, 7) + -27.0863 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -8.48723e-11 *lens_ipow(begin_y, 9) + -0.0291065 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 5) + 0.0659088 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*begin_dy + -4.91574e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dy + -877455 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 9) + 0.880054 *begin_y*lens_ipow(begin_lambda, 10) + 0.575924 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 1.80589e-06 *begin_x*lens_ipow(begin_y, 6)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + 27.6283 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 8);
    out[2] =  + -5.30802e-06  + -0.339988 *begin_dx + -0.0234805 *begin_x + 1.27792e-07 *lens_ipow(begin_y, 2) + 1.05778e-07 *begin_x*begin_y + 0.41412 *begin_dx*lens_ipow(begin_dy, 2) + 0.468461 *lens_ipow(begin_dx, 3) + 0.0128846 *begin_y*begin_dx*begin_dy + 2.73165e-05 *begin_y*lens_ipow(begin_dx, 2) + 0.000175851 *lens_ipow(begin_y, 2)*begin_dx + 0.00768814 *begin_x*lens_ipow(begin_dx, 2) + -0.000225225 *begin_x*begin_y*begin_dy + -9.86015e-06 *begin_x*lens_ipow(begin_y, 2) + -0.000324731 *lens_ipow(begin_x, 2)*begin_dx + 1.18165e-05 *lens_ipow(begin_x, 3) + -0.0219382 *begin_dx*lens_ipow(begin_lambda, 3) + 0.00505966 *begin_x*lens_ipow(begin_lambda, 3) + 0.00338762 *begin_x*lens_ipow(begin_dy, 2)*begin_lambda + -0.0410086 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + -7.99468e-05 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -0.00312758 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.000102466 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -2.12771e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dy + 0.0181023 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -0.000176526 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 4) + 1.15588e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -332.645 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2) + -107.326 *lens_ipow(begin_dx, 9) + 1.85686e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 3) + 0.0030712 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 6) + -1.6719e-09 *lens_ipow(begin_x, 7)*lens_ipow(begin_dy, 2) + -2.70224e-12 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2) + -1.03268e-12 *lens_ipow(begin_x, 9) + 1.09275 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 7) + -4.20637e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_lambda, 5) + 6.11371e-09 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2)*begin_lambda + -0.0274803 *begin_x*lens_ipow(begin_lambda, 10) + -0.300797 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + -1.78428e-05 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 4)*begin_dy + 1.55327e-08 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2);
    out[3] =  + 6.7991e-06  + -0.3394 *begin_dy + 7.91718e-06 *begin_dx + -0.0234193 *begin_y + -0.000458752 *lens_ipow(begin_dy, 2) + -0.000271803 *begin_dx*begin_dy + 0.445768 *lens_ipow(begin_dy, 3) + -0.00481802 *begin_dx*lens_ipow(begin_dy, 2) + 0.47657 *lens_ipow(begin_dx, 2)*begin_dy + 0.00672364 *begin_y*lens_ipow(begin_dy, 2) + -0.00635551 *begin_y*lens_ipow(begin_dx, 2) + -0.000380371 *lens_ipow(begin_y, 2)*begin_dy + 1.04339e-05 *lens_ipow(begin_y, 3) + 0.00698629 *begin_x*begin_dx*begin_dy + 2.60451e-06 *begin_x*begin_y*begin_dy + -0.000159778 *begin_x*begin_y*begin_dx + -0.000385757 *lens_ipow(begin_x, 2)*begin_dy + 3.2724e-05 *lens_ipow(begin_x, 2)*begin_y + -0.019918 *begin_dy*lens_ipow(begin_lambda, 3) + 0.00504652 *begin_y*lens_ipow(begin_lambda, 3) + 3.03038e-05 *begin_x*begin_y*begin_dx*begin_dy + 0.00219344 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 2.785e-06 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.000631056 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 1.495e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + 0.000604946 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + -0.00039787 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + -0.000123592 *lens_ipow(begin_x, 3)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + 2.55486e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 3) + -4.67359e-10 *lens_ipow(begin_x, 6)*begin_y + -8.98971e-13 *lens_ipow(begin_y, 9) + 9.16997e-09 *begin_x*lens_ipow(begin_y, 6)*begin_dx*begin_dy + 1.61859e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + -1.43523e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + 3.67314e-09 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2)*begin_lambda + -19009.3 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 7) + -0.0279742 *begin_y*lens_ipow(begin_lambda, 10) + -0.187182 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 6) + -0.0169279 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 1.84573e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dy;
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0234805  + 1.05778e-07 *begin_y + 0.00768814 *lens_ipow(begin_dx, 2) + -0.000225225 *begin_y*begin_dy + -9.86015e-06 *lens_ipow(begin_y, 2) + -0.000649462 *begin_x*begin_dx + 3.54495e-05 *lens_ipow(begin_x, 2) + 0.00505966 *lens_ipow(begin_lambda, 3) + 0.00338762 *lens_ipow(begin_dy, 2)*begin_lambda + -0.00312758 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.000204932 *begin_x*begin_y*begin_dx*begin_dy + -6.38312e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -0.000529579 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4) + 3.46763e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.00921361 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 6) + -1.17033e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 2) + -1.89157e-11 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2) + -9.29412e-12 *lens_ipow(begin_x, 8) + -2.10319e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_lambda, 5) + 4.27959e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2)*begin_lambda + -0.0274803 *lens_ipow(begin_lambda, 10) + -0.300797 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + -1.78428e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 4)*begin_dy + 9.31965e-08 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2)+0.0f;
    domega2_dx0[0][1] =  + 2.55585e-07 *begin_y + 1.05778e-07 *begin_x + 0.0128846 *begin_dx*begin_dy + 2.73165e-05 *lens_ipow(begin_dx, 2) + 0.000351702 *begin_y*begin_dx + -0.000225225 *begin_x*begin_dy + -1.97203e-05 *begin_x*begin_y + -0.0410086 *lens_ipow(begin_dx, 3)*begin_dy + -0.000159894 *begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -0.00312758 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + -0.000102466 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -2.12771e-06 *lens_ipow(begin_x, 3)*begin_dy + 0.0362047 *begin_y*lens_ipow(begin_dx, 5) + 2.31175e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2) + 1.11412e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3) + -5.40447e-12 *lens_ipow(begin_x, 7)*begin_y + -8.92138e-05 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4)*begin_dy + 1.55327e-08 *lens_ipow(begin_x, 6)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2)+0.0f;
    domega2_dx0[1][0] =  + 0.00698629 *begin_dx*begin_dy + 2.60451e-06 *begin_y*begin_dy + -0.000159778 *begin_y*begin_dx + -0.000771513 *begin_x*begin_dy + 6.54481e-05 *begin_x*begin_y + 3.03038e-05 *begin_y*begin_dx*begin_dy + 2.785e-06 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00126211 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + -0.00039787 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + -0.000370777 *lens_ipow(begin_x, 2)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + 0.000102194 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 3) + -2.80415e-09 *lens_ipow(begin_x, 5)*begin_y + 9.16997e-09 *lens_ipow(begin_y, 6)*begin_dx*begin_dy + 3.23717e-05 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + -5.7409e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5) + -0.0338558 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 3.69147e-12 *begin_x*lens_ipow(begin_y, 8)*begin_dy+0.0f;
    domega2_dx0[1][1] =  + -0.0234193  + 0.00672364 *lens_ipow(begin_dy, 2) + -0.00635551 *lens_ipow(begin_dx, 2) + -0.000760741 *begin_y*begin_dy + 3.13018e-05 *lens_ipow(begin_y, 2) + 2.60451e-06 *begin_x*begin_dy + -0.000159778 *begin_x*begin_dx + 3.2724e-05 *lens_ipow(begin_x, 2) + 0.00504652 *lens_ipow(begin_lambda, 3) + 3.03038e-05 *begin_x*begin_dx*begin_dy + 0.00438687 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 2.785e-06 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 4.48499e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 0.00181484 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -0.00079574 *begin_x*begin_y*lens_ipow(begin_dx, 3)*begin_dy + -0.000123592 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 2) + -4.67359e-10 *lens_ipow(begin_x, 6) + -8.09074e-12 *lens_ipow(begin_y, 8) + 5.50198e-08 *begin_x*lens_ipow(begin_y, 5)*begin_dx*begin_dy + 4.85576e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + -7.17613e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4) + 2.5712e-08 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 2)*begin_lambda + -0.0279742 *lens_ipow(begin_lambda, 10) + -0.187182 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 6) + -0.0169279 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 1.47659e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*begin_dy+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.129885  + 0.248005 *begin_lambda + 3.57585e-05 *begin_dy + -1.40242e-07 *begin_x + -0.068668 *lens_ipow(begin_dy, 2) + -0.0733207 *lens_ipow(begin_dx, 2) + -0.00206827 *begin_y*begin_dy + -2.11968e-05 *lens_ipow(begin_y, 2) + -0.00111004 *begin_x*begin_dx + -2.37676e-05 *lens_ipow(begin_x, 2) + -0.203461 *lens_ipow(begin_lambda, 3) + -0.00279243 *begin_dx*lens_ipow(begin_dy, 3) + 0.00054382 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.0524655 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + -0.0506835 *begin_x*lens_ipow(begin_dx, 3) + -0.00136887 *begin_x*begin_y*begin_dx*begin_dy + -2.33081e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -27.7461 *lens_ipow(begin_dy, 6) + -126.87 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -97.9595 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -30.0263 *lens_ipow(begin_dx, 6) + -2.45605 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.00988784 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + 1.1727e-07 *lens_ipow(begin_y, 5)*begin_dy + 0.0609999 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 3) + 0.0857349 *begin_x*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 1.83636e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -0.00029967 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + 5.8476e-10 *lens_ipow(begin_x, 6) + 0.181625 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 6) + 4.07238e-08 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2) + 1.33942e-05 *begin_x*lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_dy, 2) + -0.0687281 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 6) + -0.00120613 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000215987 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 1.42463e-05 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -1.66406e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 2) + -8.78769e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2) + -0.010715 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 6)*begin_dy + 0.361629 *lens_ipow(begin_lambda, 11);
else
  out[4] = 0.0f;
