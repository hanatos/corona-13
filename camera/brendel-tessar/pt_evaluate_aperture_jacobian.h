const float dx00 =  + 0.746981  + 5.13706e-05 *dy + 0.936703 *lens_ipow(dy, 2) + 2.29645 *lens_ipow(dx, 2) + 0.0233816 *y*dy + 0.000119137 *lens_ipow(y, 2) + 0.0660652 *x*dx + 0.000366441 *lens_ipow(x, 2) + 0.068899 *lens_ipow(lambda, 4) + 0.0193758 *y*lens_ipow(dx, 2)*dy + -6.82309e-06 *x*lens_ipow(y, 2)*dx + 0.987998 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 2.32491e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 0.22315 *x*dx*lens_ipow(dy, 4) + -0.00576252 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 1.81781e-06 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.880001 *lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -2.72853e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -5.45592e-13 *lens_ipow(x, 2)*lens_ipow(y, 6) + -1.54776e-12 *lens_ipow(x, 6)*lens_ipow(y, 2) + -1.90758e-10 *lens_ipow(x, 7)*dx + -0.333992 *lens_ipow(lambda, 10) + -5.06031e-15 *lens_ipow(x, 10)+0.0f;
const float dx01 =  + 1.34532 *dx*dy + 0.0185336 *y*dx + 0.0233816 *x*dy + 0.000238273 *x*y + 0.0193758 *x*lens_ipow(dx, 2)*dy + -6.82309e-06 *lens_ipow(x, 2)*y*dx + -0.0365053 *y*lens_ipow(dx, 5) + 9.23752e-05 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 9.29963e-07 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.72853e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -1.09118e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -4.42216e-13 *lens_ipow(x, 7)*y + -1.1102e-10 *lens_ipow(y, 7)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx02 =  + 81.145  + 0.00409977 *dx + 34.9894 *lens_ipow(dy, 2) + 105.312 *lens_ipow(dx, 2) + 1.34532 *y*dy + 0.00926679 *lens_ipow(y, 2) + 4.59291 *x*dx + 0.0330326 *lens_ipow(x, 2) + 3.4215 *lens_ipow(lambda, 3) + 0.0387516 *x*y*dx*dy + -3.41155e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1488.37 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.0912632 *lens_ipow(y, 2)*lens_ipow(dx, 4) + 2.30938e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 3.95199 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.111575 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -0.00768336 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -2.38448e-11 *lens_ipow(x, 8) + -1613.2 *lens_ipow(dy, 8)*lambda + -18.2434 *lens_ipow(lambda, 10) + -139573 *lens_ipow(dx, 10) + -1.38775e-11 *lens_ipow(y, 8)*lens_ipow(lambda, 2)+0.0f;
const float dx03 =  + 0.000510075  + 0.00372177 *dy + 5.13706e-05 *x + 69.9789 *dx*dy + 1.34532 *y*dx + 1.87341 *x*dy + 0.0233816 *x*y + 0.0193758 *x*y*lens_ipow(dx, 2) + -1984.5 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 4.61876e-05 *lens_ipow(y, 4)*dx*dy + 1.976 *x*lens_ipow(dx, 4)*dy + 4.64981e-07 *x*lens_ipow(y, 4)*dy + 0.4463 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + 7.27122e-07 *lens_ipow(x, 5)*dy + -3.52 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -9.0951e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + -12905.6 *dx*lens_ipow(dy, 7)*lambda+0.0f;
const float dx04 =  + 10.2645 *dx*lens_ipow(lambda, 2) + 0.275596 *x*lens_ipow(lambda, 3) + -3.52 *x*lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -1.81902e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy*lambda + -1613.2 *dx*lens_ipow(dy, 8) + -182.434 *dx*lens_ipow(lambda, 9) + -2.77551e-11 *lens_ipow(y, 8)*dx*lambda + -3.33992 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + 7.57954e-05 *dx + 1.32601 *dx*dy + 2.31934e-05 *y*dy + 0.0232315 *y*dx + 2.2844e-07 *lens_ipow(y, 2) + 0.0181711 *x*dy + 0.000237982 *x*y + 1.2982e-06 *x*y*dx + -0.000211522 *lens_ipow(y, 2)*dx*dy + -0.0180812 *x*lens_ipow(dy, 5) + 5.35405e-07 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -2.77518e-08 *x*lens_ipow(y, 4)*dy + 3.24048e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -3.82933e-06 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + -8.6975e-13 *x*lens_ipow(y, 7) + 0.000724432 *lens_ipow(y, 3)*dx*lens_ipow(dy, 4)*lambda+0.0f;
const float dx11 =  + 0.747254  + 2.26661 *lens_ipow(dy, 2) + 0.930706 *lens_ipow(dx, 2) + 0.065093 *y*dy + 0.00035897 *lens_ipow(y, 2) + 2.31934e-05 *x*dy + 0.0232315 *x*dx + 4.56881e-07 *x*y + 0.000118991 *lens_ipow(x, 2) + 6.49099e-07 *lens_ipow(x, 2)*dx + 0.0684295 *lens_ipow(lambda, 4) + -0.000423045 *x*y*dx*dy + 5.28169 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -4.42287 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.193081 *y*lens_ipow(dy, 5) + 1.11329e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 8.03108e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -5.55037e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.1488e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 3) + -6.2593e-11 *lens_ipow(y, 7)*dy + -3.04413e-12 *lens_ipow(x, 2)*lens_ipow(y, 6) + -6.27521 *lens_ipow(dx, 6)*lens_ipow(lambda, 3) + 0.0021733 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 4)*lambda + -0.335335 *lens_ipow(lambda, 10)+0.0f;
const float dx12 =  + 0.000677621  + 0.00634395 *dy + 7.57954e-05 *x + -0.0383035 *lens_ipow(dy, 2) + 69.0211 *dx*dy + 1.86141 *y*dx + 1.32601 *x*dy + 0.0232315 *x*y + 6.49099e-07 *lens_ipow(x, 2)*y + -0.000211522 *x*lens_ipow(y, 2)*dy + 10.5634 *y*dx*lens_ipow(dy, 4) + -17.6915 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 4.45315e-07 *lens_ipow(y, 5)*dx + 5.35405e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 1.62024e-05 *lens_ipow(x, 4)*dx*dy + -3.82933e-06 *x*lens_ipow(y, 3)*lens_ipow(lambda, 3) + -9058.47 *lens_ipow(dx, 7)*dy + -37.6512 *y*lens_ipow(dx, 5)*lens_ipow(lambda, 3) + 0.000724432 *x*lens_ipow(y, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const float dx13 =  + 81.1717  + 0.00634395 *dx + 103.216 *lens_ipow(dy, 2) + -0.076607 *dx*dy + 34.5105 *lens_ipow(dx, 2) + 4.53323 *y*dy + 0.0325465 *lens_ipow(y, 2) + 1.32601 *x*dx + 2.31934e-05 *x*y + 0.00908557 *lens_ipow(x, 2) + 3.35285 *lens_ipow(lambda, 3) + -0.000211522 *x*lens_ipow(y, 2)*dx + 21.1268 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -8.84573 *y*lens_ipow(dx, 4)*dy + 0.482703 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -0.0452031 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -1.38759e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 8.10121e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -1132.31 *lens_ipow(dx, 8) + -7.82412e-12 *lens_ipow(y, 8) + 0.00289773 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3)*lambda + -17.916 *lens_ipow(lambda, 10) + -175842 *lens_ipow(dy, 10)+0.0f;
const float dx14 =  + 10.0585 *dy*lens_ipow(lambda, 2) + 0.273718 *y*lens_ipow(lambda, 3) + -1.1488e-05 *x*lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + -18.8256 *y*lens_ipow(dx, 6)*lens_ipow(lambda, 2) + 0.000724432 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 4) + -179.16 *dy*lens_ipow(lambda, 9) + -3.35335 *y*lens_ipow(lambda, 9)+0.0f;
const float dx20 =  + 0.00229045  + -8.35738e-08 *y + 0.0557732 *lens_ipow(dy, 2) + 0.156098 *lens_ipow(dx, 2) + 0.00129246 *y*dy + 7.95604e-06 *lens_ipow(y, 2) + 9.01587e-07 *x*dy + 0.00385571 *x*dx + 2.37488e-05 *lens_ipow(x, 2) + 4.13721e-06 *x*lens_ipow(dy, 2) + 0.00149269 *x*dx*lens_ipow(dy, 2) + -2.67909e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00659297 *lens_ipow(lambda, 5) + 2.17352e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -1.50873e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 3) + 7.52734e-08 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.0070876 *lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 0.000105265 *x*y*lens_ipow(dx, 5)*dy + 0.0277843 *lens_ipow(lambda, 10) + 0.00886599 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 6)+0.0f;
const float dx21 =  + -7.19217e-07  + -8.35738e-08 *x + 0.101514 *dx*dy + 0.001271 *y*dx + 0.00129246 *x*dy + 1.59121e-05 *x*y + 0.0014097 *y*lens_ipow(dx, 3) + -1.78606e-09 *lens_ipow(x, 3)*y + 4.34703e-05 *x*y*lens_ipow(dx, 2)*lambda + -5.02909e-07 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 0.000312839 *y*dx*lens_ipow(lambda, 6) + -1.11933e-10 *lens_ipow(y, 6)*dx*dy + 5.26324e-05 *lens_ipow(x, 2)*lens_ipow(dx, 5)*dy+0.0f;
const float dx22 =  + 1.60503  + 0.00057633 *dy + -0.000878414 *dx + 5.19448 *lens_ipow(dy, 2) + 15.2956 *lens_ipow(dx, 2) + 0.101514 *y*dy + 0.000635498 *lens_ipow(y, 2) + 0.312195 *x*dx + 0.00192786 *lens_ipow(x, 2) + -0.361485 *lens_ipow(lambda, 3) + 1.54844 *lens_ipow(dy, 4) + 3.91016 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 10.792 *lens_ipow(dx, 4) + 0.00211455 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000746346 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 4.34703e-05 *x*lens_ipow(y, 2)*dx*lambda + -0.692048 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -45.6867 *lens_ipow(dx, 4)*lens_ipow(lambda, 4) + 0.00015642 *lens_ipow(y, 2)*lens_ipow(lambda, 6) + -1.59905e-11 *lens_ipow(y, 7)*dy + 0.000263162 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*dy + 1.9874 *lens_ipow(lambda, 10) + 0.013299 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 6)+0.0f;
const float dx23 =  + -8.76478e-05  + 0.00057633 *dx + 10.389 *dx*dy + 0.101514 *y*dx + 0.111546 *x*dy + 0.00129246 *x*y + 4.50793e-07 *lens_ipow(x, 2) + 4.13721e-06 *lens_ipow(x, 2)*dy + 6.19377 *dx*lens_ipow(dy, 3) + 2.60677 *lens_ipow(dx, 3)*dy + 0.00149269 *lens_ipow(x, 2)*dx*dy + -1.3841 *dx*dy*lens_ipow(lambda, 4) + -1.50873e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 3.01094e-08 *lens_ipow(x, 5)*dy + -1.59905e-11 *lens_ipow(y, 7)*dx + -0.0141752 *x*dy*lens_ipow(lambda, 6) + 5.26324e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 5)+0.0f;
const float dx24 =  + -1.08446 *dx*lens_ipow(lambda, 2) + -0.0329648 *x*lens_ipow(lambda, 4) + 2.17352e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.76819 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -36.5493 *lens_ipow(dx, 5)*lens_ipow(lambda, 3) + 0.000938518 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 5) + -0.0425256 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 19.874 *dx*lens_ipow(lambda, 9) + 0.277843 *x*lens_ipow(lambda, 9) + 0.026598 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + 4.41826e-08  + 0.101838 *dx*dy + 0.0012907 *y*dx + 0.00131043 *x*dy + 1.59745e-05 *x*y + -0.000162918 *dx*lens_ipow(dy, 2) + 7.13151e-05 *x*dx*lens_ipow(dy, 2) + -0.213293 *lens_ipow(dx, 5)*dy + -4.78504e-12 *x*lens_ipow(y, 5) + -1.16321e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -8.0454e-12 *lens_ipow(x, 5)*y + -2.92774e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -0.125829 *dx*lens_ipow(dy, 7) + -5.80024e-05 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 6) + 2.35176e-07 *lens_ipow(x, 5)*lens_ipow(dy, 5)+0.0f;
const float dx31 =  + 0.00229435  + -7.81744e-08 *y + 0.157882 *lens_ipow(dy, 2) + 6.48594e-05 *dx*dy + 0.0553079 *lens_ipow(dx, 2) + 0.00388859 *y*dy + 2.3764e-05 *lens_ipow(y, 2) + 0.0012907 *x*dx + 7.98725e-06 *lens_ipow(x, 2) + 0.00131598 *y*lens_ipow(dx, 2)*dy + -0.00672378 *lens_ipow(lambda, 5) + 9.63478e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -1.19626e-11 *lens_ipow(x, 2)*lens_ipow(y, 4) + -3.87738e-07 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -1.3409e-12 *lens_ipow(x, 6) + 0.078373 *dx*lens_ipow(dy, 6) + -1.46387e-09 *lens_ipow(x, 4)*y*dy*lambda + -1.61861 *lens_ipow(dy, 8) + 0.0279092 *lens_ipow(lambda, 10) + -0.000116005 *x*y*dx*dy*lens_ipow(lambda, 6)+0.0f;
const float dx32 =  + -1.51258e-05  + 7.0264e-05 *dy + 0.000337168 *dx + 10.5482 *dx*dy + 6.48594e-05 *y*dy + 0.110616 *y*dx + 0.101838 *x*dy + 0.0012907 *x*y + -0.000162918 *x*lens_ipow(dy, 2) + 0.00131598 *lens_ipow(y, 2)*dx*dy + 3.56575e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.15109 *dx*dy*lens_ipow(lambda, 4) + 3.85391e-08 *lens_ipow(y, 5)*dx + -1.06646 *x*lens_ipow(dx, 4)*dy + -1.16321e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 0.078373 *y*lens_ipow(dy, 6) + 1039.18 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + -0.125829 *x*lens_ipow(dy, 7) + -5.80024e-05 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx33 =  + 1.60214  + 7.0264e-05 *dx + 15.9313 *lens_ipow(dy, 2) + 5.27408 *lens_ipow(dx, 2) + 0.315764 *y*dy + 6.48594e-05 *y*dx + 0.0019443 *lens_ipow(y, 2) + 0.101838 *x*dx + 0.000655216 *lens_ipow(x, 2) + -0.367257 *lens_ipow(lambda, 3) + -0.000325836 *x*dx*dy + 0.000657988 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 7.13151e-05 *lens_ipow(x, 2)*dx*dy + -0.575544 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.213293 *x*lens_ipow(dx, 5) + 0.470238 *y*dx*lens_ipow(dy, 5) + -7.31936e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + -22.298 *lens_ipow(dy, 4)*lens_ipow(lambda, 4) + 1298.97 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -12.9489 *y*lens_ipow(dy, 7) + -0.880802 *x*dx*lens_ipow(dy, 6) + 2.07441 *lens_ipow(lambda, 10) + -5.80024e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 6) + 1.9598e-07 *lens_ipow(x, 6)*lens_ipow(dy, 4)+0.0f;
const float dx34 =  + -1.10177 *dy*lens_ipow(lambda, 2) + -0.0336189 *y*lens_ipow(lambda, 4) + -2.30218 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -7.31936e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy + -17.8384 *lens_ipow(dy, 5)*lens_ipow(lambda, 3) + 20.7441 *dy*lens_ipow(lambda, 9) + 0.279092 *y*lens_ipow(lambda, 9) + -0.000348015 *x*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 5)+0.0f;
const float dx40 =  + -3.5542e-07  + -0.00203943 *dx + 1.55522e-07 *y + -2.5897e-05 *x + 0.000169822 *lens_ipow(dy, 3) + 0.000174417 *y*dx*dy + 0.000110783 *x*lens_ipow(dy, 2) + -3.6372e-08 *x*lens_ipow(y, 2) + -4.37205e-06 *lens_ipow(x, 2)*dx + 4.08721e-08 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + 6.05789e-07 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -2.29531e-10 *lens_ipow(x, 5) + 0.190514 *y*dx*lens_ipow(dy, 7) + -0.00670398 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + -7.51972e-05 *lens_ipow(x, 3)*lens_ipow(dy, 6) + 0.0263989 *y*lens_ipow(dx, 5)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx41 =  + 5.1259e-07  + -0.00209618 *dy + 1.16301e-05 *dx + -2.64334e-05 *y + 1.55522e-07 *x + 9.42161e-05 *y*lens_ipow(dx, 2) + -3.67675e-06 *lens_ipow(y, 2)*dy + 0.000174417 *x*dx*dy + -3.6372e-08 *lens_ipow(x, 2)*y + 0.000345479 *dy*lens_ipow(lambda, 4) + 4.08721e-08 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + 1.65864e-05 *y*lens_ipow(lambda, 5) + 1.41924e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -4.28992e-10 *lens_ipow(y, 5)*lambda + 0.190514 *x*dx*lens_ipow(dy, 7) + -0.00335199 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.0263989 *x*lens_ipow(dx, 5)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx42 =  + 0.000647231 *dy + -0.216644 *dx + 1.16301e-05 *y + -0.00203943 *x + -0.00446098 *dx*dy + -1.48512 *dx*lens_ipow(dy, 2) + 9.42161e-05 *lens_ipow(y, 2)*dx + 0.000174417 *x*y*dy + -1.45735e-06 *lens_ipow(x, 3) + -21.2852 *dx*lens_ipow(dy, 4) + -34.7923 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -30.119 *lens_ipow(dx, 5) + 3.02894e-07 *lens_ipow(x, 4)*dx + 0.190514 *x*y*lens_ipow(dy, 7) + -0.013408 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.131995 *x*y*lens_ipow(dx, 4)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx43 =  + 5.19598e-05  + -0.216788 *dy + 0.000647231 *dx + -0.00209618 *y + -0.00223049 *lens_ipow(dx, 2) + -1.48512 *lens_ipow(dx, 2)*dy + -1.22558e-06 *lens_ipow(y, 3) + 0.000509465 *x*lens_ipow(dy, 2) + 0.000174417 *x*y*dx + 0.000110783 *lens_ipow(x, 2)*dy + -31.2899 *lens_ipow(dy, 5) + -42.5704 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -17.3962 *lens_ipow(dx, 4)*dy + 0.000345479 *y*lens_ipow(lambda, 4) + 4.08721e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 7.09621e-07 *lens_ipow(y, 4)*dy*lambda + 1.3336 *x*y*dx*lens_ipow(dy, 6) + -0.010056 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.000112796 *lens_ipow(x, 4)*lens_ipow(dy, 5) + 0.0263989 *x*y*lens_ipow(dx, 5)*lens_ipow(lambda, 3)+0.0f;
const float dx44 =  + 0.165816  + -0.418381 *lens_ipow(lambda, 2) + 0.00138192 *y*dy*lens_ipow(lambda, 3) + 4.14659e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + 3.5481e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -7.14987e-11 *lens_ipow(y, 6) + 2.77787 *lens_ipow(lambda, 10) + 0.0791968 *x*y*lens_ipow(dx, 5)*dy*lens_ipow(lambda, 2)+0.0f;
