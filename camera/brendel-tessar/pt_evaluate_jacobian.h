const float dx00 =  + 0.777701  + -1.58164e-06 *y + 1.24838 *lens_ipow(dy, 2) + 1.65238 *lens_ipow(dx, 2) + 0.0326702 *y*dy + 0.000183725 *lens_ipow(y, 2) + 0.0808174 *x*dx + 0.000557194 *lens_ipow(x, 2) + 0.0212366 *lens_ipow(lambda, 3) + -0.844688 *lens_ipow(dx, 4) + -3.75336e-06 *x*lens_ipow(y, 2)*dx + 0.000498451 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -2.08267 *lens_ipow(dy, 6) + -15.76 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 4.70607e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 3.21855e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 4.91532e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -8.03232e-13 *lens_ipow(x, 2)*lens_ipow(y, 6) + 2.59309e-07 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2) + -1.69826e-12 *lens_ipow(x, 6)*lens_ipow(y, 2) + -0.116906 *lens_ipow(lambda, 10) + -3.16214e-15 *lens_ipow(x, 10)+0.0f;
const float dx01 =  + -1.58164e-06 *x + 0.358522 *dx*dy + 0.014758 *y*dx + 0.0326702 *x*dy + 0.00036745 *x*y + -3.75336e-06 *lens_ipow(x, 2)*y*dx + -0.118074 *y*lens_ipow(dx, 5) + 1.88243e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.53561e-05 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy + 3.27688e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.60646e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -4.85217e-13 *lens_ipow(x, 7)*y + -0.0025228 *y*dx*lens_ipow(lambda, 8)+0.0f;
const float dx02 =  + 99.674  + 0.00644577 *dy + -38.4022 *lens_ipow(dy, 2) + -0.0536715 *dx*dy + -116.214 *lens_ipow(dx, 2) + 0.358522 *y*dy + 0.007379 *lens_ipow(y, 2) + 3.30476 *x*dx + 0.0404087 *lens_ipow(x, 2) + -3.37875 *x*lens_ipow(dx, 3) + -1.87668e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.04551 *lens_ipow(lambda, 5) + 147.939 *lens_ipow(dy, 6) + 4818.57 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.295184 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -31.5201 *x*dx*lens_ipow(dy, 4) + 1.28742e-06 *lens_ipow(x, 5)*dx + 6667.88 *lens_ipow(dx, 8) + -9.21365e-06 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy + 3.27688e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 4.32181e-08 *lens_ipow(x, 6)*lens_ipow(dy, 2) + -8.38332 *lens_ipow(lambda, 10) + -0.0012614 *lens_ipow(y, 2)*lens_ipow(lambda, 8)+0.0f;
const float dx03 =  + 0.000913257  + 0.00284971 *dy + 0.00644577 *dx + -76.8044 *dx*dy + -0.0268357 *lens_ipow(dx, 2) + 0.358522 *y*dx + 2.49676 *x*dy + 0.0326702 *x*y + 0.000332301 *lens_ipow(x, 3)*dy + 887.634 *dx*lens_ipow(dy, 5) + 1927.43 *lens_ipow(dx, 5)*dy + -12.496 *x*lens_ipow(dy, 5) + -63.0401 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 9.41215e-07 *x*lens_ipow(y, 4)*dy + -3.07122e-06 *lens_ipow(y, 5)*lens_ipow(dx, 3) + 3.27688e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 8.64362e-08 *lens_ipow(x, 6)*dx*dy+0.0f;
const float dx04 =  + 0.0637098 *x*lens_ipow(lambda, 2) + 10.2275 *dx*lens_ipow(lambda, 4) + -83.8332 *dx*lens_ipow(lambda, 9) + -0.0100912 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 7) + -1.16906 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + -3.61483e-06 *x + 0.353407 *dx*dy + 4.92663e-06 *y*dy + 0.0326194 *y*dx + 0.014694 *x*dy + 0.000368068 *x*y + 4.84043e-05 *y*dx*dy + -2.96556e-06 *x*lens_ipow(y, 2)*dy + -0.0873701 *x*lens_ipow(dy, 5) + 1.97995e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 2.35725e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.52165e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -7.40131e-13 *lens_ipow(x, 7)*y + -8.01595e-05 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const float dx11 =  + 0.777758  + 2.57782e-05 *dx + -1.55271e-06 *y + 1.6401 *lens_ipow(dy, 2) + 1.25641 *lens_ipow(dx, 2) + 0.0804597 *y*dy + 0.000554223 *lens_ipow(y, 2) + 4.92663e-06 *x*dy + 0.0326194 *x*dx + 0.000184034 *lens_ipow(x, 2) + 0.0212254 *lens_ipow(lambda, 3) + 4.84043e-05 *x*dx*dy + -0.853223 *lens_ipow(dy, 4) + -0.347 *lens_ipow(dx, 4) + 0.000488929 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.96556e-06 *lens_ipow(x, 2)*y*dy + 9.61604e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 3.44612e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 4.94988e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 3.53588e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.90206e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -9.25163e-14 *lens_ipow(x, 8) + -0.116818 *lens_ipow(lambda, 10) + -4.19702e-15 *lens_ipow(y, 10)+0.0f;
const float dx12 =  + -0.000309823  + 2.57782e-05 *y + -77.7821 *dx*dy + 2.51283 *y*dx + 0.353407 *x*dy + 0.0326194 *x*y + 4.84043e-05 *x*y*dy + -1.388 *y*lens_ipow(dx, 3) + 0.000325953 *lens_ipow(y, 3)*dx + 1657.06 *dx*lens_ipow(dy, 5) + 3327.83 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1019.16 *lens_ipow(dx, 5)*dy + 4.80802e-05 *lens_ipow(y, 4)*dx*dy + 9.89975e-07 *lens_ipow(x, 4)*y*dx + 2.35725e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2)+0.0f;
const float dx13 =  + 99.6816  + -116.994 *lens_ipow(dy, 2) + -38.891 *lens_ipow(dx, 2) + 3.28021 *y*dy + 0.0402298 *lens_ipow(y, 2) + 0.353407 *x*dx + 4.92663e-06 *x*y + 0.00734699 *lens_ipow(x, 2) + 4.84043e-05 *x*y*dx + -3.41289 *y*lens_ipow(dy, 3) + -1.48278e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.03923 *lens_ipow(lambda, 5) + 4142.65 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 2495.87 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 169.86 *lens_ipow(dx, 6) + 2.40401e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 1.37845e-06 *lens_ipow(y, 5)*dy + -0.218425 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 6436.26 *lens_ipow(dy, 8) + 2.35725e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -6.01196e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -8.48108 *lens_ipow(lambda, 10)+0.0f;
const float dx14 =  + 0.0636763 *y*lens_ipow(lambda, 2) + 10.1961 *dy*lens_ipow(lambda, 4) + -6.01196e-05 *lens_ipow(x, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -84.8109 *dy*lens_ipow(lambda, 9) + -1.16818 *y*lens_ipow(lambda, 9)+0.0f;
const float dx20 =  + -0.0282281  + -0.0779454 *lens_ipow(dy, 2) + 1.61069e-05 *dx*dy + 0.0032579 *lens_ipow(dx, 2) + -0.00152978 *y*dy + -5.93393e-06 *lens_ipow(y, 2) + -0.000441864 *x*dx + -1.47048e-06 *lens_ipow(x, 2) + -0.000275923 *lens_ipow(lambda, 3) + -0.00101174 *y*lens_ipow(dx, 2)*dy + -1.20202e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 3.47493e-07 *x*lens_ipow(y, 2)*dx*lambda + 0.102421 *lens_ipow(dy, 6) + 1.18302 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 2.01361e-10 *lens_ipow(y, 5)*dy + 1.11886e-11 *lens_ipow(x, 4)*lens_ipow(y, 2) + -6.1864e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 0.00102416 *lens_ipow(lambda, 10) + 0.000121597 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 4) + 5.58074e-09 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 6) + 1.03788e-16 *lens_ipow(x, 2)*lens_ipow(y, 8) + -2.08763e-07 *lens_ipow(x, 5)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx21 =  + -8.75109e-08  + 9.80636e-07 *dx + -0.108452 *dx*dy + -0.000944075 *y*dx + -0.00152978 *x*dy + -1.18679e-05 *x*y + -0.000759804 *y*dx*lens_ipow(dy, 2) + 0.000479683 *y*lens_ipow(dx, 3) + -0.00101174 *x*lens_ipow(dx, 2)*dy + 3.47493e-07 *lens_ipow(x, 2)*y*dx*lambda + 1.0068e-09 *x*lens_ipow(y, 4)*dy + 4.47545e-12 *lens_ipow(x, 5)*y + -0.00013315 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.05889e-12 *lens_ipow(y, 7)*dx + -4.6398e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 0.000243193 *x*y*lens_ipow(dx, 4)*lens_ipow(lambda, 4) + 3.72049e-09 *lens_ipow(x, 3)*y*lens_ipow(lambda, 6) + 2.76767e-16 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const float dx22 =  + -2.33035  + -0.000316575 *dx + 9.80636e-07 *y + -5.21176 *lens_ipow(dy, 2) + 4.00549 *lens_ipow(dx, 2) + -0.108452 *y*dy + -0.000472038 *lens_ipow(y, 2) + 1.61069e-05 *x*dy + 0.0065158 *x*dx + -0.000220932 *lens_ipow(x, 2) + -0.000379902 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000719525 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00202347 *x*y*dx*dy + -0.0104882 *lens_ipow(lambda, 5) + 1.73747e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 306.13 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 2.36604 *x*dx*lens_ipow(dy, 4) + 517.403 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + -137.644 *lens_ipow(dx, 8) + -9.98625e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.57361e-13 *lens_ipow(y, 8) + -1.5466e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 920.459 *lens_ipow(dy, 10) + 0.000486387 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(lambda, 4) + -1.04381e-07 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const float dx23 =  + -10.4235 *dx*dy + -0.108452 *y*dx + -0.155891 *x*dy + 1.61069e-05 *x*dx + -0.00152978 *x*y + -0.000759804 *lens_ipow(y, 2)*dx*dy + -0.00101174 *x*y*lens_ipow(dx, 2) + -8.0135e-06 *lens_ipow(x, 3)*dy + 408.174 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.614525 *x*lens_ipow(dy, 5) + 4.73207 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 2.01361e-10 *x*lens_ipow(y, 5) + 147.829 *lens_ipow(dx, 7)*dy + -6.6575e-05 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy + -1.5466e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 9204.59 *dx*lens_ipow(dy, 9) + -6.95876e-08 *lens_ipow(x, 6)*lens_ipow(dx, 3)*dy+0.0f;
const float dx24 =  + -0.00082777 *x*lens_ipow(lambda, 2) + -0.052441 *dx*lens_ipow(lambda, 4) + 1.73747e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 0.0102416 *x*lens_ipow(lambda, 9) + 0.000486387 *x*lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 3) + 1.11615e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + 6.20986e-06 *dy + 0.165549 *dx*dy + -1.84392e-05 *lens_ipow(dx, 2) + 0.000700324 *y*dx + 0.00175204 *x*dy + 1.00505e-05 *x*y + 2.24032e-06 *y*lens_ipow(dy, 2) + 0.000719292 *x*lens_ipow(dy, 3) + 0.00384329 *x*lens_ipow(dx, 2)*dy + -1.57093e-07 *x*lens_ipow(y, 2)*dy + -1.48333e-05 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -9.36354e-13 *x*lens_ipow(y, 5) + -4.51121e-10 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 3.40059e-07 *lens_ipow(x, 4)*dx*dy + 2.6208 *dx*lens_ipow(dy, 7) + 0.000856255 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 1.11004e-11 *lens_ipow(x, 7)*dy*lambda + -7.34641e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 5)*dy + 0.000296832 *lens_ipow(x, 3)*lens_ipow(dy, 7) + 2.58241e-07 *lens_ipow(x, 5)*lens_ipow(dx, 4)*dy+0.0f;
const float dx31 =  + -0.0282547  + 0.00744527 *lens_ipow(dy, 2) + 0.0296331 *lens_ipow(dx, 2) + -0.0003469 *y*dy + -1.06471e-06 *lens_ipow(y, 2) + 0.000700324 *x*dx + 5.02525e-06 *lens_ipow(x, 2) + -0.00025461 *lens_ipow(lambda, 3) + 2.24032e-06 *x*lens_ipow(dy, 2) + -1.57093e-07 *lens_ipow(x, 2)*y*dy + 2.2098e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -2.96666e-05 *x*y*dx*dy*lens_ipow(lambda, 2) + -2.34088e-12 *lens_ipow(x, 2)*lens_ipow(y, 4) + -4.51121e-10 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 0.00102108 *lens_ipow(lambda, 10) + -4.89761e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 5)*dy+0.0f;
const float dx32 =  + -6.09807e-05  + 0.00156151 *lens_ipow(dy, 2) + 15.8837 *dx*dy + 0.0592662 *y*dx + 0.165549 *x*dy + -3.68784e-05 *x*dx + 0.000700324 *x*y + -1.51834 *dx*lens_ipow(dy, 3) + -11.428 *lens_ipow(dx, 3)*dy + 0.00384329 *lens_ipow(x, 2)*dx*dy + 1.1049e-06 *lens_ipow(y, 4)*dx*dy + -1.48333e-05 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -1.50374e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 6.80119e-08 *lens_ipow(x, 5)*dy + -1248.11 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + -825.925 *lens_ipow(dx, 7)*dy + 2.6208 *x*lens_ipow(dy, 7) + -9.21099 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 5) + 0.000285418 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -1.2244e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + 1.7216e-07 *lens_ipow(x, 6)*lens_ipow(dx, 3)*dy+0.0f;
const float dx33 =  + -2.3321  + 6.20986e-06 *x + 4.29495 *lens_ipow(dy, 2) + 0.00312303 *dx*dy + 7.94185 *lens_ipow(dx, 2) + 0.0148905 *y*dy + -0.00017345 *lens_ipow(y, 2) + 0.165549 *x*dx + 0.000876019 *lens_ipow(x, 2) + 4.48064e-06 *x*y*dy + -2.2775 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.857 *lens_ipow(dx, 4) + 0.00107894 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00192164 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -7.85463e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0118652 *lens_ipow(lambda, 6) + 5.52449e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -1.48333e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 6.80119e-08 *lens_ipow(x, 5)*dx + -624.053 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + -103.241 *lens_ipow(dx, 8) + 18.3456 *x*dx*lens_ipow(dy, 6) + -2.30275 *lens_ipow(dx, 4)*lens_ipow(lambda, 5) + 0.000856255 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 1.38755e-12 *lens_ipow(x, 8)*lambda + -2.4488e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 5) + 0.000519456 *lens_ipow(x, 4)*lens_ipow(dy, 6) + 4.30401e-08 *lens_ipow(x, 6)*lens_ipow(dx, 4)+0.0f;
const float dx34 =  + -0.000763831 *y*lens_ipow(lambda, 2) + -0.071191 *dy*lens_ipow(lambda, 5) + -2.96666e-05 *x*lens_ipow(y, 2)*dx*dy*lambda + -11.5137 *lens_ipow(dx, 4)*dy*lens_ipow(lambda, 4) + 0.000856255 *lens_ipow(x, 3)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 1.38755e-12 *lens_ipow(x, 8)*dy + 0.0102108 *y*lens_ipow(lambda, 9)+0.0f;
const float dx40 =  + -3.70904e-07  + -0.00219436 *dx + 1.38397e-07 *y + -2.89657e-05 *x + 9.23423e-09 *x*y + 7.69817e-05 *lens_ipow(dy, 3) + -1.64167e-06 *lens_ipow(y, 2)*dx + -4.19183e-06 *x*y*dy + -5.93854e-08 *x*lens_ipow(y, 2) + -8.03228e-06 *lens_ipow(x, 2)*dx + 3.34695e-05 *x*lens_ipow(dy, 2)*lambda + -8.2314e-06 *x*y*lens_ipow(dx, 2)*dy + -3.36101e-07 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -9.08396e-07 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -2.37615e-10 *lens_ipow(x, 5) + -0.00306952 *lens_ipow(y, 2)*dx*lens_ipow(dy, 6) + 0.000108732 *lens_ipow(x, 3)*lens_ipow(dx, 6) + 0.117111 *y*lens_ipow(dx, 7)*dy*lambda+0.0f;
const float dx41 =  + 1.55248e-07  + -0.00238893 *dy + 6.65819e-06 *dx + -2.81183e-05 *y + 1.38397e-07 *x + 4.61712e-09 *lens_ipow(x, 2) + -3.28334e-06 *x*y*dx + -2.09592e-06 *lens_ipow(x, 2)*dy + -5.93854e-08 *lens_ipow(x, 2)*y + 2.15078e-06 *y*lens_ipow(dx, 2)*lambda + -4.15728e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 1.19066e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.40712e-10 *lens_ipow(y, 5) + -4.1157e-06 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + -3.36101e-07 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -4.93421e-06 *lens_ipow(y, 3)*lens_ipow(dx, 4) + -0.00613903 *x*y*dx*lens_ipow(dy, 6) + 0.117111 *x*lens_ipow(dx, 7)*dy*lambda+0.0f;
const float dx42 =  + -0.22526 *dx + 6.65819e-06 *y + -0.00219436 *x + -0.00304576 *dx*dy + -1.42695 *dx*lens_ipow(dy, 2) + -1.64167e-06 *x*lens_ipow(y, 2) + -2.67743e-06 *lens_ipow(x, 3) + 2.15078e-06 *lens_ipow(y, 2)*dx*lambda + -17.3553 *dx*lens_ipow(dy, 4) + -19.4885 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -34.2297 *lens_ipow(dx, 5) + -2.77152e-05 *lens_ipow(y, 3)*dx*dy + -8.2314e-06 *lens_ipow(x, 2)*y*dx*dy + -4.54198e-07 *lens_ipow(x, 4)*dx + -4.93421e-06 *lens_ipow(y, 4)*lens_ipow(dx, 3) + -0.00306952 *x*lens_ipow(y, 2)*lens_ipow(dy, 6) + 0.000163099 *lens_ipow(x, 4)*lens_ipow(dx, 5) + 0.819775 *x*y*lens_ipow(dx, 6)*dy*lambda+0.0f;
const float dx43 =  + -0.232865 *dy + -0.00238893 *y + 0.00290499 *lens_ipow(dy, 2) + -0.00152288 *lens_ipow(dx, 2) + -1.42695 *lens_ipow(dx, 2)*dy + 0.000230945 *x*lens_ipow(dy, 2) + -2.09592e-06 *lens_ipow(x, 2)*y + 3.34695e-05 *lens_ipow(x, 2)*dy*lambda + -29.7846 *lens_ipow(dy, 5) + -34.7106 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -9.74426 *lens_ipow(dx, 4)*dy + -1.38576e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2) + 5.95332e-07 *lens_ipow(y, 4)*dy + -4.1157e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + -3.36101e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -0.0184171 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 5) + 0.117111 *x*y*lens_ipow(dx, 7)*lambda+0.0f;
const float dx44 =  + 0.202024  + -0.507974 *lens_ipow(lambda, 2) + 1.07539e-06 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.67348e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 3.37483 *lens_ipow(lambda, 10) + 0.117111 *x*y*lens_ipow(dx, 7)*dy+0.0f;
