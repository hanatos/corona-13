//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + -3.01226e-05  + 38.4416 *begin_dx + -2.02691e-06 *begin_y + 0.791503 *begin_x + 7.25389e-07 *lens_ipow(begin_y, 2) + 4.75406e-05 *begin_x*begin_dy + -5.8981e-05 *begin_x*begin_dx + 1.35813 *begin_dx*lens_ipow(begin_dy, 2) + 1.28664 *lens_ipow(begin_dx, 3) + 0.563583 *begin_y*begin_dx*begin_dy + 0.0113888 *lens_ipow(begin_y, 2)*begin_dx + 0.13711 *begin_x*lens_ipow(begin_dy, 2) + 0.719175 *begin_x*lens_ipow(begin_dx, 2) + 0.015894 *begin_x*begin_y*begin_dy + 0.000217427 *begin_x*lens_ipow(begin_y, 2) + 0.0281401 *lens_ipow(begin_x, 2)*begin_dx + 0.000224055 *lens_ipow(begin_x, 3) + 0.275952 *begin_dx*lens_ipow(begin_lambda, 3) + 0.000681354 *begin_x*begin_y*begin_dy*begin_lambda + -4.52221e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 0.000594231 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 2) + 0.00336257 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 7.61974e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dy + 0.000122382 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_lambda + 0.000243215 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 2.57239e-09 *lens_ipow(begin_y, 6)*begin_dx + 2.08992e-05 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + -0.00231977 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 0.0443817 *begin_x*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 3) + -0.0506243 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 4.32588e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 5) + -221.036 *begin_dx*lens_ipow(begin_dy, 8) + -1772.59 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 4) + -1.46492e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 3) + 0.009873 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 6) + -5.72314e-13 *lens_ipow(begin_x, 9) + -1.57966 *begin_dx*lens_ipow(begin_lambda, 10) + -387.177 *lens_ipow(begin_dx, 9)*lens_ipow(begin_lambda, 2) + -5142.91 *lens_ipow(begin_dx, 9)*lens_ipow(begin_dy, 2) + -1.58352e-14 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 4),
       + 0.000132619  + 38.544 *begin_dy + 2.44934e-05 *begin_dx + 0.795684 *begin_y + 0.00699888 *begin_dx*begin_dy + -2.3014e-06 *lens_ipow(begin_y, 2) + 0.243615 *begin_dy*lens_ipow(begin_lambda, 2) + -3.56032 *lens_ipow(begin_dy, 3) + -0.0617397 *lens_ipow(begin_dx, 2)*begin_dy + 0.10059 *begin_y*lens_ipow(begin_dx, 2) + 0.000115116 *lens_ipow(begin_y, 3) + 0.479762 *begin_x*begin_dx*begin_dy + 0.0144367 *begin_x*begin_y*begin_dx + 0.00972712 *lens_ipow(begin_x, 2)*begin_dy + 0.000167253 *lens_ipow(begin_x, 2)*begin_y + 0.0389313 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.00430198 *begin_x*lens_ipow(begin_dy, 3) + 1.54531 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.00250405 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + 2.57694e-06 *lens_ipow(begin_x, 4)*begin_dy + 0.000498776 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -46.8044 *lens_ipow(begin_dx, 6)*begin_dy + -0.0351339 *begin_y*lens_ipow(begin_lambda, 6) + 0.000231869 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -0.0161661 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + 16.3266 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 3) + 0.000552429 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 5) + 1.91314e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2)*begin_lambda + -247.046 *lens_ipow(begin_dy, 9) + -341.308 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 2) + 7.62947e-08 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 3) + -0.051547 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*begin_dy + -2.74222e-07 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_lambda, 5) + -7.5019 *begin_dy*lens_ipow(begin_lambda, 10) + 130.224 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 8) + -26920.9 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 5) + -0.495454 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 8) + 0.000109065 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 6) + 0.163349 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 7) + 0.566356 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 4)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 38.4416  + -5.8981e-05 *begin_x + 1.35813 *lens_ipow(begin_dy, 2) + 3.85993 *lens_ipow(begin_dx, 2) + 0.563583 *begin_y*begin_dy + 0.0113888 *lens_ipow(begin_y, 2) + 1.43835 *begin_x*begin_dx + 0.0281401 *lens_ipow(begin_x, 2) + 0.275952 *lens_ipow(begin_lambda, 3) + 0.000594231 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 2) + 0.0100877 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 0.000244764 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 2.57239e-09 *lens_ipow(begin_y, 6) + -0.00695932 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.101249 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -221.036 *lens_ipow(begin_dy, 8) + -8862.96 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 4) + -1.46492e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + -1.57966 *lens_ipow(begin_lambda, 10) + -3484.6 *lens_ipow(begin_dx, 8)*lens_ipow(begin_lambda, 2) + -46286.2 *lens_ipow(begin_dx, 8)*lens_ipow(begin_dy, 2)+0.0f;
    dx1_domega0[0][1] =  + 4.75406e-05 *begin_x + 2.71626 *begin_dx*begin_dy + 0.563583 *begin_y*begin_dx + 0.27422 *begin_x*begin_dy + 0.015894 *begin_x*begin_y + 0.000681354 *begin_x*begin_y*begin_lambda + -9.04442e-05 *lens_ipow(begin_x, 2)*begin_dy + 7.61974e-06 *lens_ipow(begin_x, 3)*begin_y + 0.000486429 *lens_ipow(begin_x, 3)*begin_dy*begin_lambda + 6.26977e-05 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -0.00231977 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 0.177527 *begin_x*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + -0.101249 *begin_x*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + -1768.29 *begin_dx*lens_ipow(begin_dy, 7) + -7090.37 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3) + -4.39475e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + 0.059238 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 5) + -10285.8 *lens_ipow(begin_dx, 9)*begin_dy+0.0f;
    dx1_domega0[1][0] =  + 2.44934e-05  + 0.00699888 *begin_dy + -0.123479 *begin_dx*begin_dy + 0.201179 *begin_y*begin_dx + 0.479762 *begin_x*begin_dy + 0.0144367 *begin_x*begin_y + -0.00250405 *begin_x*begin_y*lens_ipow(begin_lambda, 2) + -280.826 *lens_ipow(begin_dx, 5)*begin_dy + 0.000231869 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 3.82629e-06 *lens_ipow(begin_y, 5)*begin_dx*begin_lambda + -682.617 *begin_dx*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 2) + -0.257735 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*begin_dy + -161525 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 5) + -0.990908 *begin_y*begin_dx*lens_ipow(begin_lambda, 8) + 0.00065439 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 5) + 0.163349 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 7)+0.0f;
    dx1_domega0[1][1] =  + 38.544  + 0.00699888 *begin_dx + 0.243615 *lens_ipow(begin_lambda, 2) + -10.681 *lens_ipow(begin_dy, 2) + -0.0617397 *lens_ipow(begin_dx, 2) + 0.479762 *begin_x*begin_dx + 0.00972712 *lens_ipow(begin_x, 2) + 0.0389313 *lens_ipow(begin_y, 2)*begin_lambda + 0.0129059 *begin_x*lens_ipow(begin_dy, 2) + 3.09061 *begin_y*begin_dy*lens_ipow(begin_lambda, 2) + 2.57694e-06 *lens_ipow(begin_x, 4) + 0.000997551 *lens_ipow(begin_x, 2)*begin_y*begin_dy*begin_lambda + -46.8044 *lens_ipow(begin_dx, 6) + 0.000463738 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -0.0808303 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 81.6328 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 3) + -2223.41 *lens_ipow(begin_dy, 8) + -1706.54 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + 2.28884e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 2) + -0.051547 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -7.5019 *lens_ipow(begin_lambda, 10) + 390.672 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 8) + -134604 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 4) + 1.14344 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 6) + 2.83178 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 4)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + 1.61246e-05  + 0.000437563 *begin_dy + 49.877 *begin_dx + 0.547189 *begin_x + 2.55514e-06 *lens_ipow(begin_y, 2) + 6.4343e-05 *begin_x*begin_dy + -22.0241 *begin_dx*lens_ipow(begin_dy, 2) + -22.0264 *lens_ipow(begin_dx, 3) + 0.379325 *begin_y*begin_dx*begin_dy + 0.0162033 *lens_ipow(begin_y, 2)*begin_dx + 0.524701 *begin_x*lens_ipow(begin_dy, 2) + 7.3438e-05 *begin_x*begin_dx*begin_dy + 0.929944 *begin_x*lens_ipow(begin_dx, 2) + 0.0404555 *begin_x*begin_y*begin_dy + 0.000523886 *begin_x*lens_ipow(begin_y, 2) + 0.0563142 *lens_ipow(begin_x, 2)*begin_dx + 0.000514391 *lens_ipow(begin_x, 3) + -0.0336052 *lens_ipow(begin_dy, 4) + -0.0150233 *begin_x*lens_ipow(begin_lambda, 3) + 1.24633e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy + 0.408777 *begin_y*begin_dx*lens_ipow(begin_dy, 3) + 0.378071 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 8.23586e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 0.0288448 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + 9.6451e-09 *lens_ipow(begin_y, 6)*begin_dx + -4.95598e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + 3.36631e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + -343.585 *lens_ipow(begin_dx, 9) + 30.2553 *begin_x*lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + -2.22483e-07 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 4) + 5.95422e-08 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 3) + 2.38379e-10 *lens_ipow(begin_x, 7)*begin_y*begin_dy + 1.56762e-08 *begin_x*lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2)*begin_lambda + -0.462033 *begin_dx*lens_ipow(begin_lambda, 10) + 0.0543473 *begin_x*lens_ipow(begin_lambda, 10) + -0.00729431 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 8) + -0.0113576 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 6) + 0.0122086 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 7) + -0.0452351 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + 7.96069e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dy, 4);
    out[1] =  + 0.000115322  + 49.8343 *begin_dy + 0.546342 *begin_y + 2.68222e-06 *begin_x + -0.0033485 *lens_ipow(begin_dx, 2) + -2.21933e-05 *begin_y*begin_dy + -4.16495e-05 *begin_y*begin_dx + 0.134787 *begin_dy*lens_ipow(begin_lambda, 2) + -21.7574 *lens_ipow(begin_dy, 3) + -21.9408 *lens_ipow(begin_dx, 2)*begin_dy + 0.956653 *begin_y*lens_ipow(begin_dy, 2) + 0.508291 *begin_y*lens_ipow(begin_dx, 2) + 0.0573385 *lens_ipow(begin_y, 2)*begin_dy + -1.09862e-05 *lens_ipow(begin_y, 2)*begin_dx + 0.000521016 *lens_ipow(begin_y, 3) + -0.000624202 *begin_x*lens_ipow(begin_dy, 2) + 0.424364 *begin_x*begin_dx*begin_dy + 0.039835 *begin_x*begin_y*begin_dx + 0.0168745 *lens_ipow(begin_x, 2)*begin_dy + 0.000516794 *lens_ipow(begin_x, 2)*begin_y + -4.75236e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -0.0130893 *begin_y*lens_ipow(begin_lambda, 4) + 0.000261296 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 0.0134818 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00746129 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 1.38821e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_lambda + -113.801 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + 0.00173361 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*begin_lambda + 3.83949e-11 *lens_ipow(begin_y, 8)*begin_dy + -0.00230582 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 6) + -2.71345e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3) + 3.8168e-11 *lens_ipow(begin_x, 7)*begin_y*begin_dx + 0.320317 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 5) + -2.1404 *begin_dy*lens_ipow(begin_lambda, 10) + -819.144 *lens_ipow(begin_dy, 11) + -5171.74 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 9) + -978.47 *lens_ipow(begin_dx, 10)*begin_dy + 2.58964 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + 2.33468e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dy + -4.92178e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dx*begin_dy;
    out[2] =  + 7.03442e-07  + -1.40991 *begin_dx + 2.68045e-07 *begin_y + -0.0355285 *begin_x + 9.01152e-06 *lens_ipow(begin_dy, 2) + -8.74494e-05 *lens_ipow(begin_dx, 2) + 3.49342e-08 *begin_x*begin_y + -0.640477 *begin_dx*lens_ipow(begin_dy, 2) + 0.728341 *lens_ipow(begin_dx, 3) + -0.0398735 *begin_y*begin_dx*begin_dy + -0.000422056 *lens_ipow(begin_y, 2)*begin_dx + 0.000293857 *begin_x*lens_ipow(begin_lambda, 2) + -0.0289854 *begin_x*lens_ipow(begin_dy, 2) + -8.44205e-06 *begin_x*begin_dx*begin_dy + -0.0024248 *begin_x*lens_ipow(begin_dx, 2) + -0.00130006 *begin_x*begin_y*begin_dy + -7.60243e-06 *begin_x*lens_ipow(begin_y, 2) + -0.000742034 *lens_ipow(begin_x, 2)*begin_dx + -2.82265e-06 *lens_ipow(begin_x, 3) + -0.00137252 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -0.000330274 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + 6.16561e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -0.20114 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 3.99815 *begin_dx*lens_ipow(begin_dy, 6) + -0.246918 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 4) + 15.1756 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 2.26832e-08 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + 0.0336882 *begin_x*lens_ipow(begin_dy, 6) + 9.09116e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -8.11413e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4) + 0.0425201 *begin_dx*lens_ipow(begin_lambda, 8) + 18.3668 *lens_ipow(begin_dx, 9) + 0.051961 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + -6.76874e-15 *begin_x*lens_ipow(begin_y, 8) + 3.0202e-10 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy + 5.54905e-11 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2) + -4.8712e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 7) + -4.90185e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 8) + -3.8713e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 5) + -3.24126e-13 *lens_ipow(begin_x, 9)*lens_ipow(begin_dy, 2);
    out[3] =  + -9.27983e-07  + -1.40772 *begin_dy + 2.10088e-05 *begin_dx + -0.0354906 *begin_y + 3.49146e-07 *begin_x + 2.2675e-08 *lens_ipow(begin_x, 2) + -0.00899718 *begin_dy*lens_ipow(begin_lambda, 2) + 0.730198 *lens_ipow(begin_dy, 3) + 2.07077 *lens_ipow(begin_dx, 2)*begin_dy + 0.00316823 *begin_y*lens_ipow(begin_dx, 2) + -0.000660788 *lens_ipow(begin_y, 2)*begin_dy + -2.08848e-06 *lens_ipow(begin_y, 3) + 9.39808e-06 *begin_x*lens_ipow(begin_dy, 2) + 0.0615597 *begin_x*begin_dx*begin_dy + -9.04265e-05 *begin_x*begin_y*begin_dx + 0.000382774 *lens_ipow(begin_x, 2)*begin_dy + 2.22196e-06 *lens_ipow(begin_x, 2)*begin_y + -0.000562991 *begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 0.000255559 *begin_y*lens_ipow(begin_lambda, 4) + -8.64724e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 2.1107e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -6.75514e-06 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + -0.126892 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + -2.90756e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 3) + 12.9119 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 9.35278 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + 3.98169 *lens_ipow(begin_dx, 6)*begin_dy + 2.74347e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + 2.1367e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3) + 8.46451e-12 *lens_ipow(begin_x, 6)*begin_y + -1.50428e-09 *lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 3) + 0.000429485 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 24.3438 *lens_ipow(begin_dy, 9) + 0.0959447 *begin_y*lens_ipow(begin_dx, 8) + 1.33776e-14 *lens_ipow(begin_y, 9) + 7.96632e-14 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + -1.18548 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 5) + 0.116441 *begin_dy*lens_ipow(begin_lambda, 10) + 7.05257e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 6) + -2.55192e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 2);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0355285  + 3.49342e-08 *begin_y + 0.000293857 *lens_ipow(begin_lambda, 2) + -0.0289854 *lens_ipow(begin_dy, 2) + -8.44205e-06 *begin_dx*begin_dy + -0.0024248 *lens_ipow(begin_dx, 2) + -0.00130006 *begin_y*begin_dy + -7.60243e-06 *lens_ipow(begin_y, 2) + -0.00148407 *begin_x*begin_dx + -8.46794e-06 *lens_ipow(begin_x, 2) + -0.00137252 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -0.000660547 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 2.46624e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 0.0336882 *lens_ipow(begin_dy, 6) + 1.81823e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -0.000243424 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + -6.76874e-15 *lens_ipow(begin_y, 8) + 1.81212e-09 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_dy + 3.88433e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2) + -4.8712e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 7) + -1.47055e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 8) + -1.16139e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 5) + -2.91713e-12 *lens_ipow(begin_x, 8)*lens_ipow(begin_dy, 2)+0.0f;
    domega2_dx0[0][1] =  + 2.68045e-07  + 3.49342e-08 *begin_x + -0.0398735 *begin_dx*begin_dy + -0.000844111 *begin_y*begin_dx + -0.00130006 *begin_x*begin_dy + -1.52049e-05 *begin_x*begin_y + 1.23312e-11 *lens_ipow(begin_x, 4)*begin_y + 1.13416e-07 *lens_ipow(begin_y, 4)*begin_dx*begin_dy + 2.72735e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.103922 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + -5.41499e-14 *begin_x*lens_ipow(begin_y, 7) + 3.0202e-10 *lens_ipow(begin_x, 6)*begin_dx*begin_dy + -9.74239e-06 *begin_x*begin_y*lens_ipow(begin_lambda, 7) + -1.16139e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5)+0.0f;
    domega2_dx0[1][0] =  + 3.49146e-07  + 4.535e-08 *begin_x + 9.39808e-06 *lens_ipow(begin_dy, 2) + 0.0615597 *begin_dx*begin_dy + -9.04265e-05 *begin_y*begin_dx + 0.000765548 *begin_x*begin_dy + 4.44392e-06 *begin_x*begin_y + 2.1107e-05 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + -1.35103e-05 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -8.72269e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 8.54679e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3) + 5.07871e-11 *lens_ipow(begin_x, 5)*begin_y + 0.00085897 *begin_x*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 1.59326e-13 *begin_x*lens_ipow(begin_y, 7) + 1.41051e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 6) + -0.000102077 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 2)+0.0f;
    domega2_dx0[1][1] =  + -0.0354906  + 0.00316823 *lens_ipow(begin_dx, 2) + -0.00132158 *begin_y*begin_dy + -6.26544e-06 *lens_ipow(begin_y, 2) + -9.04265e-05 *begin_x*begin_dx + 2.22196e-06 *lens_ipow(begin_x, 2) + -0.000562991 *lens_ipow(begin_dy, 2)*begin_lambda + 0.000255559 *lens_ipow(begin_lambda, 4) + -2.59417e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 4.2214e-05 *begin_x*begin_y*begin_dx*begin_dy + -6.75514e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 8.2304e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 6.41009e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + 8.46451e-12 *lens_ipow(begin_x, 6) + -7.5214e-09 *lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 3) + 0.0959447 *lens_ipow(begin_dx, 8) + 1.20398e-13 *lens_ipow(begin_y, 8) + 5.57642e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6) + 1.41051e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy*lens_ipow(begin_lambda, 6)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.676059  + 6.38494e-05 *begin_dy + 0.000104044 *begin_dx + -0.0300267 *lens_ipow(begin_dy, 2) + 0.0481509 *lens_ipow(begin_dx, 2) + -0.0022455 *begin_y*begin_dy + -9.01995e-05 *lens_ipow(begin_y, 2) + -0.00243072 *begin_x*begin_dx + -9.40048e-07 *begin_x*begin_y + -8.34369e-05 *lens_ipow(begin_x, 2) + 0.10695 *lens_ipow(begin_lambda, 3) + -4.22064e-06 *lens_ipow(begin_x, 2)*begin_dy + -1.54544 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -1.3694 *lens_ipow(begin_dx, 4) + 0.00273315 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 0.00374516 *begin_x*begin_y*begin_dx*begin_dy*begin_lambda + 4.73925e-08 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 0.0952712 *begin_y*lens_ipow(begin_dy, 5) + 0.0014673 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -3.45292e-09 *lens_ipow(begin_y, 6) + 0.0149835 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4) + -9.18881e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -7.13045e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -3.58111e-09 *lens_ipow(begin_x, 6) + -0.000250413 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 5) + -1.74634e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -7.08094e-06 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_lambda, 3) + -0.00685928 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 1.22365e-07 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 4) + 0.00224175 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 3.58259e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -25.4461 *lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 4) + -219.4 *lens_ipow(begin_dx, 10) + -2.48839e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 5) + -0.0225542 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 6) + 1.27589e-12 *begin_x*lens_ipow(begin_y, 8)*begin_dx + -1.05667e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4) + -0.712927 *lens_ipow(begin_lambda, 11) + -488.405 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 3) + -124.916 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5);
else
  out[4] = 0.0f;
