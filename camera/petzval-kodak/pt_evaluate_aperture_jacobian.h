const float dx00 =  + 0.791503  + 4.75406e-05 *dy + -5.8981e-05 *dx + 0.13711 *lens_ipow(dy, 2) + 0.719175 *lens_ipow(dx, 2) + 0.015894 *y*dy + 0.000217427 *lens_ipow(y, 2) + 0.0562802 *x*dx + 0.000672166 *lens_ipow(x, 2) + 0.000681354 *y*dy*lambda + -9.04442e-05 *x*lens_ipow(dy, 2) + 0.00118846 *x*dx*lens_ipow(lambda, 2) + 0.00672513 *x*lens_ipow(dx, 3) + 2.28592e-05 *lens_ipow(x, 2)*y*dy + 0.000122382 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.000729644 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 2.08992e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3) + -0.00463954 *x*y*lens_ipow(dx, 3)*dy + 0.0443817 *lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -0.0506243 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 4.32588e-06 *lens_ipow(y, 2)*lens_ipow(lambda, 5) + -2.92983e-05 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 0.029619 *lens_ipow(x, 2)*lens_ipow(dy, 6) + -5.15083e-12 *lens_ipow(x, 8) + -1.10846e-13 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const float dx01 =  + -2.02691e-06  + 1.45078e-06 *y + 0.563583 *dx*dy + 0.0227776 *y*dx + 0.015894 *x*dy + 0.000434853 *x*y + 0.000681354 *x*dy*lambda + 7.61974e-06 *lens_ipow(x, 3)*dy + 0.000244764 *x*y*lens_ipow(dx, 2)*lambda + 1.54343e-08 *lens_ipow(y, 5)*dx + 6.26977e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.00231977 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 8.65177e-06 *x*y*lens_ipow(lambda, 5) + -4.39475e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -6.33407e-14 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const float dx02 =  + 38.4416  + -5.8981e-05 *x + 1.35813 *lens_ipow(dy, 2) + 3.85993 *lens_ipow(dx, 2) + 0.563583 *y*dy + 0.0113888 *lens_ipow(y, 2) + 1.43835 *x*dx + 0.0281401 *lens_ipow(x, 2) + 0.275952 *lens_ipow(lambda, 3) + 0.000594231 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.0100877 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000244764 *x*lens_ipow(y, 2)*dx*lambda + 2.57239e-09 *lens_ipow(y, 6) + -0.00695932 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.101249 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -221.036 *lens_ipow(dy, 8) + -8862.96 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -1.46492e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3) + -1.57966 *lens_ipow(lambda, 10) + -3484.6 *lens_ipow(dx, 8)*lens_ipow(lambda, 2) + -46286.2 *lens_ipow(dx, 8)*lens_ipow(dy, 2)+0.0f;
const float dx03 =  + 4.75406e-05 *x + 2.71626 *dx*dy + 0.563583 *y*dx + 0.27422 *x*dy + 0.015894 *x*y + 0.000681354 *x*y*lambda + -9.04442e-05 *lens_ipow(x, 2)*dy + 7.61974e-06 *lens_ipow(x, 3)*y + 0.000486429 *lens_ipow(x, 3)*dy*lambda + 6.26977e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00231977 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 0.177527 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -0.101249 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -1768.29 *dx*lens_ipow(dy, 7) + -7090.37 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + -4.39475e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 0.059238 *lens_ipow(x, 3)*lens_ipow(dy, 5) + -10285.8 *lens_ipow(dx, 9)*dy+0.0f;
const float dx04 =  + 0.827855 *dx*lens_ipow(lambda, 2) + 0.000681354 *x*y*dy + 0.00118846 *lens_ipow(x, 2)*dx*lambda + 0.000122382 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000243215 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 0.133145 *x*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -0.151873 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 2.16294e-05 *x*lens_ipow(y, 2)*lens_ipow(lambda, 4) + -15.7966 *dx*lens_ipow(lambda, 9) + -774.355 *lens_ipow(dx, 9)*lambda+0.0f;
const float dx10 =  + 0.479762 *dx*dy + 0.0144367 *y*dx + 0.0194542 *x*dy + 0.000334506 *x*y + 0.00430198 *lens_ipow(dy, 3) + -0.00250405 *y*dx*lens_ipow(lambda, 2) + 1.03078e-05 *lens_ipow(x, 3)*dy + 0.000997551 *x*y*lens_ipow(dy, 2)*lambda + 0.000231869 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -0.0323321 *x*lens_ipow(dy, 5) + -0.051547 *lens_ipow(y, 2)*lens_ipow(dx, 5)*dy + -1.09689e-06 *lens_ipow(x, 3)*y*lens_ipow(lambda, 5) + 0.163349 *lens_ipow(y, 2)*dx*lens_ipow(dy, 7) + 1.13271 *x*lens_ipow(dy, 5)*lens_ipow(lambda, 4)+0.0f;
const float dx11 =  + 0.795684  + -4.60279e-06 *y + 0.10059 *lens_ipow(dx, 2) + 0.000345348 *lens_ipow(y, 2) + 0.0144367 *x*dx + 0.000167253 *lens_ipow(x, 2) + 0.0778626 *y*dy*lambda + 1.54531 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00250405 *x*dx*lens_ipow(lambda, 2) + 0.000498776 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.0351339 *lens_ipow(lambda, 6) + 0.000695608 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.00165729 *lens_ipow(y, 2)*lens_ipow(lambda, 5) + 9.56571e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + 4.57768e-07 *lens_ipow(y, 5)*lens_ipow(dy, 3) + -0.103094 *x*y*lens_ipow(dx, 5)*dy + -2.74222e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 5) + -0.495454 *lens_ipow(dx, 2)*lens_ipow(lambda, 8) + 0.000545325 *lens_ipow(y, 4)*lens_ipow(dx, 6) + 0.326698 *x*y*dx*lens_ipow(dy, 7)+0.0f;
const float dx12 =  + 2.44934e-05  + 0.00699888 *dy + -0.123479 *dx*dy + 0.201179 *y*dx + 0.479762 *x*dy + 0.0144367 *x*y + -0.00250405 *x*y*lens_ipow(lambda, 2) + -280.826 *lens_ipow(dx, 5)*dy + 0.000231869 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 3.82629e-06 *lens_ipow(y, 5)*dx*lambda + -682.617 *dx*lens_ipow(dy, 5)*lens_ipow(lambda, 2) + -0.257735 *x*lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + -161525 *lens_ipow(dx, 5)*lens_ipow(dy, 5) + -0.990908 *y*dx*lens_ipow(lambda, 8) + 0.00065439 *lens_ipow(y, 5)*lens_ipow(dx, 5) + 0.163349 *x*lens_ipow(y, 2)*lens_ipow(dy, 7)+0.0f;
const float dx13 =  + 38.544  + 0.00699888 *dx + 0.243615 *lens_ipow(lambda, 2) + -10.681 *lens_ipow(dy, 2) + -0.0617397 *lens_ipow(dx, 2) + 0.479762 *x*dx + 0.00972712 *lens_ipow(x, 2) + 0.0389313 *lens_ipow(y, 2)*lambda + 0.0129059 *x*lens_ipow(dy, 2) + 3.09061 *y*dy*lens_ipow(lambda, 2) + 2.57694e-06 *lens_ipow(x, 4) + 0.000997551 *lens_ipow(x, 2)*y*dy*lambda + -46.8044 *lens_ipow(dx, 6) + 0.000463738 *x*lens_ipow(y, 3)*dx*dy + -0.0808303 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 81.6328 *lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -2223.41 *lens_ipow(dy, 8) + -1706.54 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 2.28884e-07 *lens_ipow(y, 6)*lens_ipow(dy, 2) + -0.051547 *x*lens_ipow(y, 2)*lens_ipow(dx, 5) + -7.5019 *lens_ipow(lambda, 10) + 390.672 *lens_ipow(dy, 2)*lens_ipow(lambda, 8) + -134604 *lens_ipow(dx, 6)*lens_ipow(dy, 4) + 1.14344 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 6) + 2.83178 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 4)+0.0f;
const float dx14 =  + 0.487231 *dy*lambda + 0.0389313 *lens_ipow(y, 2)*dy + 3.09061 *y*lens_ipow(dy, 2)*lambda + -0.0050081 *x*y*dx*lambda + 0.000498776 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -0.210803 *y*lens_ipow(lambda, 5) + 48.9797 *lens_ipow(dy, 5)*lens_ipow(lambda, 2) + 0.00276214 *lens_ipow(y, 3)*lens_ipow(lambda, 4) + 1.91314e-06 *lens_ipow(y, 5)*lens_ipow(dx, 2) + -682.617 *lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda + -1.37111e-06 *lens_ipow(x, 4)*y*lens_ipow(lambda, 4) + -75.019 *dy*lens_ipow(lambda, 9) + 1041.79 *lens_ipow(dy, 3)*lens_ipow(lambda, 7) + -3.96363 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 7) + 2.26542 *lens_ipow(x, 2)*lens_ipow(dy, 5)*lens_ipow(lambda, 3)+0.0f;
const float dx20 =  + -0.0140496  + -4.16322e-07 *dy + 0.00724592 *lens_ipow(dy, 2) + 0.0257337 *lens_ipow(dx, 2) + 0.0010468 *y*dy + -2.56237e-07 *y*dx + 1.4782e-05 *lens_ipow(y, 2) + 0.00305328 *x*dx + 4.4296e-05 *lens_ipow(x, 2) + 1.69291e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.260473 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -2.83022e-08 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 2.09482e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 2.63193e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 1.60366e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 5.00214e-08 *lens_ipow(x, 5)*lens_ipow(dx, 3) + 8.16079e-13 *lens_ipow(x, 6)*lens_ipow(y, 2) + -2.47594e-06 *lens_ipow(x, 3)*lens_ipow(dx, 5)*dy + -0.00103177 *lens_ipow(y, 2)*lens_ipow(dx, 8) + 6.53247e-17 *lens_ipow(y, 10) + -0.000106305 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 5.97396e-09 *lens_ipow(x, 6)*lens_ipow(dy, 4) + 1.54465e-15 *lens_ipow(x, 10)+0.0f;
const float dx21 =  + -1.99656e-07  + -3.49032e-06 *dx + 0.0180977 *dx*dy + 0.00094447 *y*dx + 0.0010468 *x*dy + -2.56237e-07 *x*dx + 2.9564e-05 *x*y + 9.26828e-05 *dx*lens_ipow(dy, 2) + 0.00887733 *lens_ipow(dx, 3)*dy + 1.42337e-09 *lens_ipow(y, 5)*dx + -1.13209e-07 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 2.09482e-05 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + 8.7731e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 2.13822e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 2.33165e-13 *lens_ipow(x, 7)*y + -0.00206354 *x*y*lens_ipow(dx, 8) + 6.53247e-16 *x*lens_ipow(y, 9)+0.0f;
const float dx22 =  + 0.580228  + -3.49032e-06 *y + -0.173864 *lens_ipow(dy, 2) + -0.532526 *lens_ipow(dx, 2) + 0.0180977 *y*dy + 0.000472235 *lens_ipow(y, 2) + 0.0514673 *x*dx + -2.56237e-07 *x*y + 0.00152664 *lens_ipow(x, 2) + 9.26828e-05 *y*lens_ipow(dy, 2) + -0.00204189 *lens_ipow(lambda, 4) + 0.026632 *y*lens_ipow(dx, 2)*dy + -1.38056 *lens_ipow(dy, 6) + 2.37229e-10 *lens_ipow(y, 6) + 0.520946 *x*dx*lens_ipow(dy, 4) + 1.04741e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.75462e-05 *lens_ipow(x, 3)*y*dx*dy + 2.50107e-08 *lens_ipow(x, 6)*lens_ipow(dx, 2) + -0.768699 *lens_ipow(dy, 4)*lens_ipow(lambda, 5) + -971.606 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lambda + -3.09492e-06 *lens_ipow(x, 4)*lens_ipow(dx, 4)*dy + -2780.75 *lens_ipow(dx, 4)*lens_ipow(dy, 6) + -1005.19 *lens_ipow(dx, 10) + -0.00825418 *x*lens_ipow(y, 2)*lens_ipow(dx, 7)+0.0f;
const float dx23 =  + -4.16322e-07 *x + -0.347728 *dx*dy + 0.0180977 *y*dx + 0.0144918 *x*dy + 0.0010468 *x*y + 0.000185366 *y*dx*dy + 0.00887733 *y*lens_ipow(dx, 3) + 1.12861e-05 *lens_ipow(x, 3)*dy + -8.28337 *dx*lens_ipow(dy, 5) + 1.04189 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -5.66044e-08 *x*lens_ipow(y, 4)*dy + 2.09482e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 8.7731e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -3.0748 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 5) + -277.602 *lens_ipow(dx, 7)*dy*lambda + -6.18985e-07 *lens_ipow(x, 4)*lens_ipow(dx, 5) + -3336.9 *lens_ipow(dx, 5)*lens_ipow(dy, 5) + -7.08702e-05 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 6) + 3.41369e-09 *lens_ipow(x, 7)*lens_ipow(dy, 3)+0.0f;
const float dx24 =  + -0.00816755 *dx*lens_ipow(lambda, 3) + -3.8435 *dx*lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -138.801 *lens_ipow(dx, 7)*lens_ipow(dy, 2) + -0.00021261 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + 1.54229e-06 *dy + 0.0180426 *dx*dy + 0.00105802 *y*dx + 0.000937833 *x*dy + 2.98036e-05 *x*y + -3.53435e-06 *x*lens_ipow(dy, 2) + 5.62767e-09 *x*lens_ipow(y, 3) + 1.76923e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 2.23962e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 1.36507e-09 *lens_ipow(x, 4)*y*dx + -2.2941e-06 *x*y*lens_ipow(lambda, 5) + 3.94534e-08 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 0.0277606 *x*lens_ipow(dy, 7) + 9.93105e-13 *lens_ipow(x, 5)*lens_ipow(y, 3)*lambda + 1.28299e-15 *x*lens_ipow(y, 9) + 5.51571e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 4)+0.0f;
const float dx31 =  + -0.0140406  + -3.12399e-06 *dx + 0.0257839 *lens_ipow(dy, 2) + 0.00746742 *lens_ipow(dx, 2) + 0.00307209 *y*dy + 4.44709e-05 *lens_ipow(y, 2) + 0.00105802 *x*dx + 1.49018e-05 *lens_ipow(x, 2) + 8.44151e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + 8.84126e-10 *lens_ipow(y, 4)*dx + -0.000108811 *lens_ipow(lambda, 6) + 1.76923e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 2.73014e-10 *lens_ipow(x, 5)*dx + -1.14705e-06 *lens_ipow(x, 2)*lens_ipow(lambda, 5) + 0.0215553 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -1.60862e-06 *lens_ipow(y, 4)*lens_ipow(dy, 4) + 2.28611e-06 *lens_ipow(y, 4)*lens_ipow(dx, 4) + 1.97267e-07 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + 4.96552e-13 *lens_ipow(x, 6)*lens_ipow(y, 2)*lambda + 2.25592e-12 *lens_ipow(y, 8)*lens_ipow(dx, 2) + 1.01094e-15 *lens_ipow(y, 10) + 5.77347e-15 *lens_ipow(x, 2)*lens_ipow(y, 8) + 4.13678e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dy, 4)+0.0f;
const float dx32 =  + -1.2364e-06  + -3.12399e-06 *y + -0.37082 *dx*dy + 0.0149348 *y*dx + 0.0180426 *x*dy + 0.00105802 *x*y + 1.76825e-10 *lens_ipow(y, 5) + -4.14257 *lens_ipow(dx, 5)*dy + 1.76923e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 1.11981e-06 *lens_ipow(x, 4)*dx*dy + 2.73014e-10 *lens_ipow(x, 5)*y + -181.76 *dx*lens_ipow(dy, 7) + -480.408 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 0.0431106 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 1.82889e-06 *lens_ipow(y, 5)*lens_ipow(dx, 3) + 3.94534e-08 *x*lens_ipow(y, 5)*lens_ipow(dy, 2) + 5.01317e-13 *lens_ipow(y, 9)*dx+0.0f;
const float dx33 =  + 0.580578  + 0.000140063 *dy + 1.54229e-06 *x + -0.518898 *lens_ipow(dy, 2) + -0.18541 *lens_ipow(dx, 2) + 0.0515678 *y*dy + 0.00153604 *lens_ipow(y, 2) + 0.0180426 *x*dx + 0.000468916 *lens_ipow(x, 2) + -0.00360269 *lens_ipow(lambda, 3) + -3.53435e-06 *lens_ipow(x, 2)*dy + -0.690429 *lens_ipow(dx, 6) + 8.84617e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 5.59904e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -165.873 *lens_ipow(dy, 8) + -636.16 *lens_ipow(dx, 2)*lens_ipow(dy, 6) + -240.204 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + 0.0431106 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + -1.28689e-06 *lens_ipow(y, 5)*lens_ipow(dy, 3) + 7.89067e-08 *x*lens_ipow(y, 5)*dx*dy + 0.097162 *lens_ipow(x, 2)*lens_ipow(dy, 6) + 5.51571e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dy, 3)+0.0f;
const float dx34 =  + -0.0108081 *dy*lens_ipow(lambda, 2) + -0.000652864 *y*lens_ipow(lambda, 5) + -5.73524e-06 *lens_ipow(x, 2)*y*lens_ipow(lambda, 4) + 0.0862213 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 1.65517e-13 *lens_ipow(x, 6)*lens_ipow(y, 3)+0.0f;
const float dx40 =  + -5.37446e-06  + -0.00190641 *dx + -0.000236632 *x + -0.000301539 *lens_ipow(dy, 3) + 0.0010938 *y*dx*dy + 0.00383925 *x*lens_ipow(dx, 2) + 0.00227235 *x*lens_ipow(dy, 2)*lambda + -1.19103e-07 *lens_ipow(x, 2)*y*dy + -2.05147e-08 *x*lens_ipow(y, 4) + 4.25764e-05 *lens_ipow(x, 2)*y*dx*dy + -5.81779e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + -2.42007e-08 *lens_ipow(x, 5) + 9.57093e-06 *lens_ipow(y, 3)*dx*dy*lambda + -0.0290985 *lens_ipow(y, 2)*dx*lens_ipow(dy, 6) + -0.0277181 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -1.16225e-13 *x*lens_ipow(y, 8) + 0.000416621 *lens_ipow(x, 2)*y*lens_ipow(dx, 5)*dy + -0.000734088 *lens_ipow(x, 3)*lens_ipow(dy, 6) + 0.000362014 *lens_ipow(x, 3)*lens_ipow(dx, 6)+0.0f;
const float dx41 =  + 6.85637e-06  + 4.10312e-05 *dx + -0.000243392 *y + -0.00304937 *dy*lambda + 5.5843e-06 *y*dy + 0.00437895 *y*lens_ipow(dy, 2) + 0.00170606 *y*lens_ipow(dx, 2) + 0.0010938 *x*dx*dy + -3.97011e-08 *lens_ipow(x, 3)*dy + 0.22313 *lens_ipow(dy, 5) + -2.48852e-08 *lens_ipow(y, 5) + -4.10294e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + 1.41921e-05 *lens_ipow(x, 3)*dx*dy + -2.9089e-08 *lens_ipow(x, 4)*y + 2.87128e-05 *x*lens_ipow(y, 2)*dx*dy*lambda + -9.98706e-08 *lens_ipow(y, 4)*dx*lens_ipow(lambda, 4) + -0.0581971 *x*y*dx*lens_ipow(dy, 6) + -0.0554362 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -4.649e-13 *lens_ipow(x, 2)*lens_ipow(y, 7) + 0.000138874 *lens_ipow(x, 3)*lens_ipow(dx, 5)*dy + -2.76435e-05 *lens_ipow(y, 4)*lens_ipow(dy, 5)*lambda+0.0f;
const float dx42 =  + 9.45902e-05  + 0.0595687 *dx + 4.10312e-05 *y + -0.00190641 *x + -4.19794 *dx*lens_ipow(dy, 2) + -5.46617 *lens_ipow(dx, 3) + 0.00170606 *lens_ipow(y, 2)*dx + 0.0010938 *x*y*dy + 0.00383925 *lens_ipow(x, 2)*dx + 1.41921e-05 *lens_ipow(x, 3)*y*dy + 9.57093e-06 *x*lens_ipow(y, 3)*dy*lambda + -756.64 *dx*lens_ipow(dy, 6)*lens_ipow(lambda, 2) + -1.99741e-08 *lens_ipow(y, 5)*lens_ipow(lambda, 4) + -0.0290985 *x*lens_ipow(y, 2)*lens_ipow(dy, 6) + -0.0831542 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 0.000694369 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*dy + 0.000543021 *lens_ipow(x, 4)*lens_ipow(dx, 5)+0.0f;
const float dx43 =  + -0.0389335 *dy + -0.00304937 *y*lambda + 2.79215e-06 *lens_ipow(y, 2) + -4.19794 *lens_ipow(dx, 2)*dy + 0.00437895 *lens_ipow(y, 2)*dy + -0.000904617 *x*lens_ipow(dy, 2) + 0.0010938 *x*y*dx + 0.00227235 *lens_ipow(x, 2)*dy*lambda + -3.97011e-08 *lens_ipow(x, 3)*y + 1.11565 *y*lens_ipow(dy, 4) + 1.41921e-05 *lens_ipow(x, 3)*y*dx + 9.57093e-06 *x*lens_ipow(y, 3)*dx*lambda + -10.3445 *lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -2269.92 *lens_ipow(dx, 2)*lens_ipow(dy, 5)*lens_ipow(lambda, 2) + -0.174591 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 5) + -0.110872 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.000138874 *lens_ipow(x, 3)*y*lens_ipow(dx, 5) + -0.00110113 *lens_ipow(x, 4)*lens_ipow(dy, 5) + -2.76435e-05 *lens_ipow(y, 5)*lens_ipow(dy, 4)*lambda+0.0f;
const float dx44 =  + 0.262416 *lens_ipow(lambda, 2) + -0.00304937 *y*dy + 0.00113618 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 9.57093e-06 *x*lens_ipow(y, 3)*dx*dy + -10.3445 *lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -756.64 *lens_ipow(dx, 2)*lens_ipow(dy, 6)*lambda + -7.98965e-08 *lens_ipow(y, 5)*dx*lens_ipow(lambda, 3) + -6.94565 *lens_ipow(lambda, 10) + -5.5287e-06 *lens_ipow(y, 5)*lens_ipow(dy, 5)+0.0f;
