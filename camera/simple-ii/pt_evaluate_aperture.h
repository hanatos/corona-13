const float out_x =  + 1.47104e-05  + 25.2552 *dx + 1.64108e-06 *y + 0.88529 *x + 5.31843e-07 *x*y + -1.83617 *dx*lens_ipow(dy, 2) + -1.52153 *lens_ipow(dx, 3) + 0.147112 *y*dx*dy + 0.00609101 *lens_ipow(y, 2)*dx + -0.0554282 *x*lens_ipow(dy, 2) + 0.137339 *x*lens_ipow(dx, 2) + 7.14484e-05 *x*lens_ipow(y, 2) + 0.0100807 *lens_ipow(x, 2)*dx + 0.000107588 *lens_ipow(x, 3) + 0.874804 *dx*lens_ipow(lambda, 3) + 0.00494302 *x*y*dy*lambda + 0.29696 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.0355258 *x*lens_ipow(lambda, 4) + -3.69121e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.24453e-06 *lens_ipow(x, 3)*y*dy + 0.0354535 *y*dx*dy*lens_ipow(lambda, 3) + 0.000170763 *x*lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.000683737 *lens_ipow(y, 2)*lens_ipow(dx, 5) + -2.09067e-05 *lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 0.0926377 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 0.0256521 *x*lens_ipow(dy, 6) + 1.45029e-06 *lens_ipow(x, 4)*lens_ipow(dx, 3) + 0.44816 *dx*lens_ipow(dy, 8) + 0.0372671 *lens_ipow(dx, 9) + 0.00160921 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(lambda, 4) + 6.7244e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 3.01533e-08 *lens_ipow(x, 5)*lens_ipow(dy, 4) + -1.33148e-12 *lens_ipow(x, 8)*dx + -4.65791 *dx*lens_ipow(lambda, 10) + 3.50038 *dx*lens_ipow(dy, 4)*lens_ipow(lambda, 6) + -0.189056 *x*lens_ipow(lambda, 10) + -0.00423704 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 5)*lens_ipow(lambda, 2) + -0.000459711 *x*lens_ipow(y, 2)*lens_ipow(lambda, 8) + 0.000101431 *lens_ipow(x, 2)*y*lens_ipow(dx, 7)*dy + 6.8061e-13 *lens_ipow(x, 3)*lens_ipow(y, 6)*lens_ipow(lambda, 2);
const float out_y =  + -1.66982e-05  + 25.2549 *dy + 0.884941 *y + 2.46235e-06 *x + -0.000487611 *dx*dy + -1.46287 *lens_ipow(dy, 3) + -1.45263 *lens_ipow(dx, 2)*dy + 0.144255 *y*lens_ipow(dy, 2) + -0.0348381 *y*lens_ipow(dx, 2) + 0.010328 *lens_ipow(y, 2)*dy + 0.000109554 *lens_ipow(y, 3) + 0.180011 *x*dx*dy + 0.00367345 *x*y*dx + 0.00654957 *lens_ipow(x, 2)*dy + 0.000108976 *lens_ipow(x, 2)*y + 0.797561 *dy*lens_ipow(lambda, 3) + -6.53929e-05 *x*lens_ipow(dy, 3) + 0.0362703 *y*lens_ipow(lambda, 4) + -0.0176623 *x*dx*lens_ipow(dy, 3) + 9.38447e-07 *x*lens_ipow(y, 3)*dx + -1.53514e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + 0.0188592 *y*lens_ipow(dx, 6) + 1.55345e-06 *lens_ipow(y, 4)*lens_ipow(dy, 3) + 0.000537731 *lens_ipow(x, 2)*lens_ipow(dy, 5) + -5.72727e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3)*dy + 0.0886898 *lens_ipow(dy, 5)*lens_ipow(lambda, 3) + 0.0879175 *lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda + 0.016735 *lens_ipow(dy, 9) + 0.183099 *lens_ipow(dx, 8)*dy + 2.19235e-08 *lens_ipow(y, 5)*lens_ipow(dx, 4) + -1.50573e-12 *lens_ipow(y, 8)*dy + -0.0117741 *x*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 4) + 8.16325e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(lambda, 4) + 4.36515e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -3.22089e-12 *lens_ipow(x, 8)*dy + -4.37325 *dy*lens_ipow(lambda, 10) + -0.662976 *lens_ipow(dx, 6)*lens_ipow(dy, 5) + -0.183804 *y*lens_ipow(lambda, 10) + 9.05996e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 7) + -1.27567e-14 *lens_ipow(x, 6)*lens_ipow(y, 3)*lens_ipow(lambda, 2);
const float out_dx =  + 9.83814e-06  + 0.697653 *dx + 6.74336e-07 *y + -0.0151942 *x + 1.29215e-06 *x*dy + -0.739846 *dx*lens_ipow(dy, 2) + -0.695315 *lens_ipow(dx, 3) + -0.0298412 *y*dx*dy + -0.000313322 *lens_ipow(y, 2)*dx + -0.0161896 *x*lens_ipow(dy, 2) + -0.0435965 *x*lens_ipow(dx, 2) + -0.000377757 *x*y*dy + -8.28865e-06 *x*lens_ipow(y, 2) + -0.000610939 *lens_ipow(x, 2)*dx + -7.12902e-06 *lens_ipow(x, 3) + 0.00244608 *x*lens_ipow(lambda, 3) + 0.0636618 *dx*lens_ipow(lambda, 4) + -0.137652 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.0608135 *lens_ipow(dx, 5) + -0.00012391 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -5.91603e-06 *lens_ipow(y, 3)*dx*dy + 0.000598336 *x*y*lens_ipow(dx, 2)*dy + -8.09698e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 2.45748e-07 *lens_ipow(x, 3)*y*dy + 0.0293939 *dx*lens_ipow(dy, 6) + -0.00058324 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + 1.04311e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -8.03838e-07 *lens_ipow(x, 4)*dx*lens_ipow(dy, 2) + 0.00765051 *x*lens_ipow(dy, 6)*lambda + 7.13623e-09 *x*lens_ipow(y, 4)*lens_ipow(lambda, 4) + 1.07101e-09 *x*lens_ipow(y, 5)*lens_ipow(dy, 3) + -0.000135127 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -0.000396794 *lens_ipow(x, 2)*dx*lens_ipow(dy, 6) + -6.65004e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.112456 *lens_ipow(dx, 9)*lens_ipow(dy, 2) + -7.86205e-07 *lens_ipow(y, 4)*lens_ipow(dx, 7) + 8.15702e-14 *lens_ipow(y, 9)*dx*dy + 0.000866781 *x*y*lens_ipow(dy, 3)*lens_ipow(lambda, 6) + 4.46354e-12 *lens_ipow(x, 7)*y*lens_ipow(dy, 3) + 3.44895e-15 *lens_ipow(x, 9)*lens_ipow(lambda, 2);
const float out_dy =  + 7.00856e-06  + 0.697549 *dy + -0.0151386 *y + -0.697465 *lens_ipow(dy, 3) + -0.726557 *lens_ipow(dx, 2)*dy + -0.0440123 *y*lens_ipow(dy, 2) + -0.0160967 *y*lens_ipow(dx, 2) + -0.000634947 *lens_ipow(y, 2)*dy + -7.62496e-06 *lens_ipow(y, 3) + -0.0293766 *x*dx*dy + -0.000344246 *x*y*dx + -0.000272994 *lens_ipow(x, 2)*dy + -6.82806e-06 *lens_ipow(x, 2)*y + 0.00201202 *y*lens_ipow(lambda, 3) + 0.0560699 *dy*lens_ipow(lambda, 4) + -0.0611097 *lens_ipow(dy, 5) + -0.157042 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -8.49451e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.000140643 *x*y*dx*lens_ipow(lambda, 2) + 0.00079135 *x*y*dx*lens_ipow(dy, 2) + -0.000180509 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -9.48528e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + -3.77564e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + 0.00552454 *y*lens_ipow(dx, 6) + -0.000387735 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.000524004 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + 1.04233e-09 *lens_ipow(x, 5)*dx*dy + 0.0224615 *lens_ipow(dy, 5)*lens_ipow(lambda, 3) + 8.00709e-09 *lens_ipow(y, 5)*lens_ipow(lambda, 3) + 0.034938 *lens_ipow(dx, 8)*dy + -0.00369451 *x*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 4) + -0.00848157 *x*lens_ipow(dx, 5)*lens_ipow(dy, 3) + 1.13243e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)*dy*lambda + 0.182019 *lens_ipow(dx, 2)*lens_ipow(dy, 9) + -0.00975626 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 8) + -9.8409e-06 *lens_ipow(y, 3)*lens_ipow(dx, 8) + 1.92311e-12 *lens_ipow(y, 8)*lens_ipow(dx, 2)*dy + -1.09179e-16 *lens_ipow(y, 10)*dy + -0.000153094 *lens_ipow(x, 2)*lens_ipow(dy, 9) + 2.1074e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dx, 3);
const float out_transmittance =  + 0.917315  + 1.65404e-05 *dx + 6.51812e-07 *y + -0.0194487 *lens_ipow(dy, 2) + -0.0200416 *lens_ipow(dx, 2) + -0.000596146 *y*dy + 3.72738e-06 *y*dx + -5.74521e-06 *lens_ipow(y, 2) + -2.59491e-06 *x*dy + -0.000618751 *x*dx + -8.24328e-06 *lens_ipow(x, 2) + 0.0275291 *lens_ipow(lambda, 3) + -0.0529454 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00139188 *y*lens_ipow(dx, 2)*dy + 1.72682e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -4.18286e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.24884e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -0.00156874 *x*lens_ipow(dx, 3)*lambda + -0.0262837 *lens_ipow(dy, 6) + -0.0489817 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.0444203 *lens_ipow(dx, 6) + -5.0439e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -5.3466e-11 *lens_ipow(y, 6) + -5.70196e-06 *x*y*dx*dy*lens_ipow(lambda, 2) + 1.5866e-12 *lens_ipow(x, 6) + 0.000217906 *x*dx*lens_ipow(lambda, 5) + -0.0327613 *lens_ipow(dx, 4)*lens_ipow(lambda, 4) + -0.00275713 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.000341378 *x*y*dx*lens_ipow(dy, 5) + 2.97856e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 1.68866e-07 *lens_ipow(y, 4)*lens_ipow(dy, 6) + 0.000149333 *x*y*lens_ipow(dx, 7)*dy + -8.05457e-05 *lens_ipow(x, 2)*lens_ipow(dy, 8) + -1.09093e-12 *lens_ipow(x, 2)*lens_ipow(y, 6)*lens_ipow(dy, 2) + 4.75032e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 3.76995e-07 *lens_ipow(x, 4)*lens_ipow(dx, 6) + 4.1321e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 3) + -7.24033e-14 *lens_ipow(x, 5)*lens_ipow(y, 4)*dx + -1.15777e-12 *lens_ipow(x, 8)*lens_ipow(dx, 2) + -0.195899 *lens_ipow(lambda, 11);
