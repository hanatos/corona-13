//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + -7.59428e-05  + 1.85033e-05 *begin_dy + 84.6305 *begin_dx + 0.747087 *begin_x + 0.00352954 *lens_ipow(begin_dx, 2) + -1.33622e-05 *begin_y*begin_lambda + 0.000150834 *begin_y*begin_dy + 5.0693e-05 *begin_x*begin_dy + 0.0196686 *lens_ipow(begin_dy, 2)*begin_lambda + 46.1915 *begin_dx*lens_ipow(begin_dy, 2) + 46.1921 *lens_ipow(begin_dx, 3) + 1.53717 *begin_y*begin_dx*begin_dy + 0.00976078 *lens_ipow(begin_y, 2)*begin_dx + 1.0533 *begin_x*lens_ipow(begin_dy, 2) + 2.60023 *begin_x*lens_ipow(begin_dx, 2) + 0.0246052 *begin_x*begin_y*begin_dy + 0.000119221 *begin_x*lens_ipow(begin_y, 2) + 0.0347923 *lens_ipow(begin_x, 2)*begin_dx + 0.000121546 *lens_ipow(begin_x, 3) + 3.61538 *begin_dx*lens_ipow(begin_lambda, 3) + 0.0690261 *begin_x*lens_ipow(begin_lambda, 4) + -1.73912e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -0.00224725 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*begin_dy + 6.22609 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 1.04057e-07 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + 3.13269e-07 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + 0.143213 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 4) + -0.00388815 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + -0.00211337 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 4) + 3.21586e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2) + -8.59498e-09 *lens_ipow(begin_x, 6)*begin_dx + -0.0764266 *begin_x*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + -0.497948 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 7) + -1.09575e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy*lens_ipow(begin_lambda, 2) + -2.54639e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + -19.3704 *begin_dx*lens_ipow(begin_lambda, 10) + -134355 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 6) + -19051.8 *lens_ipow(begin_dx, 11) + -0.33329 *begin_x*lens_ipow(begin_lambda, 10) + -4.57375e-16 *lens_ipow(begin_x, 11),
       + 6.12477e-05  + 84.7872 *begin_dy + 0.746666 *begin_y + -2.20108e-06 *begin_x + 0.00186409 *lens_ipow(begin_dy, 2) + 0.0104643 *begin_dx*begin_dy + 0.000107669 *begin_y*begin_dx + -5.52229e-07 *lens_ipow(begin_y, 2) + 45.764 *lens_ipow(begin_dy, 3) + 45.4497 *lens_ipow(begin_dx, 2)*begin_dy + 2.57977 *begin_y*lens_ipow(begin_dy, 2) + 1.03579 *begin_y*lens_ipow(begin_dx, 2) + 0.0333983 *lens_ipow(begin_y, 2)*begin_dy + 9.77994e-05 *lens_ipow(begin_y, 3) + 1.51862 *begin_x*begin_dx*begin_dy + -0.000320125 *begin_x*lens_ipow(begin_dx, 2) + 1.75895e-05 *begin_x*begin_y*begin_dy + 0.0242141 *begin_x*begin_y*begin_dx + 2.68061e-07 *begin_x*lens_ipow(begin_y, 2) + 0.00964075 *lens_ipow(begin_x, 2)*begin_dy + 0.000118704 *lens_ipow(begin_x, 2)*begin_y + 0.0397129 *begin_y*lens_ipow(begin_lambda, 3) + 4.46737e-05 *lens_ipow(begin_y, 3)*begin_lambda + 5.08034 *begin_dy*lens_ipow(begin_lambda, 4) + 0.00325202 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 2) + -0.000194699 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.102767 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5) + 3.35509e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + -1.94021e-09 *lens_ipow(begin_y, 6)*begin_dy + 0.000140704 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -5.82207e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + 0.0632117 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*begin_lambda + -4.91574e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 5) + 1.30268e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 5) + -23.5022 *begin_dy*lens_ipow(begin_lambda, 10) + -38.8282 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 6) + -21026.4 *lens_ipow(begin_dy, 11) + -0.208208 *begin_y*lens_ipow(begin_lambda, 10) + -0.0128821 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 8) + -4.79269e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*lens_ipow(begin_lambda, 2)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 84.6305  + 0.00705907 *begin_dx + 46.1915 *lens_ipow(begin_dy, 2) + 138.576 *lens_ipow(begin_dx, 2) + 1.53717 *begin_y*begin_dy + 0.00976078 *lens_ipow(begin_y, 2) + 5.20046 *begin_x*begin_dx + 0.0347923 *lens_ipow(begin_x, 2) + 3.61538 *lens_ipow(begin_lambda, 3) + -1.73912e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -0.00674175 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + 24.9043 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 6.26538e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dx + 0.143213 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + -0.0116644 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.00845349 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + -8.59498e-09 *lens_ipow(begin_x, 6) + -3.48564 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -19.3704 *lens_ipow(begin_lambda, 10) + -671774 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 6) + -209570 *lens_ipow(begin_dx, 10)+0.0f;
    dx1_domega0[0][1] =  + 1.85033e-05  + 0.000150834 *begin_y + 5.0693e-05 *begin_x + 0.0393372 *begin_dy*begin_lambda + 92.383 *begin_dx*begin_dy + 1.53717 *begin_y*begin_dx + 2.10661 *begin_x*begin_dy + 0.0246052 *begin_x*begin_y + -0.00224725 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3) + 12.4522 *begin_x*lens_ipow(begin_dx, 4)*begin_dy + 2.08113e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dy + 0.572851 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 3) + -0.00388815 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 6.43172e-07 *lens_ipow(begin_x, 5)*begin_dy + -0.152853 *begin_x*begin_dy*lens_ipow(begin_lambda, 5) + -1.09575e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + -806128 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 5)+0.0f;
    dx1_domega0[1][0] =  + 0.0104643 *begin_dy + 0.000107669 *begin_y + 90.8995 *begin_dx*begin_dy + 2.07157 *begin_y*begin_dx + 1.51862 *begin_x*begin_dy + -0.00064025 *begin_x*begin_dx + 0.0242141 *begin_x*begin_y + -0.000194699 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 6.71019e-07 *lens_ipow(begin_y, 5)*begin_dx + 0.126423 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda+0.0f;
    dx1_domega0[1][1] =  + 84.7872  + 0.00372818 *begin_dy + 0.0104643 *begin_dx + 137.292 *lens_ipow(begin_dy, 2) + 45.4497 *lens_ipow(begin_dx, 2) + 5.15954 *begin_y*begin_dy + 0.0333983 *lens_ipow(begin_y, 2) + 1.51862 *begin_x*begin_dx + 1.75895e-05 *begin_x*begin_y + 0.00964075 *lens_ipow(begin_x, 2) + 5.08034 *lens_ipow(begin_lambda, 4) + 0.00325202 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -0.000194699 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 0.513833 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + -1.94021e-09 *lens_ipow(begin_y, 6) + 0.000281407 *lens_ipow(begin_x, 2)*begin_y*begin_dy*lens_ipow(begin_lambda, 2) + -5.82207e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + 0.189635 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 6.51342e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 4) + -23.5022 *lens_ipow(begin_lambda, 10) + -194.141 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 6) + -231291 *lens_ipow(begin_dy, 10) + -0.0128821 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 8)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + -0.000261094  + 0.000969761 *begin_dy + 85.081 *begin_dx + -4.2695e-06 *begin_y + 0.246487 *begin_x + 0.0133133 *lens_ipow(begin_dy, 2) + -0.00381362 *begin_dx*begin_dy + -0.000180823 *begin_x*begin_dx + -1.57288e-06 *begin_x*begin_y + -10.7366 *begin_dx*lens_ipow(begin_dy, 2) + -24.9385 *lens_ipow(begin_dx, 3) + 0.78701 *begin_y*begin_dx*begin_dy + 0.00752045 *lens_ipow(begin_y, 2)*begin_dx + 0.0164525 *begin_x*lens_ipow(begin_lambda, 2) + 0.305528 *begin_x*lens_ipow(begin_dy, 2) + 0.00110417 *begin_x*begin_dx*begin_dy + 0.558388 *begin_x*lens_ipow(begin_dx, 2) + 0.0163511 *begin_x*begin_y*begin_dy + 0.000112311 *begin_x*lens_ipow(begin_y, 2) + 0.0182767 *lens_ipow(begin_x, 2)*begin_dx + 9.43017e-05 *lens_ipow(begin_x, 3) + 4.6283 *begin_dx*lens_ipow(begin_lambda, 3) + 0.010192 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.00674852 *begin_y*lens_ipow(begin_dx, 3) + -1.41703e-06 *lens_ipow(begin_y, 3)*begin_dx + -0.245597 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 603.492 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + -0.0205304 *begin_x*lens_ipow(begin_lambda, 6) + 0.000977683 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 2.47606e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2) + 2099.71 *begin_dx*lens_ipow(begin_dy, 8) + 3166.52 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6) + 3376.5 *lens_ipow(begin_dx, 9) + 3.01862e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -1.42349e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + 6.67079e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_lambda, 5) + -23.6542 *begin_dx*lens_ipow(begin_lambda, 10) + -381.824 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 6) + 3.04636e-05 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 6) + -1.83284e-16 *lens_ipow(begin_x, 11);
    out[1] =  + 4.70801e-05  + 100.884 *begin_dy + -0.00145308 *begin_dx + 0.352793 *begin_y + -1.47034e-05 *begin_x + 0.000232338 *begin_y*begin_dx + 0.000316969 *begin_x*begin_dy + -14.7992 *lens_ipow(begin_dy, 3) + 0.140878 *begin_dx*lens_ipow(begin_dy, 2) + -17.6533 *lens_ipow(begin_dx, 2)*begin_dy + -0.00214473 *begin_y*lens_ipow(begin_lambda, 2) + 1.2553 *begin_y*lens_ipow(begin_dy, 2) + 0.0257109 *begin_y*lens_ipow(begin_dx, 2) + 0.0283398 *lens_ipow(begin_y, 2)*begin_dy + -1.10181e-05 *lens_ipow(begin_y, 2)*begin_dx + 0.000132704 *lens_ipow(begin_y, 3) + 0.849816 *begin_x*begin_dx*begin_dy + 0.0145973 *begin_x*begin_y*begin_dx + 0.00955708 *lens_ipow(begin_x, 2)*begin_dy + 0.000120706 *lens_ipow(begin_x, 2)*begin_y + 0.955684 *begin_dy*lens_ipow(begin_lambda, 3) + 0.000107538 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 1.52931e-08 *begin_x*lens_ipow(begin_y, 3) + 0.01849 *begin_x*lens_ipow(begin_dy, 4) + -0.101787 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 656.921 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 303.351 *lens_ipow(begin_dx, 6)*begin_dy + -0.311245 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 0.00139385 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + 2965.04 *lens_ipow(begin_dy, 9) + -14.5789 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 6) + 3253.7 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 3) + 18.1143 *begin_y*lens_ipow(begin_dx, 8) + 3.91083e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 6) + 4.12057e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2) + 4.07455e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + -1.88498e-13 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -250.361 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 5) + -7.43897e-09 *lens_ipow(begin_x, 5)*begin_y*begin_dx*lens_ipow(begin_lambda, 3) + -5.41126 *begin_dy*lens_ipow(begin_lambda, 10);
    out[2] =  + -1.9275e-05  + 0.632881 *begin_dx + -3.02773e-07 *begin_y + -0.00988675 *begin_x + 4.47712e-05 *lens_ipow(begin_lambda, 2) + 0.000213821 *lens_ipow(begin_dy, 2) + -0.000669402 *lens_ipow(begin_dx, 2) + 5.62706e-06 *begin_y*begin_dx + 2.86198e-06 *begin_x*begin_dy + -1.41666e-05 *begin_x*begin_dx + 0.490736 *begin_dx*lens_ipow(begin_dy, 2) + 0.0608098 *lens_ipow(begin_dx, 3) + 0.0174817 *begin_y*begin_dx*begin_dy + 7.91228e-05 *lens_ipow(begin_y, 2)*begin_dx + 0.00822392 *begin_x*lens_ipow(begin_dy, 2) + 1.33317e-05 *begin_x*begin_dx*begin_dy + 0.0159951 *begin_x*lens_ipow(begin_dx, 2) + 0.000263716 *begin_x*begin_y*begin_dy + 1.91408e-06 *begin_x*lens_ipow(begin_y, 2) + 0.000251144 *lens_ipow(begin_x, 2)*begin_dx + 1.62763e-06 *lens_ipow(begin_x, 3) + 0.0868976 *begin_dx*lens_ipow(begin_lambda, 3) + 3.16313e-06 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 4.15778e-08 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -9.08157e-06 *begin_x*begin_y*begin_dx*begin_dy + 0.00155659 *begin_x*lens_ipow(begin_lambda, 4) + -0.00804126 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 4.56061 *begin_dx*lens_ipow(begin_dy, 6) + 13.7318 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 2.50492e-07 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3) + -1.80694e-07 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 9.58079e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4) + 40.4632 *lens_ipow(begin_dx, 9) + -0.0200322 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6) + 1.86769e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_lambda, 5) + -0.40591 *begin_dx*lens_ipow(begin_lambda, 10) + -2.51256 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 8) + -0.00744357 *begin_x*lens_ipow(begin_lambda, 10) + -3.57102e-08 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + -7.56831e-18 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2);
    out[3] =  + 1.53134e-06  + 0.729408 *begin_dy + -2.72508e-05 *begin_dx + -0.00735353 *begin_y + -3.55084e-07 *begin_x + 6.77923e-06 *begin_y*begin_dx + 8.61642e-06 *begin_x*begin_dy + 6.49955e-08 *begin_x*begin_y + 0.403091 *lens_ipow(begin_dy, 3) + 0.0011267 *begin_dx*lens_ipow(begin_dy, 2) + 0.217937 *lens_ipow(begin_dx, 2)*begin_dy + 0.0245462 *begin_y*lens_ipow(begin_dy, 2) + 0.000241935 *begin_y*lens_ipow(begin_dx, 2) + 0.000337505 *lens_ipow(begin_y, 2)*begin_dy + 1.87897e-06 *lens_ipow(begin_y, 3) + 0.0218538 *begin_x*begin_dx*begin_dy + 0.000217494 *begin_x*begin_y*begin_dx + 3.57617e-09 *begin_x*lens_ipow(begin_y, 2) + 8.90972e-05 *lens_ipow(begin_x, 2)*begin_dy + 1.79796e-06 *lens_ipow(begin_x, 2)*begin_y + 0.00781694 *begin_dy*lens_ipow(begin_lambda, 3) + 3.71931e-06 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + -8.15485e-06 *lens_ipow(begin_x, 2)*begin_dy*begin_lambda + -2.04567e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 8.40185e-05 *begin_y*lens_ipow(begin_lambda, 5) + 2.76346e-07 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 3) + 2.48696 *lens_ipow(begin_dx, 6)*begin_dy + -0.00745108 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 1.93403e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + -0.00671151 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + -2.05037e-07 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3) + 5.54073e-07 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_lambda, 5) + 134.301 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 7) + 125.85 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 3) + -0.00682796 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6) + 1.83802e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 5) + -1.56971 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 7) + -9.03264 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 6) + 405.708 *lens_ipow(begin_dy, 11) + -3.15991e-08 *begin_x*lens_ipow(begin_y, 5)*begin_dx*lens_ipow(begin_dy, 4);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.00988675  + 2.86198e-06 *begin_dy + -1.41666e-05 *begin_dx + 0.00822392 *lens_ipow(begin_dy, 2) + 1.33317e-05 *begin_dx*begin_dy + 0.0159951 *lens_ipow(begin_dx, 2) + 0.000263716 *begin_y*begin_dy + 1.91408e-06 *lens_ipow(begin_y, 2) + 0.000502287 *begin_x*begin_dx + 4.8829e-06 *lens_ipow(begin_x, 2) + -9.08157e-06 *begin_y*begin_dx*begin_dy + 0.00155659 *lens_ipow(begin_lambda, 4) + -1.80694e-07 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 2.87424e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + -0.0200322 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6) + 9.33844e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_lambda, 5) + -0.00744357 *lens_ipow(begin_lambda, 10) + -1.78551e-07 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + -6.81148e-17 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)+0.0f;
    domega2_dx0[0][1] =  + -3.02773e-07  + 5.62706e-06 *begin_dx + 0.0174817 *begin_dx*begin_dy + 0.000158246 *begin_y*begin_dx + 0.000263716 *begin_x*begin_dy + 3.82816e-06 *begin_x*begin_y + 6.32627e-06 *begin_y*begin_dx*begin_dy + 8.31556e-08 *begin_y*lens_ipow(begin_dx, 2) + -9.08157e-06 *begin_x*begin_dx*begin_dy + -0.00804126 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 1.00197e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3) + -5.42081e-07 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -3.57102e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 4)*begin_dy + -1.51366e-17 *lens_ipow(begin_x, 9)*begin_y+0.0f;
    domega2_dx0[1][0] =  + -3.55084e-07  + 8.61642e-06 *begin_dy + 6.49955e-08 *begin_y + 0.0218538 *begin_dx*begin_dy + 0.000217494 *begin_y*begin_dx + 3.57617e-09 *lens_ipow(begin_y, 2) + 0.000178194 *begin_x*begin_dy + 3.59591e-06 *begin_x*begin_y + -1.63097e-05 *begin_x*begin_dy*begin_lambda + -4.09133e-10 *begin_x*lens_ipow(begin_y, 3) + -0.00671151 *begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + -6.1511e-07 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 1.10815e-06 *begin_x*begin_y*lens_ipow(begin_lambda, 5) + 7.35207e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 5) + -3.15991e-08 *lens_ipow(begin_y, 5)*begin_dx*lens_ipow(begin_dy, 4)+0.0f;
    domega2_dx0[1][1] =  + -0.00735353  + 6.77923e-06 *begin_dx + 6.49955e-08 *begin_x + 0.0245462 *lens_ipow(begin_dy, 2) + 0.000241935 *lens_ipow(begin_dx, 2) + 0.00067501 *begin_y*begin_dy + 5.63692e-06 *lens_ipow(begin_y, 2) + 0.000217494 *begin_x*begin_dx + 7.15235e-09 *begin_x*begin_y + 1.79796e-06 *lens_ipow(begin_x, 2) + 7.43861e-06 *begin_y*begin_dx*begin_dy + -6.137e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 8.40185e-05 *lens_ipow(begin_lambda, 5) + 8.29039e-07 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -0.00745108 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 5.80209e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -2.05037e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + 5.54073e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 5) + -0.00682796 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6) + -1.57996e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_dy, 4)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.374472  + 0.276112 *begin_lambda + 5.30855e-05 *begin_dy + 4.9898e-07 *begin_y + -1.45201e-07 *begin_x + -0.0899688 *lens_ipow(begin_dy, 2) + 0.000537315 *begin_dx*begin_dy + -0.0898437 *lens_ipow(begin_dx, 2) + -0.00181022 *begin_y*begin_dy + 1.20214e-05 *begin_y*begin_dx + -1.05629e-05 *lens_ipow(begin_y, 2) + -0.00174541 *begin_x*begin_dx + 1.41319e-07 *begin_x*begin_y + -1.14053e-05 *lens_ipow(begin_x, 2) + -0.229326 *lens_ipow(begin_lambda, 3) + -9.13355e-06 *begin_x*lens_ipow(begin_dy, 2) + -3.94553e-07 *lens_ipow(begin_x, 2)*begin_dy + -0.578193 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 4.02007e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 1.06175e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -1.05414e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -1.1974e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -1.71981e-06 *lens_ipow(begin_x, 3)*begin_dx + -4.02729 *lens_ipow(begin_dy, 6) + -6.402 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -4.27945 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -4.72936 *lens_ipow(begin_dx, 6) + 2.03356e-07 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -1.43832e-11 *lens_ipow(begin_y, 6) + 2.80885e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -1.26588e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 5.99488e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 3) + -1.99595e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + 2.57729e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + -6.15097e-14 *lens_ipow(begin_x, 8) + -2.87909e-09 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 4) + 2.46254e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 6) + -1.28103e-16 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4) + 0.410964 *lens_ipow(begin_lambda, 11) + 0.198624 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 7)*begin_lambda;
else
  out[4] = 0.0f;
