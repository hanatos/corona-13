//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + -3.44136e-06  + -0.000225677 *begin_dy + 43.0804 *begin_dx + 0.790034 *begin_x + -0.00255173 *begin_dx*begin_dy + -0.00350182 *lens_ipow(begin_dx, 2) + -3.14678e-05 *begin_x*begin_dy + -6.54549e-05 *begin_x*begin_dx + -3.98629 *begin_dx*lens_ipow(begin_dy, 2) + -3.61141 *lens_ipow(begin_dx, 3) + 0.0963336 *begin_y*begin_dx*begin_dy + 0.000418481 *lens_ipow(begin_y, 2)*begin_dx + -0.304969 *begin_x*lens_ipow(begin_dy, 2) + -0.0264966 *begin_x*lens_ipow(begin_dx, 2) + -0.00942134 *begin_x*begin_y*begin_dy + -0.000135801 *begin_x*lens_ipow(begin_y, 2) + -0.00346055 *lens_ipow(begin_x, 2)*begin_dx + -0.000122032 *lens_ipow(begin_x, 3) + 1.26908 *begin_dx*lens_ipow(begin_lambda, 3) + 0.0110795 *begin_x*lens_ipow(begin_lambda, 3) + -6.06289e-09 *lens_ipow(begin_x, 3)*begin_y + -0.00609 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -6.6452e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.000158005 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -0.0624715 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -0.125383 *begin_x*begin_y*lens_ipow(begin_dy, 5) + 1.72986e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + -3.53209e-11 *begin_x*lens_ipow(begin_y, 6) + -0.429206 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 5) + -8.62198e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 2.20033e-06 *lens_ipow(begin_x, 4)*begin_y*begin_dx*begin_dy + 1.88496e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx + -7.77368e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2) + 0.00178277 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 6) + -1.05692e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + -5.88897e-13 *lens_ipow(begin_x, 9) + -1.96868 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 5) + 3.91758e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_lambda, 5) + -6.7011 *begin_dx*lens_ipow(begin_lambda, 10) + -0.0646457 *begin_x*lens_ipow(begin_lambda, 10),
       + 5.15165e-06  + 46.704 *begin_dy + 0.90776 *begin_y + 5.66776e-07 *begin_x + -0.00683992 *begin_dx*begin_dy + -4.22064e-05 *begin_y*begin_dx + 3.70906e-05 *begin_x*begin_dy + -2.96909e-07 *lens_ipow(begin_x, 2) + 0.742631 *lens_ipow(begin_dy, 3) + -0.363209 *lens_ipow(begin_dx, 2)*begin_dy + 0.0154544 *begin_y*lens_ipow(begin_dy, 2) + -0.144491 *begin_y*lens_ipow(begin_dx, 2) + -0.00564172 *lens_ipow(begin_y, 2)*begin_dy + -0.000106534 *lens_ipow(begin_y, 3) + -0.00092955 *begin_x*lens_ipow(begin_dy, 2) + 0.242385 *begin_x*begin_dx*begin_dy + -1.478e-05 *begin_x*begin_y*begin_dy + -0.00636909 *begin_x*begin_y*begin_dx + 0.00356562 *lens_ipow(begin_x, 2)*begin_dy + -0.000105678 *lens_ipow(begin_x, 2)*begin_y + 0.0175459 *begin_y*lens_ipow(begin_lambda, 3) + 2.37133 *begin_dy*lens_ipow(begin_lambda, 4) + -0.0116404 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00376833 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + -0.0900307 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5) + 3.28891e-05 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3) + 7.85147e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 1.59512e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 3) + -1.78105e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3) + -1.43124e-11 *lens_ipow(begin_x, 6)*begin_y + -0.0773146 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + 0.00131756 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 5) + 2.4764e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 4) + -7.76224e-14 *lens_ipow(begin_y, 9) + -3.62324e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + 1.02381e-11 *lens_ipow(begin_x, 8)*begin_dy + 1.43774e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 5) + 2.49957e-06 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -11.4874 *begin_dy*lens_ipow(begin_lambda, 10) + -0.0958202 *begin_y*lens_ipow(begin_lambda, 10)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 43.0804  + -0.00255173 *begin_dy + -0.00700365 *begin_dx + -6.54549e-05 *begin_x + -3.98629 *lens_ipow(begin_dy, 2) + -10.8342 *lens_ipow(begin_dx, 2) + 0.0963336 *begin_y*begin_dy + 0.000418481 *lens_ipow(begin_y, 2) + -0.0529932 *begin_x*begin_dx + -0.00346055 *lens_ipow(begin_x, 2) + 1.26908 *lens_ipow(begin_lambda, 3) + -0.01218 *begin_x*begin_y*begin_dx*begin_dy + -0.000132904 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 0.00031601 *lens_ipow(begin_x, 3)*begin_dx + -0.312357 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -2.14603 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4) + -8.62198e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 2.20033e-06 *lens_ipow(begin_x, 4)*begin_y*begin_dy + 1.88496e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -7.87471 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 5) + -6.7011 *lens_ipow(begin_lambda, 10)+0.0f;
    dx1_domega0[0][1] =  + -0.000225677  + -0.00255173 *begin_dx + -3.14678e-05 *begin_x + -7.97259 *begin_dx*begin_dy + 0.0963336 *begin_y*begin_dx + -0.609938 *begin_x*begin_dy + -0.00942134 *begin_x*begin_y + -0.00609 *begin_x*begin_y*lens_ipow(begin_dx, 2) + -0.626917 *begin_x*begin_y*lens_ipow(begin_dy, 4) + -0.00017244 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 2.20033e-06 *lens_ipow(begin_x, 4)*begin_y*begin_dx + -1.55474e-06 *lens_ipow(begin_x, 5)*begin_dy + 0.00178277 *begin_x*begin_y*lens_ipow(begin_lambda, 6)+0.0f;
    dx1_domega0[1][0] =  + -0.00683992 *begin_dy + -4.22064e-05 *begin_y + -0.726419 *begin_dx*begin_dy + -0.288983 *begin_y*begin_dx + 0.242385 *begin_x*begin_dy + -0.00636909 *begin_x*begin_y + -0.0116404 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -0.00753667 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 9.86674e-05 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 7.85147e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dy + 0.00131756 *begin_x*begin_y*lens_ipow(begin_lambda, 5) + 4.99913e-06 *lens_ipow(begin_x, 4)*begin_y*begin_dx*lens_ipow(begin_lambda, 3)+0.0f;
    dx1_domega0[1][1] =  + 46.704  + -0.00683992 *begin_dx + 3.70906e-05 *begin_x + 2.22789 *lens_ipow(begin_dy, 2) + -0.363209 *lens_ipow(begin_dx, 2) + 0.0309089 *begin_y*begin_dy + -0.00564172 *lens_ipow(begin_y, 2) + -0.0018591 *begin_x*begin_dy + 0.242385 *begin_x*begin_dx + -1.478e-05 *begin_x*begin_y + 0.00356562 *lens_ipow(begin_x, 2) + 2.37133 *lens_ipow(begin_lambda, 4) + -0.0232807 *begin_x*begin_y*begin_dx*begin_dy + -0.00376833 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -0.450153 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 7.85147e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx + 4.78536e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 2) + -0.154629 *begin_y*begin_dy*lens_ipow(begin_lambda, 5) + 1.02381e-11 *lens_ipow(begin_x, 8) + -11.4874 *lens_ipow(begin_lambda, 10)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + -5.21966e-05  + -0.00269054 *begin_dy + 64.1735 *begin_dx + -0.77313 *begin_x + -0.0565598 *begin_dx*begin_dy + -0.205153 *lens_ipow(begin_dx, 2) + -0.000445248 *begin_x*begin_dy + 72.7431 *begin_dx*lens_ipow(begin_dy, 2) + 30.7833 *lens_ipow(begin_dx, 3) + 0.503941 *begin_y*begin_dx*begin_dy + 0.000693242 *lens_ipow(begin_y, 2)*begin_dx + -1.33371 *begin_x*lens_ipow(begin_dy, 2) + -1.82635 *begin_x*lens_ipow(begin_dx, 2) + 0.002417 *begin_x*begin_y*begin_dy + -0.000192708 *begin_x*lens_ipow(begin_y, 2) + 0.0172448 *lens_ipow(begin_x, 2)*begin_dx + -0.000263213 *lens_ipow(begin_x, 3) + 38.5907 *begin_dx*lens_ipow(begin_lambda, 3) + -0.145518 *begin_x*lens_ipow(begin_dx, 3) + 0.125654 *begin_x*lens_ipow(begin_lambda, 4) + -19.7548 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.343184 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 3338.13 *begin_dx*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + 2.0031 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + 5344.09 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 465.556 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + -241.703 *begin_x*lens_ipow(begin_dx, 6) + -0.0340574 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -2.31564e-06 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + 8.12252e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx + 1.34481e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy + -1.00577e-05 *lens_ipow(begin_x, 4)*begin_y*begin_dx*begin_dy + 1.30979e-07 *lens_ipow(begin_x, 6)*begin_dx + 2501.24 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 3) + 3.56501 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + 4.97816e-08 *lens_ipow(begin_y, 6)*begin_dx*lens_ipow(begin_lambda, 2) + -2.96866e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dy, 2) + -207.461 *begin_dx*lens_ipow(begin_lambda, 10) + -0.613647 *begin_x*lens_ipow(begin_lambda, 10) + 8.78977e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3);
    out[1] =  + 80.5245 *begin_dy + -0.223757 *begin_y + 1.76304e-05 *begin_x + -0.183412 *begin_dx*begin_dy + -0.000847909 *begin_y*begin_dx + 0.00065769 *begin_x*begin_dy + 123.666 *lens_ipow(begin_dy, 3) + 65.1156 *lens_ipow(begin_dx, 2)*begin_dy + 0.671081 *begin_y*lens_ipow(begin_dy, 2) + -0.0323779 *begin_y*lens_ipow(begin_dx, 2) + 0.00819248 *lens_ipow(begin_y, 2)*begin_dy + -0.000147184 *lens_ipow(begin_y, 3) + -0.0196473 *begin_x*lens_ipow(begin_dy, 2) + -1.29881 *begin_x*begin_dx*begin_dy + -0.000258926 *begin_x*begin_y*begin_dy + 0.00207194 *begin_x*begin_y*begin_dx + 0.00412981 *lens_ipow(begin_x, 2)*begin_dy + -0.000252213 *lens_ipow(begin_x, 2)*begin_y + 47.4524 *begin_dy*lens_ipow(begin_lambda, 3) + -0.111497 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 0.503787 *begin_y*lens_ipow(begin_lambda, 4) + 0.102108 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 0.842141 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 2423.9 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 2) + 3576.51 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + 3.16618 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 0.750642 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + -6.14108e-06 *begin_x*lens_ipow(begin_y, 4)*begin_dx*begin_dy + -6.25724e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 9.86536e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + -4.96344e-06 *lens_ipow(begin_x, 5)*begin_dx*begin_dy + 6.78151e-08 *lens_ipow(begin_x, 5)*begin_y*begin_dx + 2713.77 *lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 3) + -7.51022e-09 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2) + -28069.5 *begin_x*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3) + -0.0107871 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 6) + 5.4134e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dy + -248.74 *begin_dy*lens_ipow(begin_lambda, 10) + -2.49029 *begin_y*lens_ipow(begin_lambda, 10) + 8.84606e-05 *lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 6);
    out[2] =  + 3.16697e-06  + -3.97472e-05 *begin_dy + -0.250874 *begin_dx + -0.0124777 *begin_x + -0.000844746 *begin_dx*begin_dy + -0.00180622 *lens_ipow(begin_dx, 2) + 6.51006e-06 *begin_y*begin_dy + 7.3116e-08 *begin_x*begin_y + 2.93183 *begin_dx*lens_ipow(begin_dy, 2) + 1.83648 *lens_ipow(begin_dx, 3) + 0.0214165 *begin_y*begin_dx*begin_dy + -1.01791e-05 *lens_ipow(begin_y, 2)*begin_dx + -0.00867881 *begin_x*lens_ipow(begin_dy, 2) + -0.0236576 *begin_x*lens_ipow(begin_dx, 2) + -0.000146358 *begin_x*begin_y*begin_dy + 1.30571e-06 *begin_x*begin_y*begin_dx + 9.05968e-07 *begin_x*lens_ipow(begin_y, 2) + -0.000124999 *lens_ipow(begin_x, 2)*begin_dx + 2.2047e-06 *lens_ipow(begin_x, 3) + 0.508911 *begin_dx*lens_ipow(begin_lambda, 3) + -0.00154828 *begin_x*lens_ipow(begin_dx, 3) + 0.0757805 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 0.00111915 *begin_x*lens_ipow(begin_lambda, 4) + -2.29544e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -2.56549e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 0.0316159 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 40.8083 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 17.1954 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 2) + 4.19667e-06 *lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_dy, 2) + -2.69981e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.0536859 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 5) + 0.0396166 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + 2.47959e-07 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 0.435418 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -0.0237313 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -0.000260487 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 6) + 0.850931 *begin_x*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 5) + -2.70524 *begin_dx*lens_ipow(begin_lambda, 10) + -0.00626974 *begin_x*lens_ipow(begin_lambda, 10) + -0.000322547 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6);
    out[3] =  + -0.228998 *begin_dy + -0.0116081 *begin_y + 2.00034e-07 *begin_x + -0.002396 *begin_dx*begin_dy + -1.09544e-05 *begin_y*begin_dx + 1.3016e-05 *begin_x*begin_dy + 2.22304e-07 *begin_x*begin_y + 3.75246 *lens_ipow(begin_dy, 3) + 2.26751 *lens_ipow(begin_dx, 2)*begin_dy + 0.0410277 *begin_y*lens_ipow(begin_dy, 2) + 0.00816191 *begin_y*lens_ipow(begin_dx, 2) + 6.29182e-06 *lens_ipow(begin_y, 2)*begin_dy + 5.40986e-07 *lens_ipow(begin_y, 3) + -0.000260123 *begin_x*lens_ipow(begin_dy, 2) + -0.0177934 *begin_x*begin_dx*begin_dy + -2.73159e-06 *begin_x*begin_y*begin_dy + -0.000124414 *begin_x*begin_y*begin_dx + -0.000113656 *lens_ipow(begin_x, 2)*begin_dy + 1.32418e-06 *lens_ipow(begin_x, 2)*begin_y + 0.610365 *begin_dy*lens_ipow(begin_lambda, 3) + -0.0013763 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + -2.19979e-05 *begin_x*begin_y*lens_ipow(begin_dx, 2) + 0.830329 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 0.00612239 *begin_y*lens_ipow(begin_lambda, 4) + 1.21493e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dx + -1.52484e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + 0.0165547 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 4) + -0.000202563 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + 0.0269228 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + 0.00431654 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + 7.67607e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + -1.20998e-07 *lens_ipow(begin_x, 5)*begin_dx*begin_dy + 2.6574e-12 *lens_ipow(begin_x, 6)*begin_y + 0.0689428 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + -3.37741e-06 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_lambda, 5) + 7.45551e-15 *lens_ipow(begin_y, 9) + -0.000445349 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 6) + 1.90644e-06 *lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 5) + -3.16057 *begin_dy*lens_ipow(begin_lambda, 10) + -0.0301143 *begin_y*lens_ipow(begin_lambda, 10);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0124777  + 7.3116e-08 *begin_y + -0.00867881 *lens_ipow(begin_dy, 2) + -0.0236576 *lens_ipow(begin_dx, 2) + -0.000146358 *begin_y*begin_dy + 1.30571e-06 *begin_y*begin_dx + 9.05968e-07 *lens_ipow(begin_y, 2) + -0.000249998 *begin_x*begin_dx + 6.6141e-06 *lens_ipow(begin_x, 2) + -0.00154828 *lens_ipow(begin_dx, 3) + 0.00111915 *lens_ipow(begin_lambda, 4) + -4.59088e-05 *begin_x*begin_y*begin_dx*begin_dy + -7.69646e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 0.0316159 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -2.69981e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.107372 *begin_x*lens_ipow(begin_dx, 5) + 0.435418 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -0.0237313 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -0.000520973 *begin_x*begin_dx*lens_ipow(begin_lambda, 6) + 0.850931 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 5) + -0.00626974 *lens_ipow(begin_lambda, 10) + -0.000322547 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6)+0.0f;
    domega2_dx0[0][1] =  + 6.51006e-06 *begin_dy + 7.3116e-08 *begin_x + 0.0214165 *begin_dx*begin_dy + -2.03581e-05 *begin_y*begin_dx + -0.000146358 *begin_x*begin_dy + 1.30571e-06 *begin_x*begin_dx + 1.81194e-06 *begin_x*begin_y + 0.0757805 *lens_ipow(begin_dx, 3)*begin_dy + -2.29544e-05 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 1.67867e-05 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -5.39961e-05 *begin_x*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 0.0396166 *begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + 9.91837e-07 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -0.0474627 *begin_x*begin_y*lens_ipow(begin_dx, 6) + -0.000645093 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6)+0.0f;
    domega2_dx0[1][0] =  + 2.00034e-07  + 1.3016e-05 *begin_dy + 2.22304e-07 *begin_y + -0.000260123 *lens_ipow(begin_dy, 2) + -0.0177934 *begin_dx*begin_dy + -2.73159e-06 *begin_y*begin_dy + -0.000124414 *begin_y*begin_dx + -0.000227312 *begin_x*begin_dy + 2.64835e-06 *begin_x*begin_y + -0.0013763 *begin_dx*lens_ipow(begin_dy, 2) + -2.19979e-05 *begin_y*lens_ipow(begin_dx, 2) + 1.21493e-07 *lens_ipow(begin_y, 3)*begin_dx + -3.04968e-05 *begin_x*begin_y*lens_ipow(begin_dy, 2) + 0.0269228 *begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + 0.00863308 *begin_x*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + 1.53521e-11 *begin_x*lens_ipow(begin_y, 5) + -6.04989e-07 *lens_ipow(begin_x, 4)*begin_dx*begin_dy + 1.59444e-11 *lens_ipow(begin_x, 5)*begin_y + -6.75481e-06 *begin_x*begin_y*lens_ipow(begin_lambda, 5) + -0.000890698 *begin_x*begin_dy*lens_ipow(begin_lambda, 6)+0.0f;
    domega2_dx0[1][1] =  + -0.0116081  + -1.09544e-05 *begin_dx + 2.22304e-07 *begin_x + 0.0410277 *lens_ipow(begin_dy, 2) + 0.00816191 *lens_ipow(begin_dx, 2) + 1.25836e-05 *begin_y*begin_dy + 1.62296e-06 *lens_ipow(begin_y, 2) + -2.73159e-06 *begin_x*begin_dy + -0.000124414 *begin_x*begin_dx + 1.32418e-06 *lens_ipow(begin_x, 2) + -2.19979e-05 *begin_x*lens_ipow(begin_dx, 2) + 0.00612239 *lens_ipow(begin_lambda, 4) + 3.64478e-07 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -1.52484e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 0.0165547 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 4) + -0.000607689 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 3.83803e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + 2.6574e-12 *lens_ipow(begin_x, 6) + 0.0689428 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + -3.37741e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 5) + 6.70996e-14 *lens_ipow(begin_y, 8) + 7.62575e-06 *lens_ipow(begin_y, 3)*begin_dy*lens_ipow(begin_lambda, 5) + -0.0301143 *lens_ipow(begin_lambda, 10)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.0776915  + 0.225284 *begin_lambda + 2.76322e-06 *begin_dx + 2.71748e-07 *begin_y + -0.0118818 *lens_ipow(begin_dy, 2) + -0.000513865 *begin_dx*begin_dy + -0.00666743 *lens_ipow(begin_dx, 2) + -3.9058e-06 *begin_y*begin_dy + -3.90868e-06 *begin_y*begin_dx + -4.43335e-07 *lens_ipow(begin_y, 2) + -2.01219e-06 *begin_x*begin_dy + -1.54203e-05 *begin_x*begin_dx + -1.91457e-06 *lens_ipow(begin_x, 2) + -0.182881 *lens_ipow(begin_lambda, 3) + -0.00515078 *begin_dx*lens_ipow(begin_dy, 2) + -4.26785e-05 *begin_x*begin_dx*begin_dy + 1.04773e-05 *begin_x*lens_ipow(begin_dx, 2) + 1.91714e-07 *lens_ipow(begin_x, 2)*begin_dy + -2.16923 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.0369953 *begin_y*lens_ipow(begin_dy, 3) + -0.0286968 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.000319611 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -7.99536e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.76217e-07 *lens_ipow(begin_y, 3)*begin_dy + -0.0021188 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + -3.78524e-05 *begin_x*begin_y*begin_dx*begin_dy + 4.72996e-07 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -1.08086e-06 *lens_ipow(begin_x, 3)*begin_dx + -8.54732e-07 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -50.6803 *lens_ipow(begin_dy, 6) + -18.7803 *lens_ipow(begin_dx, 6) + -0.0020069 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4) + -1.29687e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + 2.73684e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx + -1.77131e-10 *lens_ipow(begin_x, 6) + -1304.07 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 4) + -1.73455e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 4) + -163.444 *begin_y*lens_ipow(begin_dy, 9) + -7.04828e-14 *lens_ipow(begin_x, 9)*begin_dx + 0.318525 *lens_ipow(begin_lambda, 11);
else
  out[4] = 0.0f;
