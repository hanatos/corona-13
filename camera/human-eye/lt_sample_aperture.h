//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + 3.28602e-05  + 20.6514 *begin_dx + -5.63678e-06 *begin_y + 0.958992 *begin_x + -0.000264769 *begin_dx*begin_dy + -6.10268e-07 *lens_ipow(begin_y, 2) + 1.78183e-07 *lens_ipow(begin_x, 2) + -2.00887 *begin_dx*lens_ipow(begin_dy, 2) + -0.805632 *lens_ipow(begin_dx, 3) + 1.37149e-05 *begin_y*lens_ipow(begin_dx, 2) + 0.00388807 *lens_ipow(begin_y, 2)*begin_dx + 0.000996169 *begin_x*lens_ipow(begin_lambda, 2) + -0.0796915 *begin_x*lens_ipow(begin_dy, 2) + 0.000146804 *begin_x*lens_ipow(begin_y, 2) + 0.00331119 *lens_ipow(begin_x, 2)*begin_dx + 7.79241e-05 *lens_ipow(begin_x, 3) + 0.00187821 *lens_ipow(begin_dx, 3)*begin_dy*begin_lambda + 0.0496628 *lens_ipow(begin_dx, 5) + 0.0415684 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + -0.00471672 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 1.51626e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -0.000368344 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + -2.83985e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dy + 7.98496e-06 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 3) + 8.78111e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -0.006344 *begin_x*lens_ipow(begin_dy, 6) + 1.79008e-08 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + -2.34358e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dy + 9.60394e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 7) + -3.11898e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + -1.22963e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 3.43725e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 7) + 0.264863 *begin_dx*lens_ipow(begin_lambda, 10) + -0.0526424 *lens_ipow(begin_dx, 7)*lens_ipow(begin_lambda, 4) + 0.00836218 *lens_ipow(begin_dx, 11) + 4.95146e-15 *lens_ipow(begin_y, 10)*begin_dx + -0.00054028 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 8) + 1.0679e-12 *lens_ipow(begin_x, 8)*lens_ipow(begin_dx, 3) + 4.20136e-17 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2) + 3.44444e-16 *lens_ipow(begin_x, 11),
       + -1.37254e-05  + 20.6714 *begin_dy + 0.00014689 *begin_dx + 0.960287 *begin_y + -0.000605106 *lens_ipow(begin_dy, 2) + 0.000288029 *begin_dx*begin_dy + -0.256365 *lens_ipow(begin_dy, 3) + -2.05504 *lens_ipow(begin_dx, 2)*begin_dy + -0.0920141 *begin_y*lens_ipow(begin_dx, 2) + -1.12147e-05 *lens_ipow(begin_y, 3) + 2.80653e-05 *begin_x*lens_ipow(begin_dy, 2) + 0.00295942 *lens_ipow(begin_x, 2)*begin_dy + 0.000131986 *lens_ipow(begin_x, 2)*begin_y + -0.022321 *begin_dy*lens_ipow(begin_lambda, 4) + -0.624661 *lens_ipow(begin_dy, 5) + -0.000149128 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 6.90913e-05 *begin_x*lens_ipow(begin_dy, 3)*begin_lambda + -4.04562e-06 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 0.0012934 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 0.00104629 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 2.47413e-06 *lens_ipow(begin_x, 4)*begin_dy + -7.51521e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_lambda + -7.54881e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + 5.4747e-10 *lens_ipow(begin_y, 7) + -9.85075e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -0.00162525 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 5) + 2.03814e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6) + -0.00377389 *begin_y*lens_ipow(begin_dx, 8) + 8.00912e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + 0.000879528 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 7) + 2.3683e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_lambda, 3) + -0.0266561 *begin_y*lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 4) + 0.000407786 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 7)*lens_ipow(begin_lambda, 2) + -6.63749e-13 *lens_ipow(begin_y, 9)*lens_ipow(begin_dy, 2) + 0.0882062 *begin_x*begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + -6.73945e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 9) + 8.06044e-18 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + -1.21235e-14 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 2) + 2.40636e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 5) + -8.72095e-10 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_lambda, 4)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 20.6514  + -0.000264769 *begin_dy + -2.00887 *lens_ipow(begin_dy, 2) + -2.4169 *lens_ipow(begin_dx, 2) + 2.74298e-05 *begin_y*begin_dx + 0.00388807 *lens_ipow(begin_y, 2) + 0.00331119 *lens_ipow(begin_x, 2) + 0.00563463 *lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 0.248314 *lens_ipow(begin_dx, 4) + 0.124705 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.00943344 *begin_x*begin_dx*lens_ipow(begin_lambda, 2) + 1.51626e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 7.98496e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + 3.51244e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 3.58015e-08 *begin_x*lens_ipow(begin_y, 4)*begin_dx + 0.000672276 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -9.35694e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.264863 *lens_ipow(begin_lambda, 10) + -0.368497 *lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 4) + 0.091984 *lens_ipow(begin_dx, 10) + 4.95146e-15 *lens_ipow(begin_y, 10) + -0.00054028 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 8) + 3.20369e-12 *lens_ipow(begin_x, 8)*lens_ipow(begin_dx, 2)+0.0f;
    dx1_domega0[0][1] =  + -0.000264769 *begin_dx + -4.01774 *begin_dx*begin_dy + -0.159383 *begin_x*begin_dy + 0.00187821 *lens_ipow(begin_dx, 3)*begin_lambda + 0.0415684 *begin_y*lens_ipow(begin_dx, 3) + -0.000736689 *lens_ipow(begin_x, 3)*begin_dy + -2.83985e-05 *lens_ipow(begin_x, 3)*begin_y + -0.038064 *begin_x*lens_ipow(begin_dy, 5) + -2.34358e-09 *begin_x*lens_ipow(begin_y, 5) + -9.35694e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -2.45926e-07 *lens_ipow(begin_x, 4)*begin_dy*lens_ipow(begin_lambda, 3) + -0.00432224 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 7)+0.0f;
    dx1_domega0[1][0] =  + 0.00014689  + 0.000288029 *begin_dy + -4.11008 *begin_dx*begin_dy + -0.184028 *begin_y*begin_dx + -4.04562e-06 *begin_x*lens_ipow(begin_y, 3) + -7.51521e-06 *lens_ipow(begin_x, 3)*begin_y*begin_lambda + -0.000301952 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3) + -0.000197015 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_lambda, 3) + -0.00162525 *begin_x*begin_y*lens_ipow(begin_lambda, 5) + -0.0301911 *begin_y*lens_ipow(begin_dx, 7) + 0.000240274 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.159937 *begin_y*lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 4) + 0.0882062 *begin_x*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6)+0.0f;
    dx1_domega0[1][1] =  + 20.6714  + -0.00121021 *begin_dy + 0.000288029 *begin_dx + -0.769095 *lens_ipow(begin_dy, 2) + -2.05504 *lens_ipow(begin_dx, 2) + 5.61305e-05 *begin_x*begin_dy + 0.00295942 *lens_ipow(begin_x, 2) + -0.022321 *lens_ipow(begin_lambda, 4) + -3.12331 *lens_ipow(begin_dy, 4) + -0.000298257 *lens_ipow(begin_y, 3)*begin_dy + 0.000207274 *begin_x*lens_ipow(begin_dy, 2)*begin_lambda + 0.0012934 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 2) + 0.00313887 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 2.47413e-06 *lens_ipow(begin_x, 4) + 0.000240274 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 0.000879528 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 7) + 0.00285451 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 2) + -1.3275e-12 *lens_ipow(begin_y, 9)*begin_dy + 0.264619 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -0.00060655 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 8) + 1.20318e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 4)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + 5.56432e-05  + 0.000701894 *begin_dy + 22.892 *begin_dx + 0.89515 *begin_x + -0.00120568 *lens_ipow(begin_dx, 2) + 3.56308e-06 *begin_x*begin_y + -0.000425984 *lens_ipow(begin_dy, 3) + -4.20488 *begin_dx*lens_ipow(begin_dy, 2) + -10.9827 *lens_ipow(begin_dx, 3) + 0.00639244 *lens_ipow(begin_y, 2)*begin_dx + 0.914082 *begin_x*lens_ipow(begin_dy, 2) + 0.0809304 *begin_x*begin_y*begin_dy + 0.00167888 *begin_x*lens_ipow(begin_y, 2) + 0.0442182 *lens_ipow(begin_x, 2)*begin_dx + 0.00103184 *lens_ipow(begin_x, 3) + 0.0669659 *begin_dx*lens_ipow(begin_lambda, 4) + 1.24655 *lens_ipow(begin_dx, 5) + -0.0130335 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + -1.68051e-06 *lens_ipow(begin_y, 4)*begin_dx + 0.0244884 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.000378466 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 3.77056e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 0.0154115 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 1.24686 *begin_dx*lens_ipow(begin_dy, 6) + 9.68983e-07 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + -3.24564e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + -0.00306302 *lens_ipow(begin_dx, 7)*begin_dy + -0.000765422 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 3) + 0.985781 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 0.000257139 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 6) + 0.0234978 *lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 4) + -0.380114 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 6) + 1.34932 *lens_ipow(begin_dx, 11) + 1.5195e-09 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 5) + 6.42518e-13 *lens_ipow(begin_y, 9)*begin_dx*begin_dy + 0.00453838 *begin_x*lens_ipow(begin_dy, 10) + -1.96757e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 8) + -2.84796e-16 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 8) + -2.91206e-13 *lens_ipow(begin_x, 9)*lens_ipow(begin_lambda, 2) + -4.87363e-14 *lens_ipow(begin_x, 9)*lens_ipow(begin_dy, 2);
    out[1] =  + -0.000132409  + 22.8912 *begin_dy + 0.893957 *begin_y + -1.32992e-05 *begin_x + -0.000264599 *lens_ipow(begin_dy, 2) + -3.18384e-05 *begin_y*begin_dx + -11.4139 *lens_ipow(begin_dy, 3) + -3.60015 *lens_ipow(begin_dx, 2)*begin_dy + 1.08591 *begin_y*lens_ipow(begin_dx, 2) + 0.0472233 *lens_ipow(begin_y, 2)*begin_dy + 0.00112355 *lens_ipow(begin_y, 3) + -9.85196e-05 *begin_x*lens_ipow(begin_dy, 2) + 0.0920209 *begin_x*begin_y*begin_dx + 0.00510667 *lens_ipow(begin_x, 2)*begin_dy + 0.00184543 *lens_ipow(begin_x, 2)*begin_y + 0.00260025 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 3.27243e-05 *begin_y*lens_ipow(begin_lambda, 3) + 1.01323 *lens_ipow(begin_dy, 5) + -0.269555 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.058792 *begin_y*lens_ipow(begin_dx, 4) + 0.000379 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -0.00556202 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 1.7365e-07 *lens_ipow(begin_x, 4)*begin_y + -7.73348e-11 *begin_x*lens_ipow(begin_y, 5) + 0.207769 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 2) + 0.781216 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 0.136733 *lens_ipow(begin_dx, 6)*begin_dy + -1.95109e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -1.04174 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 5) + -1.23781e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 5) + 1.08672e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 4) + -4.29645e-13 *lens_ipow(begin_y, 9) + -4.87941e-13 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -2.00512e-08 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 3) + 1.16531 *lens_ipow(begin_dy, 11) + -0.0263477 *begin_y*lens_ipow(begin_dx, 10) + 3.16315e-11 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 4) + 0.00189666 *begin_x*lens_ipow(begin_dy, 8)*lens_ipow(begin_lambda, 2) + -2.95778e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 7) + 4.28192e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_dy, 3);
    out[2] =  + 1.96461e-06  + 3.61732e-05 *begin_dy + -3.08487 *begin_dx + -0.17865 *begin_x + 0.00017398 *lens_ipow(begin_dy, 2) + -0.000795532 *begin_dx*begin_dy + 1.07574e-07 *lens_ipow(begin_x, 2) + -0.852138 *begin_dx*lens_ipow(begin_dy, 2) + 0.300661 *lens_ipow(begin_dx, 3) + 0.00405031 *lens_ipow(begin_y, 2)*begin_dx + -0.14162 *begin_x*lens_ipow(begin_dy, 2) + -0.0082106 *begin_x*begin_y*begin_dy + 5.15698e-05 *begin_x*lens_ipow(begin_y, 2) + -6.17707e-08 *lens_ipow(begin_x, 2)*begin_y + 6.12909e-05 *lens_ipow(begin_x, 3) + -1.76096e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 5.83388e-09 *lens_ipow(begin_x, 3)*begin_y + -0.288351 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 0.0188602 *lens_ipow(begin_dx, 5) + 0.00261061 *begin_y*begin_dx*lens_ipow(begin_dy, 3) + 7.74788e-08 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 0.00386922 *begin_x*lens_ipow(begin_lambda, 4) + 2.57088e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dy + -5.9128e-05 *begin_x*lens_ipow(begin_dy, 5) + -1.38023e-10 *begin_x*lens_ipow(begin_y, 6) + 4.15824e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4) + 3.1552e-11 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + 0.230723 *begin_dx*lens_ipow(begin_lambda, 8) + -3.49708e-13 *lens_ipow(begin_x, 9) + 2.89272e-08 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 6) + 0.0307951 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 8) + 0.0596539 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 8) + 0.0370206 *lens_ipow(begin_dx, 9)*lens_ipow(begin_dy, 2) + 0.068508 *lens_ipow(begin_dx, 11) + -6.79117e-13 *lens_ipow(begin_y, 8)*lens_ipow(begin_dx, 3) + -2.8114e-14 *lens_ipow(begin_y, 10)*begin_dx + 0.00849624 *begin_x*lens_ipow(begin_dy, 10) + -2.49069e-10 *begin_x*lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 4) + -3.72056e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 5) + 1.63431e-13 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2);
    out[3] =  + -2.66492e-05  + -3.00474 *begin_dy + -0.175046 *begin_y + -1.4291e-05 *begin_x + 0.000241608 *lens_ipow(begin_dy, 2) + 7.97183e-05 *lens_ipow(begin_dx, 2) + 3.2403e-05 *begin_y*begin_dx + 0.285697 *lens_ipow(begin_dy, 3) + 3.60852 *lens_ipow(begin_dx, 2)*begin_dy + -0.0978864 *begin_y*lens_ipow(begin_dx, 2) + 6.04463e-05 *lens_ipow(begin_y, 3) + -1.27334e-05 *begin_x*lens_ipow(begin_dy, 2) + 0.530097 *begin_x*begin_dx*begin_dy + 0.0167524 *lens_ipow(begin_x, 2)*begin_dy + 0.000251239 *lens_ipow(begin_x, 2)*begin_y + -0.00159674 *begin_dx*lens_ipow(begin_lambda, 3) + -3.17122e-05 *begin_x*lens_ipow(begin_dy, 3) + -6.49808e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -1.16958e-07 *lens_ipow(begin_x, 3)*begin_dy + 0.0246627 *lens_ipow(begin_dy, 5) + 0.275017 *lens_ipow(begin_dx, 4)*begin_dy + 0.00389794 *begin_y*lens_ipow(begin_lambda, 4) + 1.06781e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + -5.64576e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 2.94322e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + 7.28386e-10 *lens_ipow(begin_x, 6)*begin_dy + 0.157265 *begin_dy*lens_ipow(begin_lambda, 7) + 0.0341902 *begin_y*lens_ipow(begin_dx, 8) + -2.5341e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 7) + 3.10585e-12 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 2) + -3.66367e-13 *lens_ipow(begin_y, 9) + 0.012404 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 7) + 5.51249e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6) + 0.0510414 *lens_ipow(begin_dy, 11) + -0.106736 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 7) + 0.289689 *lens_ipow(begin_dx, 10)*begin_dy + 1.84132e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 4) + 0.00011509 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 8) + 3.47266e-11 *lens_ipow(begin_x, 7)*begin_y*lens_ipow(begin_dx, 3) + -5.59197e-14 *lens_ipow(begin_x, 10)*begin_dy;
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.17865  + 2.15149e-07 *begin_x + -0.14162 *lens_ipow(begin_dy, 2) + -0.0082106 *begin_y*begin_dy + 5.15698e-05 *lens_ipow(begin_y, 2) + -1.23541e-07 *begin_x*begin_y + 0.000183873 *lens_ipow(begin_x, 2) + 1.75016e-08 *lens_ipow(begin_x, 2)*begin_y + 0.00386922 *lens_ipow(begin_lambda, 4) + 7.71263e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -5.9128e-05 *lens_ipow(begin_dy, 5) + -1.38023e-10 *lens_ipow(begin_y, 6) + 1.24747e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 1.5776e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -3.14737e-12 *lens_ipow(begin_x, 8) + 0.00849624 *lens_ipow(begin_dy, 10) + -2.49069e-10 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 4) + -2.23234e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 5) + 1.14401e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)+0.0f;
    domega2_dx0[0][1] =  + 0.00810061 *begin_y*begin_dx + -0.0082106 *begin_x*begin_dy + 0.00010314 *begin_x*begin_y + -6.17707e-08 *lens_ipow(begin_x, 2) + -3.52191e-06 *begin_y*lens_ipow(begin_dx, 2) + 5.83388e-09 *lens_ipow(begin_x, 3) + 0.00261061 *begin_dx*lens_ipow(begin_dy, 3) + 2.32436e-07 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 2.57088e-06 *lens_ipow(begin_x, 3)*begin_dy + -8.28139e-10 *begin_x*lens_ipow(begin_y, 5) + 6.31041e-11 *lens_ipow(begin_x, 5)*begin_y + 1.15709e-07 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 6) + -5.43294e-12 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 3) + -2.8114e-13 *lens_ipow(begin_y, 9)*begin_dx + -1.49441e-09 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 4) + 3.26861e-13 *lens_ipow(begin_x, 7)*begin_y*lens_ipow(begin_dy, 2)+0.0f;
    domega2_dx0[1][0] =  + -1.4291e-05  + -1.27334e-05 *lens_ipow(begin_dy, 2) + 0.530097 *begin_dx*begin_dy + 0.0335047 *begin_x*begin_dy + 0.000502478 *begin_x*begin_y + -3.17122e-05 *lens_ipow(begin_dy, 3) + -1.29962e-08 *begin_x*lens_ipow(begin_y, 2) + -3.50873e-07 *lens_ipow(begin_x, 2)*begin_dy + 2.13562e-05 *begin_x*lens_ipow(begin_dy, 3) + -1.12915e-07 *begin_x*lens_ipow(begin_y, 3) + 4.37032e-09 *lens_ipow(begin_x, 5)*begin_dy + 0.000230181 *begin_x*begin_dy*lens_ipow(begin_lambda, 8) + 2.43086e-10 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dx, 3) + -5.59197e-13 *lens_ipow(begin_x, 9)*begin_dy+0.0f;
    domega2_dx0[1][1] =  + -0.175046  + 3.2403e-05 *begin_dx + -0.0978864 *lens_ipow(begin_dx, 2) + 0.000181339 *lens_ipow(begin_y, 2) + 0.000251239 *lens_ipow(begin_x, 2) + -1.29962e-08 *lens_ipow(begin_x, 2)*begin_y + 0.00389794 *lens_ipow(begin_lambda, 4) + -1.69373e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 8.82965e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + 0.0341902 *lens_ipow(begin_dx, 8) + -5.0682e-06 *begin_y*lens_ipow(begin_dx, 7) + 2.17409e-11 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2) + -3.2973e-12 *lens_ipow(begin_y, 8) + 0.00011025 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6) + 1.28893e-09 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 4) + 3.47266e-11 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 3)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.973822  + -2.97671e-05 *begin_dy + -5.14627e-06 *begin_x + -0.246501 *lens_ipow(begin_dy, 2) + -0.260095 *lens_ipow(begin_dx, 2) + -0.0247553 *begin_y*begin_dy + -0.000628935 *lens_ipow(begin_y, 2) + -0.026154 *begin_x*begin_dx + -6.12675e-07 *begin_x*begin_y + -0.000671746 *lens_ipow(begin_x, 2) + 0.00906144 *lens_ipow(begin_lambda, 3) + 0.000108961 *lens_ipow(begin_dy, 3) + -0.000563233 *begin_dx*lens_ipow(begin_dy, 2) + -1.55559e-05 *begin_y*lens_ipow(begin_dx, 2) + -0.000262963 *begin_dy*lens_ipow(begin_lambda, 3) + -0.00125484 *begin_y*lens_ipow(begin_dy, 3) + -7.54787e-06 *begin_y*lens_ipow(begin_dx, 3) + 0.000188807 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -2.70635e-07 *lens_ipow(begin_y, 4) + -1.4036e-05 *begin_x*lens_ipow(begin_dy, 3) + -0.00104707 *begin_x*lens_ipow(begin_dx, 3) + 0.000176278 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -6.65617e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -1.65162e-07 *lens_ipow(begin_x, 4) + -2.92612e-10 *begin_x*lens_ipow(begin_y, 4) + -0.131755 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -0.0497247 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -1.25323e-08 *lens_ipow(begin_y, 5)*begin_dy + -2.99796e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -7.19264e-09 *lens_ipow(begin_x, 5)*begin_dx + -2.93313e-12 *lens_ipow(begin_x, 6)*begin_dx + 3.3089e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -0.0253997 *lens_ipow(begin_dy, 10) + 0.066657 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 8) + -0.01735 *lens_ipow(begin_dx, 10) + 3.19098e-07 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -7.80495e-15 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8) + -2.47533e-09 *lens_ipow(begin_x, 5)*begin_dx*lens_ipow(begin_dy, 4) + -0.0672645 *lens_ipow(begin_lambda, 11) + -8.39641e-11 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 2);
else
  out[4] = 0.0f;
