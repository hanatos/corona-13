const float dx00 =  + 0.73415  + -1.68227e-05 *y + 1.4131e-05 *x + -0.000247709 *lens_ipow(dy, 2) + 0.824824 *lens_ipow(dx, 2) + 0.00958852 *y*dy + -0.000479556 *lens_ipow(y, 2) + 0.0525686 *x*dx + -0.0013094 *lens_ipow(x, 2) + -0.166597 *y*lens_ipow(dx, 2)*dy + 0.120904 *x*dx*lens_ipow(dy, 2) + -0.0061466 *x*y*dx*dy + 0.00789936 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 2.83565 *lens_ipow(dy, 6) + -8.22628e-09 *lens_ipow(y, 6) + 0.0116364 *x*y*lens_ipow(dx, 3)*dy + -0.00112368 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -1.57276e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.00375236 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 4.892e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 4) + 0.000114902 *lens_ipow(x, 4)*lens_ipow(dx, 4) + -8.02755e-12 *lens_ipow(x, 4)*lens_ipow(y, 6) + 3.01539e-11 *lens_ipow(x, 8)*y*dy + -1.48115e-12 *lens_ipow(x, 10)+0.0f;
const float dx01 =  + -1.68227e-05 *x + 0.229003 *dx*dy + 0.00958852 *x*dy + -0.000959112 *x*y + 0.114283 *y*lens_ipow(dx, 3) + 7.06946e-05 *lens_ipow(y, 3)*dx + -0.166597 *x*lens_ipow(dx, 2)*dy + -0.0030733 *lens_ipow(x, 2)*dx*dy + 0.0217599 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -4.93577e-08 *x*lens_ipow(y, 5) + 0.00581822 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -0.00112368 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -6.29103e-08 *lens_ipow(x, 5)*y + -97.931 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + 1.30908 *y*lens_ipow(dx, 7) + -0.0112571 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 3.26133e-06 *lens_ipow(x, 3)*y*lens_ipow(lambda, 4) + -9.63306e-12 *lens_ipow(x, 5)*lens_ipow(y, 5) + 3.35043e-12 *lens_ipow(x, 9)*dy+0.0f;
const float dx02 =  + 24.6053  + 0.0165703 *dy + -4.55325 *lens_ipow(dy, 2) + 1.35346 *lens_ipow(dx, 2) + 0.229003 *y*dy + 1.64965 *x*dx + 0.0262843 *lens_ipow(x, 2) + 0.223873 *lens_ipow(lambda, 4) + 0.171424 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.76736e-05 *lens_ipow(y, 4) + -0.333195 *x*y*dx*dy + 0.060452 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.0030733 *lens_ipow(x, 2)*y*dy + 0.00725331 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 0.0174547 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.00168553 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 6758.46 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + -293.793 *y*lens_ipow(dx, 2)*lens_ipow(dy, 5) + 4.58177 *lens_ipow(y, 2)*lens_ipow(dx, 6) + -0.00750472 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 9.19212e-05 *lens_ipow(x, 5)*lens_ipow(dx, 3) + 2258.93 *lens_ipow(dy, 10) + 6007.67 *lens_ipow(dx, 10)+0.0f;
const float dx03 =  + 0.000766471  + 0.0165703 *dx + -9.10649 *dx*dy + 0.229003 *y*dx + -0.000495417 *x*dy + 0.00958852 *x*y + -0.166597 *x*y*lens_ipow(dx, 2) + 0.120904 *lens_ipow(x, 2)*dx*dy + -0.0030733 *lens_ipow(x, 2)*y*dx + 0.00526624 *lens_ipow(x, 3)*dy + 0.0217599 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 17.0139 *x*lens_ipow(dy, 5) + 0.00581822 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 1930.99 *lens_ipow(dx, 7)*dy + -489.655 *y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -0.0112571 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 22589.3 *dx*lens_ipow(dy, 9) + 3.35043e-12 *lens_ipow(x, 9)*y+0.0f;
const float dx04 =  + 0.895491 *dx*lens_ipow(lambda, 3) + 6.52266e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx10 =  + -1.4482e-05  + 0.602323 *dx*dy + 0.0149017 *y*dx + 0.0149934 *x*dy + -0.000846788 *x*y + -0.203875 *y*dx*lens_ipow(dy, 2) + -0.00560888 *lens_ipow(y, 2)*dx*dy + 0.0854419 *x*lens_ipow(dy, 3) + 6.80289e-05 *lens_ipow(x, 3)*dy + 0.00930335 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 2.33885e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 4) + -5.60279e-06 *x*lens_ipow(y, 4)*lens_ipow(dy, 3) + -1.19288e-09 *lens_ipow(x, 5)*lens_ipow(y, 3) + 1.03199e-06 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy*lambda + -98.6387 *dx*lens_ipow(dy, 9) + -1.50275e-09 *lens_ipow(y, 7)*dx*lens_ipow(lambda, 2) + -1.29257e-12 *x*lens_ipow(y, 9) + -6.01765e-12 *lens_ipow(x, 3)*lens_ipow(y, 7) + -9.36805e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.23884e-11 *lens_ipow(x, 9)*dy + -1.26686e-12 *lens_ipow(x, 9)*y+0.0f;
const float dx11 =  + 0.734654  + -0.000447977 *dy + 0.977616 *lens_ipow(dy, 2) + 0.0586618 *y*dy + -0.00136635 *lens_ipow(y, 2) + 0.0149017 *x*dx + -0.000423394 *lens_ipow(x, 2) + -0.00379635 *lens_ipow(lambda, 4) + 0.972973 *lens_ipow(dx, 4) + 0.00605602 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.203875 *x*dx*lens_ipow(dy, 2) + -0.0112178 *x*y*dx*dy + 0.000103454 *lens_ipow(y, 4)*lens_ipow(dy, 4) + -1.35018e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2) + 3.50827e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4) + -1.12056e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3) + -5.96439e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + -21.8163 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 4.12797e-07 *lens_ipow(x, 5)*y*dx*dy*lambda + -1.32687e-12 *lens_ipow(y, 10) + -1.05192e-08 *x*lens_ipow(y, 6)*dx*lens_ipow(lambda, 2) + -5.81656e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + -1.05309e-11 *lens_ipow(x, 4)*lens_ipow(y, 6) + -3.12268e-08 *lens_ipow(x, 6)*y*lens_ipow(dy, 3) + -1.26686e-13 *lens_ipow(x, 10)+0.0f;
const float dx12 =  + -2.6591 *dx*dy + 0.602323 *x*dy + 0.0149017 *x*y + 77.9381 *dx*lens_ipow(dy, 3) + 3.89189 *y*lens_ipow(dx, 3) + 0.00403735 *lens_ipow(y, 3)*dx + -0.203875 *x*y*lens_ipow(dy, 2) + -0.00560888 *x*lens_ipow(y, 2)*dy + 663.656 *lens_ipow(dx, 5)*dy + 0.00930335 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -3.85764e-09 *lens_ipow(y, 7)*dx + 4.67769e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 3) + -87.2651 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 2.06399e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy*lambda + -98.6387 *x*lens_ipow(dy, 9) + -1.50275e-09 *x*lens_ipow(y, 7)*lens_ipow(lambda, 2)+0.0f;
const float dx13 =  + 24.4897  + -0.000447977 *y + 8.07232 *lens_ipow(dy, 2) + -1.32955 *lens_ipow(dx, 2) + 1.95523 *y*dy + 0.0293309 *lens_ipow(y, 2) + 0.602323 *x*dx + 0.0074967 *lens_ipow(x, 2) + 116.907 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.407751 *x*y*dx*dy + -0.00560888 *x*lens_ipow(y, 2)*dx + 0.128163 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.70072e-05 *lens_ipow(x, 4) + 110.609 *lens_ipow(dx, 6) + 0.00310112 *lens_ipow(x, 3)*lens_ipow(dx, 3) + 8.27631e-05 *lens_ipow(y, 5)*lens_ipow(dy, 3) + -8.40419e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2) + -43.6326 *y*lens_ipow(dx, 4)*dy*lens_ipow(lambda, 3) + 2.06399e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*lambda + 6586.89 *lens_ipow(dy, 10) + -887.748 *x*dx*lens_ipow(dy, 8) + -4.68402e-08 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.23884e-12 *lens_ipow(x, 10)+0.0f;
const float dx14 =  + -0.0151854 *y*lens_ipow(lambda, 3) + -65.4489 *y*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 2.06399e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*dy + -3.0055e-09 *x*lens_ipow(y, 7)*dx*lambda+0.0f;
const float dx20 =  + -0.0120897  + -1.7626e-06 *y + 0.0326892 *lens_ipow(dy, 2) + 0.113399 *lens_ipow(dx, 2) + 0.0047027 *y*dy + 6.01405e-05 *lens_ipow(y, 2) + 0.0144762 *x*dx + 0.000180543 *lens_ipow(x, 2) + -0.00994913 *lens_ipow(lambda, 4) + 0.0206805 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.000346014 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0205751 *lens_ipow(dy, 6) + -0.0109375 *y*lens_ipow(dx, 4)*dy + 7.82964e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0120861 *x*dx*lens_ipow(dy, 4) + -3.86181e-06 *lens_ipow(x, 3)*y*dx*dy + -0.0193529 *x*lens_ipow(dx, 7) + -7.00303e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + 2.939e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -1.25018e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + 1.30871e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 5) + -1.31813e-14 *lens_ipow(y, 10) + -4.33699e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dy, 3) + -8.75587e-09 *lens_ipow(x, 6)*y*lens_ipow(dy, 3) + -1.53422e-13 *lens_ipow(x, 10)+0.0f;
const float dx21 =  + -3.83012e-06  + -5.98392e-05 *dx + -1.7626e-06 *x + 0.0679381 *dx*dy + 0.0041164 *y*dx + 0.0047027 *x*dy + 0.000120281 *x*y + 0.00604365 *dx*dy*lens_ipow(lambda, 3) + -0.0109375 *x*lens_ipow(dx, 4)*dy + 0.000156593 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -9.65451e-07 *lens_ipow(x, 4)*dx*dy + -8.47994e-05 *lens_ipow(y, 3)*lens_ipow(dx, 5) + -4.49118e-06 *lens_ipow(y, 4)*dx*lens_ipow(dy, 3) + -1.40061e-10 *lens_ipow(x, 3)*lens_ipow(y, 5) + 1.7634e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy + -3.57194e-11 *lens_ipow(x, 7)*y + 8.72472e-07 *lens_ipow(x, 3)*y*lens_ipow(lambda, 5) + -1.31813e-13 *x*lens_ipow(y, 9) + -7.22832e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dy, 3) + -1.25084e-09 *lens_ipow(x, 7)*lens_ipow(dy, 3)+0.0f;
const float dx22 =  + 0.977122  + -5.98392e-05 *y + 0.29759 *lens_ipow(dy, 2) + 1.1168 *lens_ipow(dx, 2) + 0.0679381 *y*dy + 0.0020582 *lens_ipow(y, 2) + 0.226798 *x*dx + 0.00723811 *lens_ipow(x, 2) + -0.216979 *lens_ipow(lambda, 3) + 0.041361 *x*dx*lens_ipow(lambda, 2) + 0.00604365 *y*dy*lens_ipow(lambda, 3) + -3.57103 *lens_ipow(dy, 6) + -13.3998 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.0437501 *x*y*lens_ipow(dx, 3)*dy + 0.000156593 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.00604305 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -9.65451e-07 *lens_ipow(x, 4)*y*dy + -0.000105999 *lens_ipow(y, 4)*lens_ipow(dx, 4) + -8.98235e-07 *lens_ipow(y, 5)*lens_ipow(dy, 3) + -0.067735 *lens_ipow(x, 2)*lens_ipow(dx, 6) + 20.1516 *lens_ipow(dx, 4)*lens_ipow(lambda, 6)+0.0f;
const float dx23 =  + 0.59518 *dx*dy + 0.0679381 *y*dx + 0.0653785 *x*dy + 0.0047027 *x*y + 0.000230676 *lens_ipow(x, 3)*dy + 0.00604365 *y*dx*lens_ipow(lambda, 3) + -21.4262 *dx*lens_ipow(dy, 5) + -5.35993 *lens_ipow(dx, 5)*dy + 0.123451 *x*lens_ipow(dy, 5) + -0.0109375 *x*y*lens_ipow(dx, 4) + 0.000156593 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.0241722 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + -9.65451e-07 *lens_ipow(x, 4)*y*dx + -2.69471e-06 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 5.87801e-10 *lens_ipow(x, 5)*lens_ipow(y, 3) + -4.33699e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dy, 2) + -3.75251e-09 *lens_ipow(x, 7)*y*lens_ipow(dy, 2)+0.0f;
const float dx24 =  + -0.650936 *dx*lens_ipow(lambda, 2) + -0.0397965 *x*lens_ipow(lambda, 3) + 0.041361 *x*lens_ipow(dx, 2)*lambda + 0.018131 *y*dx*dy*lens_ipow(lambda, 2) + 2.18118e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(lambda, 4) + 24.1819 *lens_ipow(dx, 5)*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + -1.46865e-05 *dy + -9.08493e-05 *lens_ipow(dy, 2) + 0.0639978 *dx*dy + 0.0044227 *y*dx + 0.0040128 *x*dy + 0.000108707 *x*y + 5.01666e-06 *lens_ipow(y, 3)*dx + 0.00165493 *x*lens_ipow(dy, 3) + 2.44185e-05 *x*y*lens_ipow(dx, 2) + -0.0107568 *y*dx*lens_ipow(dy, 4) + -0.000669384 *x*lens_ipow(dx, 4)*dy + 2.72675e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 1.70182e-10 *lens_ipow(x, 5)*dy + -3.09813e-09 *lens_ipow(y, 6)*dx*dy + 1.26958e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -3.44574e-11 *lens_ipow(x, 7)*y + 3.35478e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.04483e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -1.54737e-13 *x*lens_ipow(y, 9) + 1.0306e-06 *lens_ipow(x, 3)*y*lens_ipow(lambda, 6) + 4.7172e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -1.56854e-12 *lens_ipow(x, 5)*lens_ipow(y, 5)+0.0f;
const float dx31 =  + -0.0121701  + -1.93196e-06 *y + 0.111917 *lens_ipow(dy, 2) + 0.0356873 *lens_ipow(dx, 2) + 0.0141102 *y*dy + 0.000190782 *lens_ipow(y, 2) + 0.0044227 *x*dx + 5.43537e-05 *lens_ipow(x, 2) + -0.0107658 *lens_ipow(lambda, 4) + 1.505e-05 *x*lens_ipow(y, 2)*dx + 1.22092e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.0107568 *x*dx*lens_ipow(dy, 4) + 6.81687e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.017425 *y*lens_ipow(dy, 7) + 2.13264e-05 *lens_ipow(y, 4)*lens_ipow(dx, 4) + 1.69324e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2) + -3.1978e-11 *lens_ipow(y, 8) + -1.85888e-08 *x*lens_ipow(y, 5)*dx*dy + 1.26958e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -4.30718e-12 *lens_ipow(x, 8) + 5.03218e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -2.61207e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 9.45232e-07 *lens_ipow(y, 4)*lens_ipow(lambda, 6) + -3.80664e-05 *lens_ipow(y, 4)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -6.96316e-13 *lens_ipow(x, 2)*lens_ipow(y, 8) + 2.5765e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 6) + 1.5724e-09 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)*dy + -1.30712e-12 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const float dx32 =  + 0.348999 *dx*dy + 0.0713747 *y*dx + 0.0639978 *x*dy + 0.0044227 *x*y + 5.01666e-06 *x*lens_ipow(y, 3) + 2.44185e-05 *lens_ipow(x, 2)*y*dx + -0.0107568 *x*y*lens_ipow(dy, 4) + -0.00133877 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 1.70611e-05 *lens_ipow(y, 5)*lens_ipow(dx, 3) + 4.83782e-09 *lens_ipow(y, 7)*dx + -3.09813e-09 *x*lens_ipow(y, 6)*dy + -5.22414e-06 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2)*lambda + -3.04531e-05 *lens_ipow(y, 5)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 1.5724e-09 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy+0.0f;
const float dx33 =  + 0.985464  + -1.46865e-05 *x + 0.877693 *lens_ipow(dy, 2) + 0.174499 *lens_ipow(dx, 2) + 0.223834 *y*dy + 0.0070551 *lens_ipow(y, 2) + -0.000181699 *x*dy + 0.0639978 *x*dx + 0.0020064 *lens_ipow(x, 2) + -0.255487 *lens_ipow(lambda, 3) + 0.00248239 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.0430273 *x*y*dx*lens_ipow(dy, 3) + -0.000334692 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 1.36337e-06 *lens_ipow(x, 4)*y*dy + 2.83637e-11 *lens_ipow(x, 6) + -0.0609876 *lens_ipow(y, 2)*lens_ipow(dy, 6) + -3.09813e-09 *x*lens_ipow(y, 6)*dx + 3.17396e-10 *lens_ipow(x, 4)*lens_ipow(y, 4) + 3.35478e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + -5.22414e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy*lambda + -1.52266e-05 *lens_ipow(y, 5)*lens_ipow(dx, 4)*dy + 7.862e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dx, 2)+0.0f;
const float dx34 =  + -0.766461 *dy*lens_ipow(lambda, 2) + -0.0430631 *y*lens_ipow(lambda, 3) + 5.03218e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.61207e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.13428e-06 *lens_ipow(y, 5)*lens_ipow(lambda, 5) + 1.5459e-06 *lens_ipow(x, 4)*y*lens_ipow(lambda, 5)+0.0f;
const float dx40 =  + -2.50078e-06  + -0.000161354 *x + -0.00735657 *dx*lambda + -0.000769016 *y*dx*dy + -4.0403e-05 *lens_ipow(y, 2)*dx + 0.00106661 *x*lens_ipow(dx, 2) + -5.04716e-06 *x*lens_ipow(y, 2) + 3.27481e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + 3.19103e-06 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -4.78283e-08 *lens_ipow(x, 5) + -0.0006367 *x*lens_ipow(lambda, 5) + -9.29168e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + 4.92012e-07 *lens_ipow(x, 4)*y*dx*dy + -1.37104e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx + -0.0030204 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -6.44817e-13 *x*lens_ipow(y, 8) + 0.0118126 *lens_ipow(x, 2)*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -0.000951145 *lens_ipow(x, 2)*y*lens_ipow(dx, 5)*dy + 5.41052e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + 8.40051e-10 *lens_ipow(x, 7)*lens_ipow(dx, 2) + -3.56322e-12 *lens_ipow(x, 7)*lens_ipow(y, 2)+0.0f;
const float dx41 =  + 1.5066e-06  + -0.00588705 *dy + -0.000327953 *y + 0.000347693 *y*lens_ipow(dy, 2) + 0.000166379 *y*lens_ipow(dx, 2) + -0.000769016 *x*dx*dy + -8.08061e-05 *x*y*dx + -5.04716e-06 *lens_ipow(x, 2)*y + 3.27481e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -2.89325e-10 *lens_ipow(y, 7) + -9.29168e-10 *lens_ipow(x, 4)*lens_ipow(y, 3) + 9.84025e-08 *lens_ipow(x, 5)*dx*dy + -5.48418e-09 *lens_ipow(x, 5)*y*dx + -2.61849e-06 *lens_ipow(y, 3)*lens_ipow(lambda, 5) + 1.47834e-05 *lens_ipow(y, 4)*lens_ipow(dy, 5) + 1.66719e-09 *lens_ipow(y, 7)*lens_ipow(dy, 2) + -0.0030204 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -2.57927e-12 *lens_ipow(x, 2)*lens_ipow(y, 7) + -0.000317048 *lens_ipow(x, 3)*lens_ipow(dx, 5)*dy + 9.01753e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy + -8.90805e-13 *lens_ipow(x, 8)*y+0.0f;
const float dx42 =  + -0.0914355 *dx + -0.00735657 *x*lambda + 0.000166379 *lens_ipow(y, 2)*dx + -0.000769016 *x*y*dy + -4.0403e-05 *x*lens_ipow(y, 2) + 0.00106661 *lens_ipow(x, 2)*dx + -0.602832 *dx*lens_ipow(dy, 4) + 8.56413 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -5.73527 *lens_ipow(dx, 5) + -0.428552 *dx*lens_ipow(lambda, 5) + 9.84025e-08 *lens_ipow(x, 5)*y*dy + -2.74209e-09 *lens_ipow(x, 5)*lens_ipow(y, 2) + -0.0030204 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + 0.0196877 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.00158524 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*dy + 1.80351e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy + 2.10013e-10 *lens_ipow(x, 8)*dx+0.0f;
const float dx43 =  + -0.156927 *dy + -0.00588705 *y + 0.000347693 *lens_ipow(y, 2)*dy + -0.000769016 *x*y*dx + 0.519424 *lens_ipow(dy, 5) + -1.20566 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 4.28207 *lens_ipow(dx, 4)*dy + 3.27481e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 1.59552e-06 *lens_ipow(x, 4)*dy + 9.84025e-08 *lens_ipow(x, 5)*y*dx + 1.47834e-05 *lens_ipow(y, 5)*lens_ipow(dy, 4) + 4.16796e-10 *lens_ipow(y, 8)*dy + -0.00604079 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.0078751 *lens_ipow(x, 3)*lens_ipow(dx, 5)*dy + -0.000317048 *lens_ipow(x, 3)*y*lens_ipow(dx, 5) + 1.80351e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx+0.0f;
const float dx44 =  + 0.656406 *lens_ipow(lambda, 2) + -0.00735657 *x*dx + -1.07138 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.00159175 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + -3.27311e-06 *lens_ipow(y, 4)*lens_ipow(lambda, 4) + -16.1232 *lens_ipow(lambda, 10)+0.0f;
