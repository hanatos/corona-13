const float dx00 =  + -1.09493  + -0.00152814 *dy + -8.17665e-05 *y + 0.605049 *lens_ipow(dy, 2) + 1.70729 *lens_ipow(dx, 2) + 0.0419471 *y*dy + 0.000420065 *lens_ipow(y, 2) + 0.158433 *x*dx + 0.00130954 *lens_ipow(x, 2) + -0.202715 *lens_ipow(lambda, 3) + 0.00217339 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00420823 *x*y*dx*dy + 0.00611405 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.320782 *lens_ipow(dy, 4)*lambda + 0.0606446 *y*lens_ipow(dx, 4)*dy + 6.47202e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.42186e-06 *lens_ipow(y, 5)*lens_ipow(dy, 3) + -9.6183e-06 *lens_ipow(x, 5)*lens_ipow(dx, 3) + 1.19081 *lens_ipow(lambda, 10) + -1.64828e-11 *x*lens_ipow(y, 8)*dx + -3.00431e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + -5.02884e-07 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 6.0836e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.51241e-11 *lens_ipow(x, 6)*lens_ipow(y, 4) + -2.42116e-12 *lens_ipow(x, 8)*lens_ipow(y, 2) + -1.26899e-12 *lens_ipow(x, 10)+0.0f;
const float dx01 =  + -8.0007e-05  + -0.00172153 *dx + -8.17665e-05 *x + 1.36546 *dx*dy + 0.0807852 *y*dx + 0.0419471 *x*dy + 0.000840131 *x*y + 0.00852094 *y*dx*lens_ipow(dy, 2) + 0.00434678 *x*y*lens_ipow(dx, 2) + -0.00210412 *lens_ipow(x, 2)*dx*dy + 0.0606446 *x*lens_ipow(dx, 4)*dy + 1.27112e-05 *lens_ipow(y, 5)*lens_ipow(dx, 3) + 0.000258881 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -7.10929e-06 *x*lens_ipow(y, 4)*lens_ipow(dy, 3) + -0.237169 *y*lens_ipow(dx, 9) + -6.59311e-11 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + -8.01149e-12 *lens_ipow(x, 3)*lens_ipow(y, 7) + -3.0173e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 4.86688e-09 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -8.64234e-12 *lens_ipow(x, 7)*lens_ipow(y, 3) + -5.38035e-13 *lens_ipow(x, 9)*y+0.0f;
const float dx02 =  + 9.56213  + -0.00172153 *y + 12.798 *lens_ipow(dy, 2) + 1.36546 *y*dy + 0.0403926 *lens_ipow(y, 2) + 3.41458 *x*dx + 0.0792163 *lens_ipow(x, 2) + 0.945896 *lens_ipow(lambda, 3) + 240.64 *lens_ipow(dx, 4) + 0.00426047 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00434678 *x*lens_ipow(y, 2)*dx + -0.00210412 *lens_ipow(x, 2)*y*dy + 0.242579 *x*y*lens_ipow(dx, 3)*dy + 246.259 *lens_ipow(dy, 8) + 21060.9 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + 6.35561e-06 *lens_ipow(y, 6)*lens_ipow(dx, 2) + 0.00012944 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + -4.80915e-06 *lens_ipow(x, 6)*lens_ipow(dx, 2) + -1.06726 *lens_ipow(y, 2)*lens_ipow(dx, 8) + -8.24139e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + -2.01153e-07 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy+0.0f;
const float dx03 =  + -0.00152814 *x + 25.5959 *dx*dy + 1.36546 *y*dx + 1.2101 *x*dy + 0.0419471 *x*y + 0.00852094 *lens_ipow(y, 2)*dx*dy + -0.00210412 *lens_ipow(x, 2)*y*dx + 0.00407603 *lens_ipow(x, 3)*dy + 1.28313 *x*lens_ipow(dy, 3)*lambda + 0.0606446 *x*y*lens_ipow(dx, 4) + 1970.07 *dx*lens_ipow(dy, 7) + 16848.7 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 0.00012944 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + -4.26557e-06 *x*lens_ipow(y, 5)*lens_ipow(dy, 2) + -1.00577e-07 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2) + 2.43344e-09 *lens_ipow(x, 5)*lens_ipow(y, 4)*dy+0.0f;
const float dx04 =  + 2.83769 *dx*lens_ipow(lambda, 2) + -0.608146 *x*lens_ipow(lambda, 2) + 0.320782 *x*lens_ipow(dy, 4) + 11.9081 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + -9.47768e-05  + 1.30888 *dx*dy + 0.0395868 *y*dx + 0.080997 *x*dy + 0.000805201 *x*y + -0.000763391 *lens_ipow(y, 2)*dx*dy + 4.52239e-05 *lens_ipow(y, 3)*dx + 0.00504441 *x*y*lens_ipow(dy, 2) + 2.82159e-05 *lens_ipow(x, 2)*y*dx*dy + -0.105891 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.635749 *x*lens_ipow(dy, 5)*lambda + -0.00352771 *lens_ipow(y, 3)*dx*lens_ipow(dy, 4) + 0.000871439 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 5.48078e-06 *lens_ipow(x, 5)*lens_ipow(dy, 3) + -1.42616e-10 *lens_ipow(x, 7)*y + -1.67142e-05 *lens_ipow(y, 5)*lens_ipow(dx, 5) + -5.75701e-13 *x*lens_ipow(y, 9) + 0.000767574 *lens_ipow(x, 3)*y*lens_ipow(dx, 6) + -6.49668e-12 *lens_ipow(x, 3)*lens_ipow(y, 7) + 1.63208e-10 *lens_ipow(x, 7)*lens_ipow(y, 2)*dy+0.0f;
const float dx11 =  + -1.09741  + -0.000566364 *dy + 2.20597 *lens_ipow(dy, 2) + 0.610995 *lens_ipow(dx, 2) + 0.178722 *y*dy + 0.00146932 *lens_ipow(y, 2) + 0.0395868 *x*dx + 0.000402601 *lens_ipow(x, 2) + -0.222124 *lens_ipow(lambda, 3) + 0.00872649 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00152678 *x*y*dx*dy + 0.000135672 *x*lens_ipow(y, 2)*dx + 0.00252221 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 9.40529e-06 *lens_ipow(x, 3)*dx*dy + -0.105891 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -130.313 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + -9.00167e-06 *lens_ipow(y, 5)*lens_ipow(dy, 3) + -0.0105831 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + 0.00021786 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.7827e-11 *lens_ipow(x, 8) + 1.19013 *lens_ipow(lambda, 10) + 0.0514231 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 5) + -1.18232e-12 *lens_ipow(y, 10) + -8.35708e-05 *x*lens_ipow(y, 4)*lens_ipow(dx, 5) + -2.59066e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + 0.000191894 *lens_ipow(x, 4)*lens_ipow(dx, 6) + -1.13692e-11 *lens_ipow(x, 4)*lens_ipow(y, 6) + 4.0802e-11 *lens_ipow(x, 8)*y*dy+0.0f;
const float dx12 =  + 23.3251 *dx*dy + 1.22199 *y*dx + 1.30888 *x*dy + 0.0395868 *x*y + 85.0173 *dx*lens_ipow(dy, 3) + 0.00581766 *lens_ipow(y, 3)*dx + -0.000763391 *x*lens_ipow(y, 2)*dy + 4.52239e-05 *x*lens_ipow(y, 3) + 9.40529e-06 *lens_ipow(x, 3)*y*dy + 19.615 *dx*dy*lens_ipow(lambda, 4) + -0.105891 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -781.878 *y*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -0.00352771 *x*lens_ipow(y, 3)*lens_ipow(dy, 4) + 0.00043572 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2) + 0.0257115 *lens_ipow(y, 4)*dx*lens_ipow(dy, 5) + -8.35708e-05 *x*lens_ipow(y, 5)*lens_ipow(dx, 4) + 0.00115136 *lens_ipow(x, 4)*y*lens_ipow(dx, 5)+0.0f;
const float dx13 =  + 9.33303  + -0.000566364 *y + 31.8577 *lens_ipow(dy, 2) + 11.6626 *lens_ipow(dx, 2) + 4.41194 *y*dy + 0.0893611 *lens_ipow(y, 2) + 1.30888 *x*dx + 0.0404985 *lens_ipow(x, 2) + 157.145 *lens_ipow(dy, 4) + 127.526 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000763391 *x*lens_ipow(y, 2)*dx + 0.00504441 *lens_ipow(x, 2)*y*dy + 9.40529e-06 *lens_ipow(x, 3)*y*dx + 9.80748 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.211782 *x*y*dx*dy*lens_ipow(lambda, 3) + 1.58937 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + -260.626 *y*lens_ipow(dx, 6)*dy + -4.50083e-06 *lens_ipow(y, 6)*lens_ipow(dy, 2) + -0.0141109 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 0.00043572 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy + 2.74039e-06 *lens_ipow(x, 6)*lens_ipow(dy, 2) + 0.0642789 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 2.0401e-11 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx14 =  + -0.666372 *y*lens_ipow(lambda, 2) + 39.2299 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -0.317673 *x*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.317875 *lens_ipow(x, 2)*lens_ipow(dy, 5) + 11.9013 *y*lens_ipow(lambda, 9)+0.0f;
const float dx20 =  + -0.0765333  + -1.17511e-06 *y + 0.0921868 *lens_ipow(dx, 2) + 0.000986087 *y*dy + 5.44023e-05 *lens_ipow(y, 2) + 0.00604478 *x*dx + 0.0002526 *lens_ipow(x, 2) + 0.00515012 *lens_ipow(lambda, 3) + -0.00228306 *y*lens_ipow(dy, 3) + 0.00028649 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000850638 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000666903 *x*y*lens_ipow(dx, 3)*dy + 3.33278e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.05677e-05 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + -3.68863e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4) + -3.08321e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + -0.000103576 *lens_ipow(x, 3)*lens_ipow(dx, 5) + -2.10375e-09 *lens_ipow(x, 5)*y*dx*dy + -7.04088e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 7) + -7.31713e-15 *lens_ipow(y, 10) + -8.11594e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 6) + 1.68224e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy + -2.40889e-13 *lens_ipow(x, 8)*lens_ipow(y, 2) + 2.36913e-12 *lens_ipow(x, 9)*dx+0.0f;
const float dx21 =  + -4.05935e-06  + -5.46437e-05 *dx + -1.17511e-06 *x + 0.035631 *dx*dy + 0.00325336 *y*dx + 0.000986087 *x*dy + 0.000108805 *x*y + -0.0761587 *dx*lens_ipow(dy, 3) + 0.138232 *lens_ipow(dx, 3)*dy + -0.00228306 *x*lens_ipow(dy, 3) + 2.26263e-08 *lens_ipow(y, 5)*dx + 0.00170128 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000333452 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 1.66639e-08 *lens_ipow(x, 4)*y*dx + -0.00321447 *y*lens_ipow(dx, 7) + -1.58516e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -2.45909e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 4) + -6.16641e-11 *lens_ipow(x, 3)*lens_ipow(y, 5) + -3.50624e-10 *lens_ipow(x, 6)*dx*dy + -0.000140818 *x*y*lens_ipow(lambda, 7) + 3.02777e-06 *lens_ipow(y, 5)*lens_ipow(dx, 5) + -7.31713e-14 *x*lens_ipow(y, 9) + 7.20958e-12 *lens_ipow(x, 7)*lens_ipow(y, 2)*dy + -5.35308e-14 *lens_ipow(x, 9)*y+0.0f;
const float dx22 =  + -0.243525  + -5.46437e-05 *y + 2.24356 *lens_ipow(dx, 2) + 0.035631 *y*dy + 0.00162668 *lens_ipow(y, 2) + 0.184374 *x*dx + 0.00302239 *lens_ipow(x, 2) + 18.8264 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 7.58029 *lens_ipow(dx, 4) + -0.0761587 *y*lens_ipow(dy, 3) + 0.414697 *y*lens_ipow(dx, 2)*dy + 3.77105e-09 *lens_ipow(y, 6) + 0.00170128 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.00100035 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 8.33196e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.152884 *lens_ipow(lambda, 7) + -0.0112506 *lens_ipow(y, 2)*lens_ipow(dx, 6) + -5.28386e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3) + -4.91817e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.00012947 *lens_ipow(x, 4)*lens_ipow(dx, 4) + -3.50624e-10 *lens_ipow(x, 6)*y*dy + -2594.24 *lens_ipow(dx, 8)*lens_ipow(dy, 2) + 2.52314e-06 *lens_ipow(y, 6)*lens_ipow(dx, 4) + 2.36913e-13 *lens_ipow(x, 10)+0.0f;
const float dx23 =  + 0.035631 *y*dx + 0.000986087 *x*y + 12.551 *lens_ipow(dx, 3)*dy + -0.228476 *y*dx*lens_ipow(dy, 2) + 0.138232 *y*lens_ipow(dx, 3) + -0.00684917 *x*y*lens_ipow(dy, 2) + 0.000190993 *lens_ipow(x, 3)*dy + 0.00170128 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.000333452 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -1.58516e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -3.50624e-10 *lens_ipow(x, 6)*y*dx + -576.499 *lens_ipow(dx, 9)*dy + 2.40319e-12 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const float dx24 =  + 0.0154504 *x*lens_ipow(lambda, 2) + 1.07019 *dx*lens_ipow(lambda, 6) + -0.000492862 *x*lens_ipow(y, 2)*lens_ipow(lambda, 6) + -9.73913e-07 *lens_ipow(x, 5)*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + -3.06067e-06  + 0.0738003 *dx*dy + 0.00128255 *y*dx + 0.00283828 *x*dy + 0.000234397 *x*y + 0.0104259 *x*lens_ipow(dx, 4)*dy + -1.93385e-09 *x*lens_ipow(y, 4)*dy + -3.53075e-05 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -1.23828e-09 *lens_ipow(x, 5)*y + -0.0664809 *dx*lens_ipow(dy, 7) + -2.21327e-11 *lens_ipow(y, 7)*dx + 4.31917e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + -2.4984e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 4) + 3.88283e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*lambda + -0.000117578 *x*y*lens_ipow(lambda, 8) + -5.71722e-14 *x*lens_ipow(y, 9) + 2.02547e-06 *lens_ipow(x, 5)*lens_ipow(dy, 5) + -4.1845e-13 *lens_ipow(x, 5)*lens_ipow(y, 5)+0.0f;
const float dx31 =  + -0.0768909  + -7.03227e-05 *dy + -3.7212e-06 *y + 0.100559 *lens_ipow(dy, 2) + 0.0239802 *lens_ipow(dx, 2) + 0.00652802 *y*dy + 0.000266199 *lens_ipow(y, 2) + 0.00128255 *x*dx + 0.000117199 *lens_ipow(x, 2) + 0.0075966 *lens_ipow(lambda, 4) + 0.00256988 *y*lens_ipow(dx, 2)*dy + 0.000151312 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -3.8677e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.17692e-05 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -2.06379e-10 *lens_ipow(x, 6) + -1.30479e-10 *lens_ipow(y, 7)*dy + -1.54929e-10 *x*lens_ipow(y, 6)*dx + 4.31917e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*dy + -3.74761e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 4) + 9.70707e-07 *lens_ipow(x, 4)*lens_ipow(dx, 4)*lambda + -0.00022869 *lens_ipow(y, 2)*lens_ipow(lambda, 8) + -0.00737065 *lens_ipow(y, 2)*lens_ipow(dx, 6)*lens_ipow(dy, 2) + 5.38692e-07 *lens_ipow(y, 5)*lens_ipow(dy, 5) + -6.32401e-14 *lens_ipow(y, 10) + -5.87891e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 8) + -2.57275e-13 *lens_ipow(x, 2)*lens_ipow(y, 8) + -3.48708e-13 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const float dx32 =  + 2.12963 *dx*dy + 0.0479604 *y*dx + 0.0738003 *x*dy + 0.00128255 *x*y + 1.57126 *dx*lens_ipow(dy, 3) + 0.00256988 *lens_ipow(y, 2)*dx*dy + 0.000100875 *lens_ipow(y, 3)*dx + 0.0208518 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -1.17692e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -0.0664809 *x*lens_ipow(dy, 7) + -2.21327e-11 *x*lens_ipow(y, 7) + 8.63833e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 3.88283e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*lambda + -0.0147413 *lens_ipow(y, 3)*lens_ipow(dx, 5)*lens_ipow(dy, 2)+0.0f;
const float dx33 =  + -0.264435  + -7.03227e-05 *y + 3.3582 *lens_ipow(dy, 2) + 1.06482 *lens_ipow(dx, 2) + 0.201117 *y*dy + 0.00326401 *lens_ipow(y, 2) + 0.0738003 *x*dx + 0.00141914 *lens_ipow(x, 2) + 2.35689 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00128494 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.1421 *lens_ipow(dy, 6) + 0.00521295 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -9.66926e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + -2.35383e-05 *lens_ipow(x, 3)*y*dx*dy + -1.63099e-11 *lens_ipow(y, 8) + -0.465366 *x*dx*lens_ipow(dy, 6) + 2.15958e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4) + -4.99681e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3) + 0.30791 *lens_ipow(lambda, 9) + -0.00491377 *lens_ipow(y, 3)*lens_ipow(dx, 6)*dy + 4.4891e-07 *lens_ipow(y, 6)*lens_ipow(dy, 4) + 1.68789e-06 *lens_ipow(x, 6)*lens_ipow(dy, 4)+0.0f;
const float dx34 =  + 0.0303864 *y*lens_ipow(lambda, 3) + 2.77119 *dy*lens_ipow(lambda, 8) + 9.70707e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 4) + -0.000609841 *lens_ipow(y, 3)*lens_ipow(lambda, 7) + -0.000470313 *lens_ipow(x, 2)*y*lens_ipow(lambda, 7)+0.0f;
const float dx40 =  + -1.23477e-06  + -0.000184488 *x + -0.00403616 *dx*lambda + 1.26124e-06 *x*dy + 0.00066632 *y*dx*dy + 0.000268743 *x*lens_ipow(dy, 2) + 1.10335e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -3.49319e-07 *x*lens_ipow(y, 3)*dy + -2.64129e-08 *x*lens_ipow(y, 4) + 9.30483e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -6.27624e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + 1.08008e-07 *lens_ipow(x, 4)*y*dx*dy + -2.04978e-10 *lens_ipow(x, 7) + 0.143338 *dx*lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -5.41981e-06 *lens_ipow(x, 3)*lens_ipow(lambda, 5) + -0.000360717 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 2.86324e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*dy + -3.94548e-12 *lens_ipow(x, 5)*lens_ipow(y, 4) + -1.12298e-12 *x*lens_ipow(y, 8)*lambda + -5.7492e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx41 =  + 5.60543e-06  + -0.00013962 *y + -0.00345783 *dy*lambda + -1.36949e-07 *lens_ipow(y, 2) + 0.00066632 *x*dx*dy + 9.50494e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.47915e-08 *lens_ipow(y, 5) + 1.10335e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + -5.23978e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -5.28258e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + -3.13812e-08 *lens_ipow(x, 4)*y + -0.000189419 *y*lens_ipow(lambda, 5) + -1.6313e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + 2.16016e-08 *lens_ipow(x, 5)*dx*dy + -0.00108215 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 7.15811e-06 *lens_ipow(x, 4)*lens_ipow(dx, 4)*dy + -2.63032e-12 *lens_ipow(x, 6)*lens_ipow(y, 3) + -7.52309e-13 *lens_ipow(y, 9)*lambda + -4.49193e-12 *lens_ipow(x, 2)*lens_ipow(y, 7)*lambda + -1.9164e-10 *lens_ipow(x, 6)*y*lens_ipow(lambda, 3)+0.0f;
const float dx42 =  + -0.0317111 *dx + -0.00403616 *x*lambda + -1.20594 *dx*lens_ipow(dy, 2) + 0.00066632 *x*y*dy + -6.70907 *lens_ipow(dx, 5) + 1.10335e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 4.65241e-06 *lens_ipow(x, 4)*dx + -0.2423 *dx*lens_ipow(lambda, 5) + -6.52522e-07 *lens_ipow(y, 5)*dx*dy + 2.16016e-08 *lens_ipow(x, 5)*y*dy + 0.143338 *x*lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -0.00108215 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 2.86324e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*dy+0.0f;
const float dx43 =  + -0.0306525 *dy + -0.00345783 *y*lambda + 6.30621e-07 *lens_ipow(x, 2) + -1.20594 *lens_ipow(dx, 2)*dy + 0.00066632 *x*y*dx + 0.000268743 *lens_ipow(x, 2)*dy + -6.51435 *lens_ipow(dy, 5) + 4.75247e-06 *lens_ipow(y, 4)*dy + -1.74659e-07 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.172605 *dy*lens_ipow(lambda, 5) + -3.26261e-07 *lens_ipow(y, 5)*lens_ipow(dx, 2) + 2.16016e-08 *lens_ipow(x, 5)*y*dx + 0.573353 *x*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -0.00108215 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 7.15811e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 4)+0.0f;
const float dx44 =  + 0.283995  + -0.664846 *lens_ipow(lambda, 2) + -0.00345783 *y*dy + -0.00403616 *x*dx + -0.431512 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -0.605749 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.000473547 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + 0.430014 *x*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -6.77476e-06 *lens_ipow(x, 4)*lens_ipow(lambda, 4) + 4.93144 *lens_ipow(lambda, 10) + -7.52309e-14 *lens_ipow(y, 10) + -5.61491e-13 *lens_ipow(x, 2)*lens_ipow(y, 8) + -2.8746e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(lambda, 2)+0.0f;
