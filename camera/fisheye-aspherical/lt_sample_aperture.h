//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + -0.000155767  + 0.000766471 *begin_dy + 24.6053 *begin_dx + 0.73415 *begin_x + 0.0165703 *begin_dx*begin_dy + -1.68227e-05 *begin_x*begin_y + 7.06548e-06 *lens_ipow(begin_x, 2) + -4.55325 *begin_dx*lens_ipow(begin_dy, 2) + 0.451153 *lens_ipow(begin_dx, 3) + 0.229003 *begin_y*begin_dx*begin_dy + -0.000247709 *begin_x*lens_ipow(begin_dy, 2) + 0.824824 *begin_x*lens_ipow(begin_dx, 2) + 0.00958852 *begin_x*begin_y*begin_dy + -0.000479556 *begin_x*lens_ipow(begin_y, 2) + 0.0262843 *lens_ipow(begin_x, 2)*begin_dx + -0.000436466 *lens_ipow(begin_x, 3) + 0.223873 *begin_dx*lens_ipow(begin_lambda, 4) + 0.0571414 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 1.76736e-05 *lens_ipow(begin_y, 4)*begin_dx + -0.166597 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.060452 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.0030733 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 0.00263312 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 0.00725331 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 3) + 2.83565 *begin_x*lens_ipow(begin_dy, 6) + -8.22628e-09 *begin_x*lens_ipow(begin_y, 6) + 0.00581822 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + -0.000561842 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + -3.14552e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + 965.494 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2) + -97.931 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5) + 0.654538 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 7) + -0.00375236 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 1.63067e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + 2.29803e-05 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 4) + 2258.93 *begin_dx*lens_ipow(begin_dy, 10) + 546.152 *lens_ipow(begin_dx, 11) + -1.60551e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 6) + 3.35043e-12 *lens_ipow(begin_x, 9)*begin_y*begin_dy + -1.3465e-13 *lens_ipow(begin_x, 11),
       + -0.000504563  + 24.4897 *begin_dy + 0.734654 *begin_y + -1.4482e-05 *begin_x + -0.000447977 *begin_y*begin_dy + 2.69077 *lens_ipow(begin_dy, 3) + -1.32955 *lens_ipow(begin_dx, 2)*begin_dy + 0.977616 *begin_y*lens_ipow(begin_dy, 2) + 0.0293309 *lens_ipow(begin_y, 2)*begin_dy + -0.00045545 *lens_ipow(begin_y, 3) + 0.602323 *begin_x*begin_dx*begin_dy + 0.0149017 *begin_x*begin_y*begin_dx + 0.0074967 *lens_ipow(begin_x, 2)*begin_dy + -0.000423394 *lens_ipow(begin_x, 2)*begin_y + 38.9691 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.00379635 *begin_y*lens_ipow(begin_lambda, 4) + 0.972973 *begin_y*lens_ipow(begin_dx, 4) + 0.00201867 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -0.203875 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00560888 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.0427209 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 1.70072e-05 *lens_ipow(begin_x, 4)*begin_dy + 110.609 *lens_ipow(begin_dx, 6)*begin_dy + 0.00310112 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*begin_dy + 2.06908e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 4) + -1.92882e-09 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 2) + 1.16942e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + -2.8014e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3) + -1.98813e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3) + -21.8163 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 2.06399e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda + 598.808 *lens_ipow(begin_dy, 11) + -1.20624e-13 *lens_ipow(begin_y, 11) + -98.6387 *begin_x*begin_dx*lens_ipow(begin_dy, 9) + -1.50275e-09 *begin_x*lens_ipow(begin_y, 7)*begin_dx*lens_ipow(begin_lambda, 2) + -6.46285e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + -1.50441e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 7) + -1.56134e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -1.23884e-12 *lens_ipow(begin_x, 10)*begin_dy + -1.26686e-13 *lens_ipow(begin_x, 10)*begin_y
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 24.6053  + 0.0165703 *begin_dy + -4.55325 *lens_ipow(begin_dy, 2) + 1.35346 *lens_ipow(begin_dx, 2) + 0.229003 *begin_y*begin_dy + 1.64965 *begin_x*begin_dx + 0.0262843 *lens_ipow(begin_x, 2) + 0.223873 *lens_ipow(begin_lambda, 4) + 0.171424 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 1.76736e-05 *lens_ipow(begin_y, 4) + -0.333195 *begin_x*begin_y*begin_dx*begin_dy + 0.060452 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -0.0030733 *lens_ipow(begin_x, 2)*begin_y*begin_dy + 0.00725331 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 0.0174547 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.00168553 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 6758.46 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + -293.793 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 4.58177 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -0.00750472 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 3) + 9.19212e-05 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 3) + 2258.93 *lens_ipow(begin_dy, 10) + 6007.67 *lens_ipow(begin_dx, 10)+0.0f;
    dx1_domega0[0][1] =  + 0.000766471  + 0.0165703 *begin_dx + -9.10649 *begin_dx*begin_dy + 0.229003 *begin_y*begin_dx + -0.000495417 *begin_x*begin_dy + 0.00958852 *begin_x*begin_y + -0.166597 *begin_x*begin_y*lens_ipow(begin_dx, 2) + 0.120904 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -0.0030733 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 0.00526624 *lens_ipow(begin_x, 3)*begin_dy + 0.0217599 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + 17.0139 *begin_x*lens_ipow(begin_dy, 5) + 0.00581822 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 1930.99 *lens_ipow(begin_dx, 7)*begin_dy + -489.655 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + -0.0112571 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 22589.3 *begin_dx*lens_ipow(begin_dy, 9) + 3.35043e-12 *lens_ipow(begin_x, 9)*begin_y+0.0f;
    dx1_domega0[1][0] =  + -2.6591 *begin_dx*begin_dy + 0.602323 *begin_x*begin_dy + 0.0149017 *begin_x*begin_y + 77.9381 *begin_dx*lens_ipow(begin_dy, 3) + 3.89189 *begin_y*lens_ipow(begin_dx, 3) + 0.00403735 *lens_ipow(begin_y, 3)*begin_dx + -0.203875 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -0.00560888 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 663.656 *lens_ipow(begin_dx, 5)*begin_dy + 0.00930335 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_dy + -3.85764e-09 *lens_ipow(begin_y, 7)*begin_dx + 4.67769e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3) + -87.2651 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 2.06399e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -98.6387 *begin_x*lens_ipow(begin_dy, 9) + -1.50275e-09 *begin_x*lens_ipow(begin_y, 7)*lens_ipow(begin_lambda, 2)+0.0f;
    dx1_domega0[1][1] =  + 24.4897  + -0.000447977 *begin_y + 8.07232 *lens_ipow(begin_dy, 2) + -1.32955 *lens_ipow(begin_dx, 2) + 1.95523 *begin_y*begin_dy + 0.0293309 *lens_ipow(begin_y, 2) + 0.602323 *begin_x*begin_dx + 0.0074967 *lens_ipow(begin_x, 2) + 116.907 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.407751 *begin_x*begin_y*begin_dx*begin_dy + -0.00560888 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 0.128163 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 1.70072e-05 *lens_ipow(begin_x, 4) + 110.609 *lens_ipow(begin_dx, 6) + 0.00310112 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + 8.27631e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 3) + -8.40419e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -43.6326 *begin_y*lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 3) + 2.06399e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 6586.89 *lens_ipow(begin_dy, 10) + -887.748 *begin_x*begin_dx*lens_ipow(begin_dy, 8) + -4.68402e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -1.23884e-12 *lens_ipow(begin_x, 10)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + 0.000383744  + 9.56213 *begin_dx + -8.0007e-05 *begin_y + -1.09493 *begin_x + -0.00172153 *begin_y*begin_dx + -0.00152814 *begin_x*begin_dy + -8.17665e-05 *begin_x*begin_y + 12.798 *begin_dx*lens_ipow(begin_dy, 2) + 1.36546 *begin_y*begin_dx*begin_dy + 0.0403926 *lens_ipow(begin_y, 2)*begin_dx + 0.605049 *begin_x*lens_ipow(begin_dy, 2) + 1.70729 *begin_x*lens_ipow(begin_dx, 2) + 0.0419471 *begin_x*begin_y*begin_dy + 0.000420065 *begin_x*lens_ipow(begin_y, 2) + 0.0792163 *lens_ipow(begin_x, 2)*begin_dx + 0.000436513 *lens_ipow(begin_x, 3) + 0.945896 *begin_dx*lens_ipow(begin_lambda, 3) + -0.202715 *begin_x*lens_ipow(begin_lambda, 3) + 48.128 *lens_ipow(begin_dx, 5) + 0.00426047 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.00217339 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.00210412 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 0.00203802 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 0.320782 *begin_x*lens_ipow(begin_dy, 4)*begin_lambda + 0.0606446 *begin_x*begin_y*lens_ipow(begin_dx, 4)*begin_dy + 246.259 *begin_dx*lens_ipow(begin_dy, 8) + 4212.18 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 4) + 2.11854e-06 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 3) + 6.47202e-05 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -1.42186e-06 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 3) + -1.60305e-06 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 3) + -0.118584 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 9) + 1.19081 *begin_x*lens_ipow(begin_lambda, 10) + -8.24139e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dx + -1.00144e-12 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 8) + -1.00577e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + 1.21672e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -2.16058e-12 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 4) + -2.69017e-13 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2) + -1.15363e-13 *lens_ipow(begin_x, 11);
    out[1] =  + -0.00225997  + 9.33303 *begin_dy + -1.09741 *begin_y + -9.47768e-05 *begin_x + -0.000566364 *begin_y*begin_dy + 10.6192 *lens_ipow(begin_dy, 3) + 11.6626 *lens_ipow(begin_dx, 2)*begin_dy + 2.20597 *begin_y*lens_ipow(begin_dy, 2) + 0.610995 *begin_y*lens_ipow(begin_dx, 2) + 0.0893611 *lens_ipow(begin_y, 2)*begin_dy + 0.000489772 *lens_ipow(begin_y, 3) + 1.30888 *begin_x*begin_dx*begin_dy + 0.0395868 *begin_x*begin_y*begin_dx + 0.0404985 *lens_ipow(begin_x, 2)*begin_dy + 0.000402601 *lens_ipow(begin_x, 2)*begin_y + -0.222124 *begin_y*lens_ipow(begin_lambda, 3) + 31.4291 *lens_ipow(begin_dy, 5) + 42.5087 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.00290883 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -0.000763391 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 4.52239e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 0.00252221 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + 9.40529e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_dy + 9.80748 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 4) + -0.105891 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + 0.317875 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5)*begin_lambda + -130.313 *begin_y*lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + -1.50028e-06 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 3) + -0.00352771 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 4) + 0.00021786 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 9.13463e-07 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 3) + -1.7827e-11 *lens_ipow(begin_x, 8)*begin_y + 1.19013 *begin_y*lens_ipow(begin_lambda, 10) + 0.0128558 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + -1.07484e-13 *lens_ipow(begin_y, 11) + -1.67142e-05 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 5) + -2.87851e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + 0.000191894 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 6) + -1.62417e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 7) + 2.0401e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)*begin_dy;
    out[2] =  + 8.56054e-06  + -0.243525 *begin_dx + -4.05935e-06 *begin_y + -0.0765333 *begin_x + -5.46437e-05 *begin_y*begin_dx + -1.17511e-06 *begin_x*begin_y + 0.747852 *lens_ipow(begin_dx, 3) + 0.035631 *begin_y*begin_dx*begin_dy + 0.00162668 *lens_ipow(begin_y, 2)*begin_dx + 0.0921868 *begin_x*lens_ipow(begin_dx, 2) + 0.000986087 *begin_x*begin_y*begin_dy + 5.44023e-05 *begin_x*lens_ipow(begin_y, 2) + 0.00302239 *lens_ipow(begin_x, 2)*begin_dx + 8.42e-05 *lens_ipow(begin_x, 3) + 0.00515012 *begin_x*lens_ipow(begin_lambda, 3) + 6.27548 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 1.51606 *lens_ipow(begin_dx, 5) + -0.0761587 *begin_y*begin_dx*lens_ipow(begin_dy, 3) + 0.138232 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + -0.00228306 *begin_x*begin_y*lens_ipow(begin_dy, 3) + 9.54965e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 3.77105e-09 *lens_ipow(begin_y, 6)*begin_dx + 0.000850638 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.000333452 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 8.33196e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx + 0.152884 *begin_dx*lens_ipow(begin_lambda, 7) + -0.00160723 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 7) + -5.28386e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 3) + -1.22954e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -1.02774e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6) + -2.5894e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 5) + -3.50624e-10 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy + -7.04088e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 7) + -288.249 *lens_ipow(begin_dx, 9)*lens_ipow(begin_dy, 2) + 5.04628e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 5) + -7.31713e-15 *begin_x*lens_ipow(begin_y, 10) + -1.62319e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_lambda, 6) + 2.40319e-12 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 3)*begin_dy + -2.67654e-14 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2) + 2.36913e-13 *lens_ipow(begin_x, 10)*begin_dx;
    out[3] =  + -3.41878e-05  + -0.264435 *begin_dy + -0.0768909 *begin_y + -3.06067e-06 *begin_x + -7.03227e-05 *begin_y*begin_dy + -1.8606e-06 *lens_ipow(begin_y, 2) + 1.1194 *lens_ipow(begin_dy, 3) + 1.06482 *lens_ipow(begin_dx, 2)*begin_dy + 0.100559 *begin_y*lens_ipow(begin_dy, 2) + 0.0239802 *begin_y*lens_ipow(begin_dx, 2) + 0.00326401 *lens_ipow(begin_y, 2)*begin_dy + 8.87331e-05 *lens_ipow(begin_y, 3) + 0.0738003 *begin_x*begin_dx*begin_dy + 0.00128255 *begin_x*begin_y*begin_dx + 0.00141914 *lens_ipow(begin_x, 2)*begin_dy + 0.000117199 *lens_ipow(begin_x, 2)*begin_y + 0.78563 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.0075966 *begin_y*lens_ipow(begin_lambda, 4) + 0.00128494 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 5.04373e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 0.448872 *lens_ipow(begin_dy, 7) + 0.00521295 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4)*begin_dy + -9.66926e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + -1.17692e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -2.06379e-10 *lens_ipow(begin_x, 6)*begin_y + -1.63099e-11 *lens_ipow(begin_y, 8)*begin_dy + -0.0664809 *begin_x*begin_dx*lens_ipow(begin_dy, 7) + -2.21327e-11 *begin_x*lens_ipow(begin_y, 7)*begin_dx + 2.15958e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*begin_dy + -1.2492e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + 0.30791 *begin_dy*lens_ipow(begin_lambda, 9) + 9.70707e-07 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 4)*begin_lambda + -7.62301e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 8) + -0.00245688 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + 8.97821e-08 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 5) + -5.7491e-15 *lens_ipow(begin_y, 11) + -5.87891e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_lambda, 8) + -2.85861e-14 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + 3.37578e-07 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 5) + -6.97416e-14 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 5);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0765333  + -1.17511e-06 *begin_y + 0.0921868 *lens_ipow(begin_dx, 2) + 0.000986087 *begin_y*begin_dy + 5.44023e-05 *lens_ipow(begin_y, 2) + 0.00604478 *begin_x*begin_dx + 0.0002526 *lens_ipow(begin_x, 2) + 0.00515012 *lens_ipow(begin_lambda, 3) + -0.00228306 *begin_y*lens_ipow(begin_dy, 3) + 0.00028649 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 0.000850638 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.000666903 *begin_x*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 3.33278e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx + -1.05677e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 3) + -3.68863e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -3.08321e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6) + -0.000103576 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 5) + -2.10375e-09 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_dy + -7.04088e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 7) + -7.31713e-15 *lens_ipow(begin_y, 10) + -8.11594e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_lambda, 6) + 1.68224e-11 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dy + -2.40889e-13 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2) + 2.36913e-12 *lens_ipow(begin_x, 9)*begin_dx+0.0f;
    domega2_dx0[0][1] =  + -4.05935e-06  + -5.46437e-05 *begin_dx + -1.17511e-06 *begin_x + 0.035631 *begin_dx*begin_dy + 0.00325336 *begin_y*begin_dx + 0.000986087 *begin_x*begin_dy + 0.000108805 *begin_x*begin_y + -0.0761587 *begin_dx*lens_ipow(begin_dy, 3) + 0.138232 *lens_ipow(begin_dx, 3)*begin_dy + -0.00228306 *begin_x*lens_ipow(begin_dy, 3) + 2.26263e-08 *lens_ipow(begin_y, 5)*begin_dx + 0.00170128 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.000333452 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*begin_dy + 1.66639e-08 *lens_ipow(begin_x, 4)*begin_y*begin_dx + -0.00321447 *begin_y*lens_ipow(begin_dx, 7) + -1.58516e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + -2.45909e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 4) + -6.16641e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5) + -3.50624e-10 *lens_ipow(begin_x, 6)*begin_dx*begin_dy + -0.000140818 *begin_x*begin_y*lens_ipow(begin_lambda, 7) + 3.02777e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 5) + -7.31713e-14 *begin_x*lens_ipow(begin_y, 9) + 7.20958e-12 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2)*begin_dy + -5.35308e-14 *lens_ipow(begin_x, 9)*begin_y+0.0f;
    domega2_dx0[1][0] =  + -3.06067e-06  + 0.0738003 *begin_dx*begin_dy + 0.00128255 *begin_y*begin_dx + 0.00283828 *begin_x*begin_dy + 0.000234397 *begin_x*begin_y + 0.0104259 *begin_x*lens_ipow(begin_dx, 4)*begin_dy + -1.93385e-09 *begin_x*lens_ipow(begin_y, 4)*begin_dy + -3.53075e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -1.23828e-09 *lens_ipow(begin_x, 5)*begin_y + -0.0664809 *begin_dx*lens_ipow(begin_dy, 7) + -2.21327e-11 *lens_ipow(begin_y, 7)*begin_dx + 4.31917e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*begin_dy + -2.4984e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + 3.88283e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 4)*begin_lambda + -0.000117578 *begin_x*begin_y*lens_ipow(begin_lambda, 8) + -5.71722e-14 *begin_x*lens_ipow(begin_y, 9) + 2.02547e-06 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 5) + -4.1845e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 5)+0.0f;
    domega2_dx0[1][1] =  + -0.0768909  + -7.03227e-05 *begin_dy + -3.7212e-06 *begin_y + 0.100559 *lens_ipow(begin_dy, 2) + 0.0239802 *lens_ipow(begin_dx, 2) + 0.00652802 *begin_y*begin_dy + 0.000266199 *lens_ipow(begin_y, 2) + 0.00128255 *begin_x*begin_dx + 0.000117199 *lens_ipow(begin_x, 2) + 0.0075966 *lens_ipow(begin_lambda, 4) + 0.00256988 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.000151312 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -3.8677e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -1.17692e-05 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 2) + -2.06379e-10 *lens_ipow(begin_x, 6) + -1.30479e-10 *lens_ipow(begin_y, 7)*begin_dy + -1.54929e-10 *begin_x*lens_ipow(begin_y, 6)*begin_dx + 4.31917e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + -3.74761e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 9.70707e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 4)*begin_lambda + -0.00022869 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 8) + -0.00737065 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + 5.38692e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 5) + -6.32401e-14 *lens_ipow(begin_y, 10) + -5.87891e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 8) + -2.57275e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8) + -3.48708e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.0939581  + 0.283995 *begin_lambda + 5.60543e-06 *begin_y + -1.23477e-06 *begin_x + -0.0153263 *lens_ipow(begin_dy, 2) + -0.0158556 *lens_ipow(begin_dx, 2) + -6.98099e-05 *lens_ipow(begin_y, 2) + -9.2244e-05 *lens_ipow(begin_x, 2) + -0.221615 *lens_ipow(begin_lambda, 3) + -0.00345783 *begin_y*begin_dy*begin_lambda + -4.56495e-08 *lens_ipow(begin_y, 3) + -0.00403616 *begin_x*begin_dx*begin_lambda + 6.30621e-07 *lens_ipow(begin_x, 2)*begin_dy + -0.602969 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.00066632 *begin_x*begin_y*begin_dx*begin_dy + 0.000134372 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -1.08572 *lens_ipow(begin_dy, 6) + -1.11818 *lens_ipow(begin_dx, 6) + 2.37624e-06 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -4.13192e-09 *lens_ipow(begin_y, 6) + 5.51676e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -1.74659e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -1.32065e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + 2.32621e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + -1.56906e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -0.0863025 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + -0.12115 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + -9.47093e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 5) + -3.26261e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2)*begin_dy + 2.16016e-08 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_dy + -2.56222e-11 *lens_ipow(begin_x, 8) + 0.143338 *begin_x*begin_dx*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 3) + -1.35495e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_lambda, 5) + -0.000360717 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + 7.15811e-06 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + -6.5758e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4) + 0.448312 *lens_ipow(begin_lambda, 11) + -7.52309e-14 *lens_ipow(begin_y, 10)*begin_lambda + -5.61491e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_lambda + -9.582e-11 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3);
else
  out[4] = 0.0f;
