float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + 0.000146105  + 119.392 *begin_dx + -4.05857e-06 *begin_y + 1.247 *begin_x + -0.000155495 *begin_y*begin_dx + -7.6004e-07 *lens_ipow(begin_y, 2) + -0.0470823 *begin_x*begin_lambda + -0.000269889 *begin_x*begin_dy + 0.000205308 *begin_x*begin_dx + -2.41965e-06 *begin_x*begin_y + 315.426 *begin_dx*lens_ipow(begin_dy, 2) + 312.895 *lens_ipow(begin_dx, 3) + 5.80165 *begin_y*begin_dx*begin_dy + 0.025389 *lens_ipow(begin_y, 2)*begin_dx + 2.95132 *begin_x*lens_ipow(begin_dy, 2) + 8.54125 *begin_x*lens_ipow(begin_dx, 2) + 0.0525601 *begin_x*begin_y*begin_dy + 0.00021685 *begin_x*lens_ipow(begin_y, 2) + 0.0772709 *lens_ipow(begin_x, 2)*begin_dx + 0.000215934 *lens_ipow(begin_x, 3) + -0.0139484 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 0.379694 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + -0.000975206 *begin_x*begin_y*begin_dy*begin_lambda + 0.00264109 *begin_x*lens_ipow(begin_lambda, 4) + 0.655091 *begin_x*lens_ipow(begin_dy, 4) + -0.0239011 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -10.6975 *begin_dx*lens_ipow(begin_lambda, 5) + 5784.08 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 0.003015 *begin_x*begin_dy*lens_ipow(begin_lambda, 5) + -5.51715e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + 0.0233978 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + 1115.85 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 4) + 7923.29 *lens_ipow(begin_dx, 9) + 0.0392799 *begin_x*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -2.15026e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 6) + -6.55007e-14 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + 1.20246e-08 *lens_ipow(begin_x, 6)*begin_dx*lens_ipow(begin_lambda, 3) + 42.4803 *begin_dx*lens_ipow(begin_lambda, 10) + 403790 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 2) + 0.141664 *begin_x*lens_ipow(begin_lambda, 10);
  pred_y =  + 0.000109425  + 119.438 *begin_dy + 0.00155992 *begin_dx + 1.23169 *begin_y + 1.63555e-05 *begin_x + 0.00746521 *lens_ipow(begin_dx, 2) + 0.000168035 *begin_y*begin_dy + -0.000243009 *begin_y*begin_dx + -1.17086e-06 *lens_ipow(begin_x, 2) + 314.444 *lens_ipow(begin_dy, 3) + 312.195 *lens_ipow(begin_dx, 2)*begin_dy + 8.78967 *begin_y*lens_ipow(begin_dy, 2) + 0.00178997 *begin_y*begin_dx*begin_dy + 2.98505 *begin_y*lens_ipow(begin_dx, 2) + 0.0781152 *lens_ipow(begin_y, 2)*begin_dy + 0.00022001 *lens_ipow(begin_y, 3) + 5.76403 *begin_x*begin_dx*begin_dy + 0.0524156 *begin_x*begin_y*begin_dx + -1.65767e-07 *begin_x*lens_ipow(begin_y, 2) + 0.0251438 *lens_ipow(begin_x, 2)*begin_dy + 0.000217566 *lens_ipow(begin_x, 2)*begin_y + -0.0660435 *begin_y*lens_ipow(begin_lambda, 3) + -1.05783e-08 *lens_ipow(begin_x, 3)*begin_y + -0.000238607 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 0.000734854 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 3.20796e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + -12.3294 *begin_dy*lens_ipow(begin_lambda, 5) + 0.0040916 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 11026.7 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + -4.69828e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3) + -0.00574666 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 5) + -4.14292e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 3) + 42394.4 *lens_ipow(begin_dy, 9) + 1162.52 *lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 4) + 9.79145 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 4) + 919.141 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 5) + 51.7455 *begin_dy*lens_ipow(begin_lambda, 10) + 0.348236 *begin_y*lens_ipow(begin_lambda, 10) + -0.0370741 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 7) + -9.08606e-17 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 7);
  pred_dx =  + 1.87894e-07  + 0.872308 *begin_dx + 0.000640927 *begin_x + -5.45618 *begin_dx*lens_ipow(begin_dy, 2) + -5.40499 *lens_ipow(begin_dx, 3) + -0.073883 *begin_y*begin_dx*begin_dy + -0.000220612 *lens_ipow(begin_y, 2)*begin_dx + -0.0359731 *begin_x*lens_ipow(begin_dy, 2) + -0.109628 *begin_x*lens_ipow(begin_dx, 2) + -0.000432771 *begin_x*begin_y*begin_dy + -9.23302e-07 *begin_x*lens_ipow(begin_y, 2) + -0.000653513 *lens_ipow(begin_x, 2)*begin_dx + -9.22903e-07 *lens_ipow(begin_x, 3) + 0.0892395 *begin_dx*lens_ipow(begin_lambda, 3) + -1.55338 *lens_ipow(begin_dx, 5) + 0.00077113 *begin_x*lens_ipow(begin_lambda, 4) + 3.68011e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 7.69945e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 5) + -0.485149 *begin_dx*lens_ipow(begin_lambda, 10) + -0.00382843 *begin_x*lens_ipow(begin_lambda, 10);
  pred_dy =  + 7.38203e-08  + 0.872227 *begin_dy + 0.000639659 *begin_y + -5.40825 *lens_ipow(begin_dy, 3) + -5.46406 *lens_ipow(begin_dx, 2)*begin_dy + -0.109758 *begin_y*lens_ipow(begin_dy, 2) + -0.0359932 *begin_y*lens_ipow(begin_dx, 2) + -0.000655186 *lens_ipow(begin_y, 2)*begin_dy + -9.28129e-07 *lens_ipow(begin_y, 3) + -0.0739962 *begin_x*begin_dx*begin_dy + -0.000432971 *begin_x*begin_y*begin_dx + -0.000220468 *lens_ipow(begin_x, 2)*begin_dy + -9.12588e-07 *lens_ipow(begin_x, 2)*begin_y + 0.0901749 *begin_dy*lens_ipow(begin_lambda, 3) + -1.64243 *lens_ipow(begin_dy, 5) + 0.000790711 *begin_y*lens_ipow(begin_lambda, 4) + 8.42114e-06 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 5) + -0.496129 *begin_dy*lens_ipow(begin_lambda, 10) + -0.00400237 *begin_y*lens_ipow(begin_lambda, 10);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 119.392  + -0.000155495 *begin_y + 0.000205308 *begin_x + 315.426 *lens_ipow(begin_dy, 2) + 938.685 *lens_ipow(begin_dx, 2) + 5.80165 *begin_y*begin_dy + 0.025389 *lens_ipow(begin_y, 2) + 17.0825 *begin_x*begin_dx + 0.0772709 *lens_ipow(begin_x, 2) + -0.0139484 *begin_x*lens_ipow(begin_dy, 2) + 0.759388 *begin_x*begin_dx*begin_lambda + -0.0478022 *begin_x*begin_y*begin_dx*begin_dy + -10.6975 *lens_ipow(begin_lambda, 5) + 28920.4 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -0.000165514 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + 0.0233978 *begin_y*begin_dy*lens_ipow(begin_lambda, 5) + 5579.25 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 4) + 71309.6 *lens_ipow(begin_dx, 8) + 1.20246e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_lambda, 3) + 42.4803 *lens_ipow(begin_lambda, 10) + 1.21137e+06 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 2)+0.0f;
  dx1_domega0[0][1] =  + -0.000269889 *begin_x + 630.851 *begin_dx*begin_dy + 5.80165 *begin_y*begin_dx + 5.90264 *begin_x*begin_dy + 0.0525601 *begin_x*begin_y + -0.0278968 *begin_x*begin_dx*begin_dy + -0.000975206 *begin_x*begin_y*begin_lambda + 2.62037 *begin_x*lens_ipow(begin_dy, 3) + -0.0239011 *begin_x*begin_y*lens_ipow(begin_dx, 2) + 11568.2 *lens_ipow(begin_dx, 5)*begin_dy + 0.003015 *begin_x*lens_ipow(begin_lambda, 5) + 0.0233978 *begin_y*begin_dx*lens_ipow(begin_lambda, 5) + 0.0785598 *begin_x*begin_dy*lens_ipow(begin_lambda, 6) + 2.42274e+06 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 2)+0.0f;
  dx1_domega0[1][0] =  + 0.00155992  + 0.0149304 *begin_dx + -0.000243009 *begin_y + 624.39 *begin_dx*begin_dy + 0.00178997 *begin_y*begin_dy + 5.97009 *begin_y*begin_dx + 5.76403 *begin_x*begin_dy + 0.0524156 *begin_x*begin_y + -0.000477215 *lens_ipow(begin_y, 3)*begin_dx + 0.000734854 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 22053.4 *begin_dx*lens_ipow(begin_dy, 5) + 4650.06 *lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 4) + 39.1658 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 4)+0.0f;
  dx1_domega0[1][1] =  + 119.438  + 0.000168035 *begin_y + 943.331 *lens_ipow(begin_dy, 2) + 312.195 *lens_ipow(begin_dx, 2) + 17.5793 *begin_y*begin_dy + 0.00178997 *begin_y*begin_dx + 0.0781152 *lens_ipow(begin_y, 2) + 5.76403 *begin_x*begin_dx + 0.0251438 *lens_ipow(begin_x, 2) + 0.000734854 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 3.20796e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -12.3294 *lens_ipow(begin_lambda, 5) + 0.0163664 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 55133.6 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -0.000140948 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -0.00574666 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 5) + 381550 *lens_ipow(begin_dy, 8) + 1162.52 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 4) + 4595.71 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 5) + 51.7455 *lens_ipow(begin_lambda, 10) + -0.259519 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 6)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
