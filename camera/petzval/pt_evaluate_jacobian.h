const float dx00 =  + 0.580638  + -5.06487e-06 *x + 0.402587 *lens_ipow(dy, 2) + 0.440776 *lens_ipow(dx, 2) + 0.0278479 *y*dy + 0.000310157 *lens_ipow(y, 2) + -1.57876e-05 *x*dy + 0.0778619 *x*dx + 0.000949592 *lens_ipow(x, 2) + 0.10932 *lens_ipow(lambda, 3) + 0.000108671 *x*lens_ipow(dy, 2) + -0.00068348 *x*y*dx*dy + 8.62385e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 2.01957e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.54376e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + -0.861676 *lens_ipow(dy, 6) + 0.0235765 *x*lens_ipow(dx, 5) + 6.70399e-08 *lens_ipow(y, 4)*lens_ipow(lambda, 4) + 2.17937e-08 *lens_ipow(x, 6)*lens_ipow(dy, 2)*lambda + -0.588629 *lens_ipow(lambda, 10) + 21.0042 *x*lens_ipow(dx, 7)*lens_ipow(dy, 2) + 3.65119e-15 *lens_ipow(x, 2)*lens_ipow(y, 8) + 2.14404e-15 *lens_ipow(x, 10)+0.0f;
const float dx01 =  + 3.54369e-05 *dy + 6.50137e-06 *dx + 0.0203743 *y*dx + 0.0278479 *x*dy + 0.000620314 *x*y + -0.00034174 *lens_ipow(x, 2)*dx*dy + 1.34638e-07 *lens_ipow(x, 3)*y + -0.000132779 *lens_ipow(y, 3)*lens_ipow(dx, 5) + 2.6816e-07 *x*lens_ipow(y, 3)*lens_ipow(lambda, 4) + -9.70684 *y*lens_ipow(dx, 9) + 9.73652e-15 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const float dx02 =  + 63.788  + 0.00691092 *dy + 0.0118796 *dx + 6.50137e-06 *y + -42.1459 *lens_ipow(dy, 2) + -124.696 *lens_ipow(dx, 2) + 0.0101871 *lens_ipow(y, 2) + 0.881552 *x*dx + 0.038931 *lens_ipow(x, 2) + -0.167559 *lens_ipow(dy, 3) + 6.98846 *lens_ipow(lambda, 4) + -40.2201 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00034174 *lens_ipow(x, 2)*y*dy + 0.0589413 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -0.000165973 *lens_ipow(y, 4)*lens_ipow(dx, 4) + -34.0239 *lens_ipow(lambda, 10) + 220.209 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -43.6808 *lens_ipow(y, 2)*lens_ipow(dx, 8) + 73.5147 *lens_ipow(x, 2)*lens_ipow(dx, 6)*lens_ipow(dy, 2)+0.0f;
const float dx03 =  + 9.45701e-05  + 0.00691092 *dx + 3.54369e-05 *y + -84.2917 *dx*dy + 0.805175 *x*dy + 0.0278479 *x*y + -7.89379e-06 *lens_ipow(x, 2) + -0.502677 *dx*lens_ipow(dy, 2) + 0.000108671 *lens_ipow(x, 2)*dy + -26.8134 *lens_ipow(dx, 3)*dy + -0.00034174 *lens_ipow(x, 2)*y*dx + 5.74923e-05 *lens_ipow(x, 3)*dy + -5.17005 *x*lens_ipow(dy, 5) + 6.22676e-09 *lens_ipow(x, 7)*dy*lambda + 146.806 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 6) + 21.0042 *lens_ipow(x, 2)*lens_ipow(dx, 7)*dy+0.0f;
const float dx04 =  + 0.327961 *x*lens_ipow(lambda, 2) + 27.9539 *dx*lens_ipow(lambda, 3) + 2.54376e-05 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + 2.6816e-07 *x*lens_ipow(y, 4)*lens_ipow(lambda, 3) + 3.11338e-09 *lens_ipow(x, 7)*lens_ipow(dy, 2) + -340.239 *dx*lens_ipow(lambda, 9) + 440.419 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -5.88629 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + -8.3677e-06  + 4.15587e-05 *dy + -1.57414e-06 *x + 0.0280539 *y*dx + 2.18427e-07 *lens_ipow(y, 2) + 0.0203932 *x*dy + 0.000627247 *x*y + 2.88198e-05 *y*lens_ipow(dx, 2) + -0.000291516 *lens_ipow(y, 2)*dx*dy + 0.000272421 *x*y*lens_ipow(dy, 2) + -9.99732e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000454962 *dx*dy*lens_ipow(lambda, 3) + -1.13353e-05 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -4.01578e-06 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + 2.53836e-08 *lens_ipow(x, 5)*dy*lambda + 2.238e-14 *lens_ipow(x, 5)*lens_ipow(y, 5) + 5.97079e-12 *lens_ipow(x, 7)*y*lens_ipow(lambda, 2)+0.0f;
const float dx11 =  + 0.580787  + 0.442704 *lens_ipow(dy, 2) + 0.406335 *lens_ipow(dx, 2) + 0.0781369 *y*dy + 0.000945062 *lens_ipow(y, 2) + 0.0280539 *x*dx + 4.36854e-07 *x*y + 0.000313623 *lens_ipow(x, 2) + 0.107869 *lens_ipow(lambda, 3) + 2.88198e-05 *x*lens_ipow(dx, 2) + 5.48196e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.000583031 *x*y*dx*dy + 0.000136211 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -2.26705e-05 *x*y*lens_ipow(dx, 3) + -1.3032 *lens_ipow(dx, 6) + 0.0144327 *y*lens_ipow(dy, 5) + 0.00380268 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -1.20473e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 4.78807e-13 *lens_ipow(y, 8) + 1.81106e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2)*lambda + -0.583892 *lens_ipow(lambda, 10) + 9.94621 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.00122699 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 1.865e-14 *lens_ipow(x, 6)*lens_ipow(y, 4) + 7.46349e-13 *lens_ipow(x, 8)*lens_ipow(lambda, 2)+0.0f;
const float dx12 =  + -0.000241407  + -84.7531 *dx*dy + 0.81267 *y*dx + 0.0280539 *x*y + 5.76395e-05 *x*y*dx + -0.000291516 *x*lens_ipow(y, 2)*dy + 0.000454962 *x*dy*lens_ipow(lambda, 3) + -3.40058e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -7.81917 *y*lens_ipow(dx, 5) + 0.00507025 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -4.01578e-06 *x*lens_ipow(y, 3)*lens_ipow(lambda, 2) + 5.17446e-09 *lens_ipow(y, 7)*dx*lambda + 19.8924 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx13 =  + 63.7892  + -0.00431435 *dy + 4.15587e-05 *x + -124.829 *lens_ipow(dy, 2) + -42.3765 *lens_ipow(dx, 2) + 0.885409 *y*dy + 0.0390684 *lens_ipow(y, 2) + 0.0101966 *lens_ipow(x, 2) + 6.99505 *lens_ipow(lambda, 4) + -0.000291516 *x*lens_ipow(y, 2)*dx + 0.000272421 *lens_ipow(x, 2)*y*dy + -6.66488e-06 *lens_ipow(x, 3)*dy + 0.000454962 *x*dx*lens_ipow(lambda, 3) + 0.0360817 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 4.2306e-09 *lens_ipow(x, 6)*lambda + -34.2711 *lens_ipow(lambda, 10) + 14.9193 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000817995 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx14 =  + 0.323606 *y*lens_ipow(lambda, 2) + 27.9802 *dy*lens_ipow(lambda, 3) + 3.65464e-05 *lens_ipow(y, 3)*lambda + 0.00136489 *x*dx*dy*lens_ipow(lambda, 2) + -8.03156e-06 *x*lens_ipow(y, 3)*dx*lambda + 4.2306e-09 *lens_ipow(x, 6)*dy + 2.58723e-09 *lens_ipow(y, 7)*lens_ipow(dx, 2) + -342.711 *dy*lens_ipow(lambda, 9) + -5.83891 *y*lens_ipow(lambda, 9) + 9.94621 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + -0.00245398 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 1.4927e-12 *lens_ipow(x, 8)*y*lambda+0.0f;
const float dx20 =  + -0.0305627  + -0.0334408 *lens_ipow(dy, 2) + -0.0017499 *lens_ipow(dx, 2) + -0.00115196 *y*dy + -6.69053e-06 *lens_ipow(y, 2) + -0.00121292 *x*dx + -9.30182e-06 *lens_ipow(x, 2) + -0.000200509 *lens_ipow(lambda, 3) + 3.1431e-05 *x*y*dx*dy + -1.13891e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.000193911 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -0.000317397 *lens_ipow(y, 2)*lens_ipow(dx, 6) + -9.50584e-11 *lens_ipow(x, 6)*lens_ipow(dy, 2)+0.0f;
const float dx21 =  + -4.36351e-09  + -0.0477622 *dx*dy + -0.000789318 *y*dx + -0.00115196 *x*dy + -1.33811e-05 *x*y + 1.57155e-05 *lens_ipow(x, 2)*dx*dy + -7.59273e-09 *lens_ipow(x, 3)*y*lambda + 0.00102445 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000634794 *x*y*lens_ipow(dx, 6)+0.0f;
const float dx22 =  + -1.62788  + -1.14114 *lens_ipow(dy, 2) + 2.88115 *lens_ipow(dx, 2) + -0.0477622 *y*dy + -0.000394659 *lens_ipow(y, 2) + -0.00349981 *x*dx + -0.00060646 *lens_ipow(x, 2) + 0.0370781 *lens_ipow(lambda, 3) + 5.18656 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.57155e-05 *lens_ipow(x, 2)*y*dy + 0.00153667 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 250.116 *lens_ipow(dx, 8) + -0.00190438 *x*lens_ipow(y, 2)*lens_ipow(dx, 5) + -0.242612 *lens_ipow(lambda, 10) + -14.9791 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6)+0.0f;
const float dx23 =  + -2.28229 *dx*dy + -0.0477622 *y*dx + -0.0668816 *x*dy + -0.00115196 *x*y + 3.45771 *lens_ipow(dx, 3)*dy + 1.57155e-05 *lens_ipow(x, 2)*y*dx + 0.00102445 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -0.000258548 *lens_ipow(x, 3)*lens_ipow(dy, 3) + -2.71595e-11 *lens_ipow(x, 7)*dy + -9.98606 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx24 =  + 0.111234 *dx*lens_ipow(lambda, 2) + -0.000601527 *x*lens_ipow(lambda, 2) + -3.79636e-09 *lens_ipow(x, 3)*lens_ipow(y, 2) + -2.42612 *dx*lens_ipow(lambda, 9) + -29.9582 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + 0.0735958 *dx*dy + 0.000769666 *x*dy + 1.56925e-06 *x*y + -0.104594 *lens_ipow(dx, 5)*dy + -7.23198e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 2.92807e-14 *lens_ipow(x, 7)*y+0.0f;
const float dx31 =  + -0.0305648  + -0.00137119 *lens_ipow(dy, 2) + 0.00642377 *lens_ipow(dx, 2) + -0.00119648 *y*dy + -9.17423e-06 *lens_ipow(y, 2) + 7.84626e-07 *lens_ipow(x, 2) + -0.000203596 *lens_ipow(lambda, 3) + -3.30093e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -7.23198e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 3.66008e-15 *lens_ipow(x, 8)+0.0f;
const float dx32 =  + 4.21623e-06  + 6.17643 *dx*dy + 0.0128475 *y*dx + 0.0735958 *x*dy + -1.32037e-08 *lens_ipow(y, 5)*dx + -0.522971 *x*lens_ipow(dx, 4)*dy + -0.15119 *dx*dy*lens_ipow(lambda, 5) + 1657.46 *lens_ipow(dx, 3)*lens_ipow(dy, 5)+0.0f;
const float dx33 =  + -1.6281  + 4.04563e-05 *dy + 2.89846 *lens_ipow(dy, 2) + 3.08821 *lens_ipow(dx, 2) + -0.00274239 *y*dy + -0.00059824 *lens_ipow(y, 2) + 0.0735958 *x*dx + 0.000384833 *lens_ipow(x, 2) + 0.0379537 *lens_ipow(lambda, 3) + -0.104594 *x*lens_ipow(dx, 5) + -0.0755948 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + 263.537 *lens_ipow(dy, 8) + 2071.82 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -1.80799e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -0.250029 *lens_ipow(lambda, 10)+0.0f;
const float dx34 =  + 0.113861 *dy*lens_ipow(lambda, 2) + -0.000610788 *y*lens_ipow(lambda, 2) + -0.377974 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + -2.50029 *dy*lens_ipow(lambda, 9)+0.0f;
const float dx40 =  + -5.06366e-06 *dy + -0.000574729 *dx + -3.49136e-05 *x + -0.000178598 *dx*lens_ipow(lambda, 2) + 0.000156553 *y*dx*dy + 0.000178397 *x*lens_ipow(dy, 2) + 0.000408997 *x*lens_ipow(dx, 2) + -2.2227e-10 *x*lens_ipow(y, 3) + -2.04301e-05 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000148378 *x*dx*lens_ipow(dy, 3) + -2.32035e-09 *x*lens_ipow(y, 4) + -4.70371e-09 *lens_ipow(x, 3)*lens_ipow(y, 2) + -2.65358e-09 *lens_ipow(x, 5) + 0.00511412 *y*lens_ipow(dx, 3)*dy*lambda + 2.54104e-05 *lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 2.71926e-05 *lens_ipow(x, 3)*lens_ipow(dx, 4) + -3.46968e-10 *lens_ipow(x, 5)*y*dy + -1.79354e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx41 =  + 4.9533e-07  + -0.000567518 *dy + -3.4821e-05 *y + 1.14242e-05 *dx*dy + -0.000129152 *dy*lens_ipow(lambda, 2) + 0.000445812 *y*lens_ipow(dy, 2) + 0.000176413 *y*lens_ipow(dx, 2) + 0.000156553 *x*dx*dy + -3.33405e-10 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.52357e-09 *lens_ipow(y, 5) + -4.64071e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -2.35186e-09 *lens_ipow(x, 4)*y + 0.00511412 *x*lens_ipow(dx, 3)*dy*lambda + 7.62311e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -5.7828e-11 *lens_ipow(x, 6)*dy + 9.5688e-08 *lens_ipow(y, 5)*lens_ipow(dy, 4) + -1.19569e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx42 =  + 5.30727e-06  + -0.0227747 *dx + -0.000574729 *x + 1.14242e-05 *y*dy + 0.000176413 *lens_ipow(y, 2)*dx + -0.000178598 *x*lens_ipow(lambda, 2) + 0.000156553 *x*y*dy + 0.000408997 *lens_ipow(x, 2)*dx + -15.3799 *dx*lens_ipow(dy, 4) + -16.4824 *lens_ipow(dx, 5) + -7.41889e-05 *lens_ipow(x, 2)*lens_ipow(dy, 3) + 0.0153424 *x*y*lens_ipow(dx, 2)*dy*lambda + -348.376 *lens_ipow(dx, 5)*lens_ipow(dy, 2) + 2.54104e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 3) + 2.71926e-05 *lens_ipow(x, 4)*lens_ipow(dx, 3) + -1.97012 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -0.744748 *lens_ipow(dx, 3)*lens_ipow(lambda, 5) + -1.79354e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const float dx43 =  + -0.0287808 *dy + -0.000567518 *y + -5.06366e-06 *x + 1.14242e-05 *y*dx + -0.000129152 *y*lens_ipow(lambda, 2) + 0.000445812 *lens_ipow(y, 2)*dy + 0.000156553 *x*y*dx + 0.000178397 *lens_ipow(x, 2)*dy + -30.7598 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -2.04301e-05 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 2) + -0.000222567 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 0.00511412 *x*y*lens_ipow(dx, 3)*lambda + -142.748 *lens_ipow(dy, 7) + -116.125 *lens_ipow(dx, 6)*dy + 7.62311e-05 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -5.7828e-11 *lens_ipow(x, 6)*y + -1.97012 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 5) + 6.3792e-08 *lens_ipow(y, 6)*lens_ipow(dy, 3) + -1.19569e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy+0.0f;
const float dx44 =  + 0.137175  + -0.346447 *lens_ipow(lambda, 2) + -0.000258304 *y*dy*lambda + -0.000357195 *x*dx*lambda + -2.04301e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.00511412 *x*y*lens_ipow(dx, 3)*dy + -4.92529 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -0.930935 *lens_ipow(dx, 4)*lens_ipow(lambda, 4) + 2.3365 *lens_ipow(lambda, 10)+0.0f;
