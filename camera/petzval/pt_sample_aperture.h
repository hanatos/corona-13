float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + -2.39596e-05  + 0.000170721 *begin_dy + 50.3715 *begin_dx + 1.20573e-06 *begin_y + 0.792054 *begin_x + 0.003814 *lens_ipow(begin_dx, 2) + -1.02565e-06 *lens_ipow(begin_x, 2) + 0.101002 *begin_dx*lens_ipow(begin_dy, 2) + 0.240926 *lens_ipow(begin_dx, 3) + 0.534569 *begin_y*begin_dx*begin_dy + 0.00916713 *lens_ipow(begin_y, 2)*begin_dx + 0.123821 *begin_x*lens_ipow(begin_dy, 2) + 0.658175 *begin_x*lens_ipow(begin_dx, 2) + 0.013701 *begin_x*begin_y*begin_dy + 0.000166393 *begin_x*lens_ipow(begin_y, 2) + -7.99133e-06 *lens_ipow(begin_x, 2)*begin_dy + 0.022954 *lens_ipow(begin_x, 2)*begin_dx + 0.000168299 *lens_ipow(begin_x, 3) + -0.0537504 *begin_dx*lens_ipow(begin_dy, 3) + 0.0538104 *lens_ipow(begin_dx, 3)*begin_dy + 0.0553584 *begin_x*lens_ipow(begin_lambda, 3) + 3.57819 *begin_dx*lens_ipow(begin_lambda, 4) + 0.00194404 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 6.06162e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + 0.00031874 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 0.00750986 *begin_x*begin_y*lens_ipow(begin_dy, 5) + 0.0268014 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 4) + 4.90502e-05 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.80118e-09 *lens_ipow(begin_x, 6)*begin_dx + 0.0583032 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6)*begin_dy + -0.144778 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 1.88903e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + 9.66942e-11 *lens_ipow(begin_x, 7)*lens_ipow(begin_lambda, 3) + -17.3519 *begin_dx*lens_ipow(begin_lambda, 10) + -2.25406 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 9) + -0.298715 *begin_x*lens_ipow(begin_lambda, 10) + 0.691107 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 9) + 1.13005e-15 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 8) + 2.36409e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dy, 4) + 1.25173e-15 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2);
  pred_y =  + 5.36935e-05  + 50.4606 *begin_dy + -7.98426e-05 *begin_dx + 0.793472 *begin_y + -7.02206e-07 *begin_x + 2.57101e-05 *begin_y*begin_dy + -6.73559e-06 *begin_x*begin_dy + -11.1018 *lens_ipow(begin_dy, 3) + -1.28628 *lens_ipow(begin_dx, 2)*begin_dy + 0.104314 *begin_y*lens_ipow(begin_dx, 2) + 0.0185838 *lens_ipow(begin_y, 2)*begin_dy + 0.00014928 *lens_ipow(begin_y, 3) + 0.504188 *begin_x*begin_dx*begin_dy + 0.013111 *begin_x*begin_y*begin_dx + 0.00900447 *lens_ipow(begin_x, 2)*begin_dy + 0.000161239 *lens_ipow(begin_x, 2)*begin_y + 0.0490546 *begin_y*lens_ipow(begin_lambda, 3) + 1.01948 *begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 2.62835 *begin_dy*lens_ipow(begin_lambda, 4) + 35.2614 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + -0.00169852 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 3.99942 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 0.0127049 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 0.0430536 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.00229183 *begin_x*begin_y*lens_ipow(begin_dx, 5) + 4.37134e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.0655604 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 4) + -0.00308816 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 6) + -0.00228635 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 6) + -17.2515 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 5) + 0.00147988 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + -3.60928e-14 *lens_ipow(begin_y, 9)*begin_lambda + -9.44344e-14 *begin_x*lens_ipow(begin_y, 8)*begin_dx + -12.1588 *begin_dy*lens_ipow(begin_lambda, 10) + -77.059 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 8) + -0.24787 *begin_y*lens_ipow(begin_lambda, 10) + 2.87159e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 6) + 0.000274665 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 1.22456e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*lens_ipow(begin_lambda, 2) + 4.54444e-15 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 5);
  pred_dx =  + -1.85825e-07  + 0.608182 *begin_dx + -3.83536e-08 *begin_y + -0.0102713 *begin_x + 7.47082e-05 *lens_ipow(begin_dx, 2) + 7.60148e-07 *begin_y*begin_dy + 3.7942e-08 *begin_x*begin_dy + -0.534525 *begin_dx*lens_ipow(begin_dy, 2) + -0.513478 *lens_ipow(begin_dx, 3) + -2.51485e-05 *begin_y*lens_ipow(begin_dx, 2) + 0.000139479 *lens_ipow(begin_y, 2)*begin_dx + -0.00216452 *begin_x*lens_ipow(begin_dy, 2) + 0.000337277 *begin_x*begin_y*begin_dy + 3.87528e-06 *begin_x*lens_ipow(begin_y, 2) + 0.000416054 *lens_ipow(begin_x, 2)*begin_dx + 1.17821e-08 *lens_ipow(begin_x, 2)*begin_y + 0.00225279 *begin_x*lens_ipow(begin_lambda, 3) + 6.0162e-06 *lens_ipow(begin_x, 3)*begin_lambda + -0.0112627 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 9.42778e-10 *begin_x*lens_ipow(begin_y, 4) + 1.44427e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 4.22515e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 3.14996e-09 *lens_ipow(begin_x, 5) + 0.242838 *begin_dx*lens_ipow(begin_lambda, 5) + 1.89557e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -4.01037e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy*begin_lambda + 0.000885214 *begin_x*begin_y*lens_ipow(begin_dy, 5) + -0.000136779 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.00801133 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 0.000654922 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 5)*begin_dy + -0.000435043 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 6) + -9.03874e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + -0.901541 *begin_dx*lens_ipow(begin_lambda, 10) + -1.65352 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 8) + -19.0025 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -49.1993 *lens_ipow(begin_dx, 7)*lens_ipow(begin_lambda, 4) + 0.00168554 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -0.011703 *begin_x*lens_ipow(begin_lambda, 10) + -6.49905e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -5.26643e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 6);
  pred_dy =  + 2.84649e-06  + 0.607813 *begin_dy + -1.87294e-05 *begin_dx + -0.0103448 *begin_y + -4.74824e-07 *begin_x + 1.78648e-06 *begin_y*begin_dy + 3.2244e-06 *begin_y*begin_dx + -0.52495 *lens_ipow(begin_dy, 3) + -0.483809 *lens_ipow(begin_dx, 2)*begin_dy + 0.000545522 *lens_ipow(begin_y, 2)*begin_dy + 4.27867e-06 *lens_ipow(begin_y, 3) + 0.000431408 *begin_x*begin_y*begin_dx + 4.40996e-06 *lens_ipow(begin_x, 2)*begin_y + 0.0024682 *begin_y*lens_ipow(begin_lambda, 3) + 1.34402e-06 *lens_ipow(begin_y, 3)*begin_lambda + -8.36458e-05 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + 0.00023829 *lens_ipow(begin_x, 2)*begin_dy*begin_lambda + 6.31698e-07 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 4.5719e-10 *lens_ipow(begin_y, 5) + -0.000164039 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + 3.20538e-11 *begin_x*lens_ipow(begin_y, 4) + 9.79683e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 1.33789e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 1.23125e-07 *lens_ipow(begin_x, 4)*begin_dy + 0.243968 *begin_dy*lens_ipow(begin_lambda, 5) + -2.52177 *lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 2) + 1.02018e-08 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_lambda, 2) + 0.00239545 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 4) + -9.81465e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 6) + 0.0207307 *begin_x*begin_y*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 0.00782527 *begin_x*begin_y*lens_ipow(begin_dx, 7) + -0.000942381 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 5) + 3.16602e-07 *lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 5) + -0.955327 *begin_dy*lens_ipow(begin_lambda, 10) + -69.6604 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 4) + -0.0128775 *begin_y*lens_ipow(begin_lambda, 10) + -1.48939e-09 *lens_ipow(begin_y, 5)*begin_dx*lens_ipow(begin_lambda, 5) + 0.00783278 *begin_x*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 6) + -0.000645319 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 8) + 7.24717e-17 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 50.3715  + 0.007628 *begin_dx + 0.101002 *lens_ipow(begin_dy, 2) + 0.722778 *lens_ipow(begin_dx, 2) + 0.534569 *begin_y*begin_dy + 0.00916713 *lens_ipow(begin_y, 2) + 1.31635 *begin_x*begin_dx + 0.022954 *lens_ipow(begin_x, 2) + -0.0537504 *lens_ipow(begin_dy, 3) + 0.161431 *lens_ipow(begin_dx, 2)*begin_dy + 3.57819 *lens_ipow(begin_lambda, 4) + 0.00194404 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.0268014 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 9.81004e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_dy + 1.80118e-09 *lens_ipow(begin_x, 6) + 0.349819 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*begin_dy + -0.723889 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -17.3519 *lens_ipow(begin_lambda, 10) + -20.2866 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 8) + 6.21996 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 8)+0.0f;
  dx1_domega0[0][1] =  + 0.000170721  + 0.202004 *begin_dx*begin_dy + 0.534569 *begin_y*begin_dx + 0.247643 *begin_x*begin_dy + 0.013701 *begin_x*begin_y + -7.99133e-06 *lens_ipow(begin_x, 2) + -0.161251 *begin_dx*lens_ipow(begin_dy, 2) + 0.0538104 *lens_ipow(begin_dx, 3) + 0.00388809 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.00127496 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 0.0375493 *begin_x*begin_y*lens_ipow(begin_dy, 4) + 0.107206 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 3) + 4.90502e-05 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2) + 0.0583032 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -0.289556 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 5)*begin_dy + 9.45637e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dy, 3)+0.0f;
  dx1_domega0[1][0] =  + -7.98426e-05  + -2.57256 *begin_dx*begin_dy + 0.208628 *begin_y*begin_dx + 0.504188 *begin_x*begin_dy + 0.013111 *begin_x*begin_y + 7.99884 *begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 0.0861072 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 0.0114591 *begin_x*begin_y*lens_ipow(begin_dx, 4) + 8.74268e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.262242 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 4) + 0.00295976 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_lambda, 5) + -9.44344e-14 *begin_x*lens_ipow(begin_y, 8) + 0.000274665 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4)+0.0f;
  dx1_domega0[1][1] =  + 50.4606  + 2.57101e-05 *begin_y + -6.73559e-06 *begin_x + -33.3055 *lens_ipow(begin_dy, 2) + -1.28628 *lens_ipow(begin_dx, 2) + 0.0185838 *lens_ipow(begin_y, 2) + 0.504188 *begin_x*begin_dx + 0.00900447 *lens_ipow(begin_x, 2) + 2.03896 *begin_y*begin_dy*begin_lambda + 2.62835 *lens_ipow(begin_lambda, 4) + 105.784 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.00509555 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 3.99942 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 0.0127049 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + 0.129161 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 4.37134e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.018529 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 5) + -0.00228635 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 6) + -86.2577 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 5) + -12.1588 *lens_ipow(begin_lambda, 10) + -231.177 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 8) + 0.000549329 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy*lens_ipow(begin_lambda, 4)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
