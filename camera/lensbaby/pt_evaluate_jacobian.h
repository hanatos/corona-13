const float dx00 =  + 0.9962  + 4.81792e-07 *x + 0.0322325 *lens_ipow(dy, 2) + -1.0814 *lens_ipow(dx, 2) + 0.000556925 *y*dy + 2.25569e-06 *lens_ipow(y, 2) + -0.00843923 *x*dx + 6.50574e-06 *lens_ipow(x, 2) + -0.00414195 *y*lens_ipow(dx, 2)*dy + -0.000525789 *x*lens_ipow(dx, 4) + -0.269658 *lens_ipow(dy, 6) + -3.8905e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3) + 0.0182674 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.0002848 *x*y*dx*dy*lens_ipow(lambda, 4) + 0.000180388 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 8.38453e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*dy + 2.56893e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + 1.33323e-08 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 2) + -4.06736 *y*lens_ipow(dx, 8)*dy + 3.11636e-10 *lens_ipow(x, 7)*dx*lens_ipow(dy, 2)+0.0f;
const float dx01 =  + 1.32559e-06  + -1.1112 *dx*dy + -0.00935308 *y*dx + 0.000556925 *x*dy + 4.51137e-06 *x*y + -0.0150154 *y*dx*lens_ipow(dy, 2) + -0.00414195 *x*lens_ipow(dx, 2)*dy + -1.25349e-06 *lens_ipow(y, 4)*dx*dy + -3.07281e-11 *lens_ipow(y, 7)*dx + 0.0365349 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.0001424 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 4) + 2.09613e-06 *lens_ipow(x, 4)*lens_ipow(dx, 3)*dy + 2.56893e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -4.06736 *x*lens_ipow(dx, 8)*dy+0.0f;
const float dx02 =  + 118.633  + 0.00724187 *dx + -67.2007 *lens_ipow(dy, 2) + -201.585 *lens_ipow(dx, 2) + -1.1112 *y*dy + -0.00467654 *lens_ipow(y, 2) + -2.16281 *x*dx + -0.00421962 *lens_ipow(x, 2) + 0.674128 *lens_ipow(lambda, 3) + -0.049569 *dx*lens_ipow(dy, 2) + -0.00750772 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00828389 *x*y*dx*dy + -0.00105158 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 132.116 *lens_ipow(dy, 6) + 1577.44 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -2.50698e-07 *lens_ipow(y, 5)*dy + -2.91788e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -2.11742 *lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -8.4572 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + 24711.7 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + 7958.17 *lens_ipow(dx, 8) + -3.84102e-12 *lens_ipow(y, 8) + 0.0365349 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + -0.0001424 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 4) + 6.2884e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy + 6.42232e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + 2.22204e-09 *lens_ipow(x, 6)*lens_ipow(lambda, 2) + -3.05767 *lens_ipow(lambda, 10) + -32.5388 *x*y*lens_ipow(dx, 7)*dy + 3.89545e-11 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const float dx03 =  + -134.401 *dx*dy + -1.1112 *y*dx + 0.0644649 *x*dy + 0.000556925 *x*y + -0.049569 *lens_ipow(dx, 2)*dy + -0.0150154 *lens_ipow(y, 2)*dx*dy + -0.00414195 *x*y*lens_ipow(dx, 2) + 792.696 *dx*lens_ipow(dy, 5) + 2103.26 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -2.50698e-07 *lens_ipow(y, 5)*dx + -1.61795 *x*lens_ipow(dy, 5) + -4.23485 *dx*dy*lens_ipow(lambda, 5) + 7060.47 *lens_ipow(dx, 7)*dy + 0.0730698 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.0001424 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 4) + 0.000120259 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 4) + 2.09613e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 3) + -4.06736 *x*y*lens_ipow(dx, 8) + 7.7909e-11 *lens_ipow(x, 8)*dx*dy+0.0f;
const float dx04 =  + 2.02238 *dx*lens_ipow(lambda, 2) + -10.5871 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -14.0953 *lens_ipow(dx, 3)*lens_ipow(lambda, 4) + -0.000569601 *lens_ipow(x, 2)*y*dx*dy*lens_ipow(lambda, 3) + 0.000240518 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 4.44408e-09 *lens_ipow(x, 6)*dx*lambda + -30.5767 *dx*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + -1.11904 *dx*dy + 0.00053884 *y*dx + -0.00949233 *x*dy + 4.02871e-06 *x*y + -0.00876924 *y*dx*lens_ipow(dy, 2) + -0.014526 *x*lens_ipow(dx, 2)*dy + 0.051311 *x*lens_ipow(dy, 5) + 1.32966e-09 *x*lens_ipow(y, 4)*dy + -8.34784e-07 *lens_ipow(x, 4)*dx*dy + -0.000165013 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 4) + 2.12271e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -9.45532e-08 *lens_ipow(x, 5)*lens_ipow(dy, 3) + -15.2327 *y*lens_ipow(dx, 3)*lens_ipow(dy, 6) + 0.168378 *lens_ipow(y, 2)*dx*lens_ipow(dy, 7) + -0.00894295 *lens_ipow(x, 2)*y*lens_ipow(dx, 5)*lens_ipow(dy, 2)+0.0f;
const float dx11 =  + 0.996236  + 2.46607e-05 *dy + -1.08614 *lens_ipow(dy, 2) + 0.0307602 *lens_ipow(dx, 2) + -0.00857591 *y*dy + 6.42414e-06 *lens_ipow(y, 2) + 0.00053884 *x*dx + 2.01435e-06 *lens_ipow(x, 2) + -0.00876924 *x*dx*lens_ipow(dy, 2) + 0.000433642 *y*dy*lens_ipow(lambda, 3) + -0.000310694 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -4.84862e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 2.65932e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 3.16463e-11 *lens_ipow(y, 7)*dy + -0.000330025 *x*y*dx*dy*lens_ipow(lambda, 4) + 2.12271e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 1.06641e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -15.2327 *x*lens_ipow(dx, 3)*lens_ipow(dy, 6) + 0.336756 *x*y*dx*lens_ipow(dy, 7) + -0.00298098 *lens_ipow(x, 3)*lens_ipow(dx, 5)*lens_ipow(dy, 2)+0.0f;
const float dx12 =  + -135.057 *dx*dy + 0.0615204 *y*dx + -1.11904 *x*dy + 0.00053884 *x*y + -0.00876924 *x*y*lens_ipow(dy, 2) + -0.014526 *lens_ipow(x, 2)*dx*dy + 2.35536 *dx*lens_ipow(dy, 4) + 2377.58 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 850.4 *lens_ipow(dx, 5)*dy + -0.000414258 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -1.66957e-07 *lens_ipow(x, 5)*dy + -4.44259 *dx*dy*lens_ipow(lambda, 5) + -85.5428 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + 11130.6 *dx*lens_ipow(dy, 7) + -0.000165013 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 4) + 7.07569e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 2) + 4.26566e-07 *lens_ipow(y, 5)*dx*lens_ipow(lambda, 3) + -45.698 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 6) + 0.168378 *x*lens_ipow(y, 2)*lens_ipow(dy, 7) + -0.0149049 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*lens_ipow(dy, 2)+0.0f;
const float dx13 =  + 118.644  + 2.46607e-05 *y + -202.304 *lens_ipow(dy, 2) + -67.5287 *lens_ipow(dx, 2) + -2.17227 *y*dy + -0.00428795 *lens_ipow(y, 2) + -1.11904 *x*dx + -0.00474617 *lens_ipow(x, 2) + 0.654417 *lens_ipow(lambda, 3) + -0.0175385 *x*y*dx*dy + -0.00726299 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 4.71072 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.000216821 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 1783.18 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 141.733 *lens_ipow(dx, 6) + -3.63647e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 0.128277 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 6.64829e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.66957e-07 *lens_ipow(x, 5)*dx + -8.45149 *lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -2.2213 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + -51.3257 *lens_ipow(dx, 5)*lens_ipow(dy, 2) + 7819.07 *lens_ipow(dy, 8) + 38957 *lens_ipow(dx, 2)*lens_ipow(dy, 6) + 3.95579e-12 *lens_ipow(y, 8) + -0.000165013 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 4) + 1.41514e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + -4.72766e-08 *lens_ipow(x, 6)*lens_ipow(dy, 2) + -3.00515 *lens_ipow(lambda, 10) + -91.396 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 5) + 1.17865 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 6) + -0.00596197 *lens_ipow(x, 3)*y*lens_ipow(dx, 5)*dy+0.0f;
const float dx14 =  + 1.96325 *dy*lens_ipow(lambda, 2) + 0.000650463 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -14.0858 *lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -11.1065 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + -0.00066005 *x*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 3) + 6.39849e-07 *lens_ipow(y, 5)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -30.0515 *dy*lens_ipow(lambda, 9)+0.0f;
const float dx20 =  + -0.0236202  + 2.75175e-06 *dy + -6.2898e-08 *x + -0.0352543 *lens_ipow(dy, 2) + -2.46976e-05 *dx*dy + 0.003401 *lens_ipow(dx, 2) + -0.000683332 *y*dy + -2.89675e-06 *lens_ipow(y, 2) + -9.30983e-06 *x*dx + 5.7588e-09 *x*y + 4.74745e-08 *lens_ipow(x, 2) + 2.57858e-10 *lens_ipow(y, 3) + 0.00326159 *lens_ipow(lambda, 4) + -4.29379e-07 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -5.97565e-06 *x*y*dx*dy*lambda + 0.0768391 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 0.000141149 *y*lens_ipow(dx, 7) + -0.0157669 *lens_ipow(lambda, 10) + -0.000749201 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx21 =  + 4.27394e-07  + 1.3446e-06 *dx + 5.26743e-08 *y + -1.88681e-05 *lens_ipow(dy, 2) + -0.0527617 *dx*dy + -0.000448947 *y*dx + -0.000683332 *x*dy + -5.7935e-06 *x*y + 2.8794e-09 *lens_ipow(x, 2) + -4.61799e-05 *dx*lens_ipow(dy, 2) + 7.73573e-10 *x*lens_ipow(y, 2) + 0.000532303 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.57212e-08 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -8.58759e-07 *x*y*lens_ipow(dy, 2) + -0.00347434 *dx*lens_ipow(dy, 3)*lambda + -2.98782e-06 *lens_ipow(x, 2)*dx*dy*lambda + 0.000141149 *x*lens_ipow(dx, 7) + 1.58789 *lens_ipow(dx, 9)*dy + -0.000749201 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx22 =  + -1.88185  + 0.203361 *lambda + 1.3446e-06 *y + -2.96886 *lens_ipow(dy, 2) + 0.169763 *lens_ipow(dx, 2) + -0.0527617 *y*dy + -0.000224473 *lens_ipow(y, 2) + -2.46976e-05 *x*dy + 0.00680201 *x*dx + -4.65492e-06 *lens_ipow(x, 2) + -0.0565389 *lens_ipow(lambda, 3) + -4.61799e-05 *y*lens_ipow(dy, 2) + 0.290037 *lens_ipow(dx, 4) + 0.00106461 *y*dx*lens_ipow(dy, 2) + 1.22371 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.00347434 *y*lens_ipow(dy, 3)*lambda + -2.98782e-06 *lens_ipow(x, 2)*y*dy*lambda + 0.153678 *x*dx*lens_ipow(dy, 4) + 0.000988042 *x*y*lens_ipow(dx, 6) + -0.380747 *lens_ipow(lambda, 10) + 14.291 *y*lens_ipow(dx, 8)*dy + -0.0014984 *x*y*dx*dy*lens_ipow(lambda, 6)+0.0f;
const float dx23 =  + -3.55572e-05  + 2.75175e-06 *x + -5.93773 *dx*dy + -3.77363e-05 *y*dy + -0.0527617 *y*dx + -0.0705086 *x*dy + -2.46976e-05 *x*dx + -0.000683332 *x*y + -9.23598e-05 *y*dx*dy + 0.00106461 *y*lens_ipow(dx, 2)*dy + -8.58759e-07 *x*lens_ipow(y, 2)*dy + 0.815809 *lens_ipow(dx, 3)*dy*lambda + -0.010423 *y*dx*lens_ipow(dy, 2)*lambda + -2.98782e-06 *lens_ipow(x, 2)*y*dx*lambda + 0.307356 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 1.58789 *y*lens_ipow(dx, 9) + -0.000749201 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 6)+0.0f;
const float dx24 =  + 0.203361 *dx + -0.169617 *dx*lens_ipow(lambda, 2) + -1.71475e-08 *lens_ipow(y, 3)*lambda + 0.0130464 *x*lens_ipow(lambda, 3) + 0.407905 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.00347434 *y*dx*lens_ipow(dy, 3) + -2.98782e-06 *lens_ipow(x, 2)*y*dx*dy + -3.80747 *dx*lens_ipow(lambda, 9) + -0.157669 *x*lens_ipow(lambda, 9) + -0.00449521 *x*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + -1.25201e-08  + -1.74291e-06 *dy + -3.12732e-08 *y + 0.0781408 *dx*dy + 0.000435029 *y*dx + 4.04503e-10 *lens_ipow(y, 2) + 0.000912039 *x*dy + 5.77444e-06 *x*y + 0.011577 *dx*lens_ipow(dy, 3) + -3.74747e-08 *x*lens_ipow(y, 2)*dy + 0.000566151 *y*dx*lens_ipow(dy, 2)*lambda + 0.0034642 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -1.74078e-05 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 0.000524152 *lens_ipow(x, 2)*dx*lens_ipow(dy, 5) + 3.04378e-05 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -0.000694844 *x*y*lens_ipow(dy, 6)*lens_ipow(lambda, 2)+0.0f;
const float dx31 =  + -0.0247  + 0.0029817 *lambda + -1.09679e-06 *dy + -1.37598e-06 *dx + -3.12732e-08 *x + 0.00438024 *lens_ipow(dy, 2) + -5.23069e-06 *dx*dy + 0.0162859 *lens_ipow(dx, 2) + 6.17817e-06 *y*dy + 4.75249e-08 *lens_ipow(y, 2) + 0.000435029 *x*dx + 8.09005e-10 *x*y + 2.88722e-06 *lens_ipow(x, 2) + -0.00340313 *lens_ipow(lambda, 4) + -0.000184554 *y*lens_ipow(dx, 2)*dy + -3.74747e-08 *lens_ipow(x, 2)*y*dy + 0.000566151 *x*dx*lens_ipow(dy, 2)*lambda + 0.0034642 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.45588e-05 *lens_ipow(y, 2)*lens_ipow(dx, 6) + -6.88881e-08 *lens_ipow(y, 4)*lens_ipow(dy, 4) + 0.00650638 *lens_ipow(lambda, 10) + 4.37633 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.52189e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -0.000347422 *lens_ipow(x, 2)*lens_ipow(dy, 6)*lens_ipow(lambda, 2)+0.0f;
const float dx32 =  + -9.70455e-05 *dy + -1.37598e-06 *y + 6.15306 *dx*dy + -5.23069e-06 *y*dy + 0.0325718 *y*dx + 0.0781408 *x*dy + 0.000435029 *x*y + -0.000184554 *lens_ipow(y, 2)*dx*dy + 0.011577 *x*lens_ipow(dy, 3) + 0.000566151 *x*y*lens_ipow(dy, 2)*lambda + 0.0103926 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.74078e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 4.91177e-05 *lens_ipow(y, 3)*lens_ipow(dx, 5) + 0.000174717 *lens_ipow(x, 3)*lens_ipow(dy, 5) + 26.258 *y*lens_ipow(dx, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx33 =  + -1.94762  + 0.406773 *lambda + -9.70455e-05 *dx + -1.09679e-06 *y + -1.74291e-06 *x + 0.30407 *lens_ipow(dy, 2) + 3.07653 *lens_ipow(dx, 2) + 0.00876049 *y*dy + -5.23069e-06 *y*dx + 3.08909e-06 *lens_ipow(y, 2) + 0.0781408 *x*dx + 0.00045602 *lens_ipow(x, 2) + -0.350068 *lens_ipow(lambda, 3) + -9.22771e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0347309 *x*dx*lens_ipow(dy, 2) + -1.87373e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0011323 *x*y*dx*dy*lambda + 0.00692841 *x*y*lens_ipow(dx, 3)*dy + -5.80261e-06 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -5.51105e-08 *lens_ipow(y, 5)*lens_ipow(dy, 3) + 0.000873587 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4) + 0.501258 *lens_ipow(lambda, 10) + -589.685 *lens_ipow(dy, 10) + 8.75266 *y*lens_ipow(dx, 6)*dy*lens_ipow(lambda, 2) + 3.04378e-05 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 6) + -0.00208453 *lens_ipow(x, 2)*y*lens_ipow(dy, 5)*lens_ipow(lambda, 2)+0.0f;
const float dx34 =  + 0.406773 *dy + 0.0029817 *y + -1.0502 *dy*lens_ipow(lambda, 2) + -0.0136125 *y*lens_ipow(lambda, 3) + 0.000566151 *x*y*dx*lens_ipow(dy, 2) + 5.01258 *dy*lens_ipow(lambda, 9) + 0.0650638 *y*lens_ipow(lambda, 9) + 8.75266 *y*lens_ipow(dx, 6)*lens_ipow(dy, 2)*lambda + 9.13134e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -0.000694844 *lens_ipow(x, 2)*y*lens_ipow(dy, 6)*lambda+0.0f;
const float dx40 =  + -1.26205e-08  + -0.000162612 *dx + 3.64093e-09 *y + -2.89943e-06 *x + -4.80876e-06 *dx*dy + -0.0045852 *lens_ipow(dx, 3) + -0.000118248 *y*dx*dy + -1.16705e-06 *lens_ipow(y, 2)*dx + -0.000276039 *x*lens_ipow(dx, 2) + -2.20199e-06 *x*y*dy + -1.60883e-08 *x*lens_ipow(y, 2) + -4.36092e-06 *lens_ipow(x, 2)*dx + -0.000395011 *x*lens_ipow(dy, 4) + -7.0237e-12 *x*lens_ipow(y, 4) + -2.64196e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -6.42042e-11 *lens_ipow(x, 5) + 0.00487056 *y*dx*lens_ipow(dy, 5) + -3.50919e-13 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + -3.08147e-10 *lens_ipow(x, 6)*dx*lens_ipow(dy, 2)+0.0f;
const float dx41 =  + 1.31616e-07  + -0.000125807 *dy + -2.36683e-06 *y + 3.64093e-09 *x + -0.00617281 *lens_ipow(dy, 3) + -0.000328618 *y*lens_ipow(dy, 2) + -6.51239e-05 *y*lens_ipow(dx, 2) + -5.05196e-06 *lens_ipow(y, 2)*dy + -0.000118248 *x*dx*dy + -2.33409e-06 *x*y*dx + -1.101e-06 *lens_ipow(x, 2)*dy + -1.60883e-08 *lens_ipow(x, 2)*y + -0.0327352 *lens_ipow(dx, 4)*dy + -7.56719e-11 *lens_ipow(y, 5) + -1.40474e-11 *lens_ipow(x, 2)*lens_ipow(y, 3) + 0.00487056 *x*dx*lens_ipow(dy, 5) + 1.03918 *lens_ipow(dx, 8)*dy + -5.84866e-13 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy+0.0f;
const float dx42 =  + -4.8233e-06  + -0.019824 *dx + -0.000162612 *x + -4.80876e-06 *x*dy + 0.306697 *dx*lens_ipow(dy, 2) + -6.51239e-05 *lens_ipow(y, 2)*dx + -0.0137556 *x*lens_ipow(dx, 2) + -0.000118248 *x*y*dy + -1.16705e-06 *x*lens_ipow(y, 2) + -0.000276039 *lens_ipow(x, 2)*dx + -1.45364e-06 *lens_ipow(x, 3) + -1.99689 *lens_ipow(dx, 5) + -0.130941 *y*lens_ipow(dx, 3)*dy + -110.297 *lens_ipow(dx, 3)*lens_ipow(dy, 4) + 0.00487056 *x*y*lens_ipow(dy, 5) + 8.31344 *y*lens_ipow(dx, 7)*dy + -1.16973e-13 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy + -4.4021e-11 *lens_ipow(x, 7)*lens_ipow(dy, 2)+0.0f;
const float dx43 =  + -0.0207068 *dy + -0.000125807 *y + -4.80876e-06 *x*dx + 0.306697 *lens_ipow(dx, 2)*dy + -0.0185184 *y*lens_ipow(dy, 2) + -0.000328618 *lens_ipow(y, 2)*dy + -1.68399e-06 *lens_ipow(y, 3) + -0.000118248 *x*y*dx + -1.101e-06 *lens_ipow(x, 2)*y + -3.24384 *lens_ipow(dy, 5) + -0.0327352 *y*lens_ipow(dx, 4) + -0.000790023 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -1.32098e-07 *lens_ipow(x, 4)*dy + -110.297 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.0243528 *x*y*dx*lens_ipow(dy, 4) + 1.03918 *y*lens_ipow(dx, 8) + -1.16973e-13 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx + -8.8042e-11 *lens_ipow(x, 7)*dx*dy+0.0f;
const float dx44 =  + 0.0569472  + -0.143937 *lens_ipow(lambda, 2) + 0.962973 *lens_ipow(lambda, 10)+0.0f;
