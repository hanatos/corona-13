//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + 2.27408e-09  + 9.40161e-08 *begin_dy + 65 *begin_dx + 2.09594e-10 *begin_y + 1 *begin_x + -4.0681e-09 *begin_y*begin_dy + 1.15011e-08 *begin_y*begin_dx + -5.29119e-11 *lens_ipow(begin_y, 2) + -2.65577e-09 *begin_x*begin_dy + -7.65603e-09 *begin_x*begin_dx + 1.33895e-10 *begin_x*begin_y + 5.85864e-11 *lens_ipow(begin_x, 2) + -1.35159e-05 *lens_ipow(begin_dx, 2)*begin_dy + -8.29487e-08 *begin_y*begin_dx*begin_dy + 1.11873e-08 *begin_y*lens_ipow(begin_dx, 2) + -2.59591e-10 *lens_ipow(begin_y, 2)*begin_dy + -1.06425e-09 *lens_ipow(begin_y, 2)*begin_dx + -2.70649e-08 *begin_x*lens_ipow(begin_dy, 2) + -1.47485e-09 *lens_ipow(begin_x, 2)*begin_dy + -2.15172e-11 *lens_ipow(begin_x, 2)*begin_y + -2.45393e-06 *begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -3.22205e-09 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -9.74692e-07 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + -1.35658e-12 *lens_ipow(begin_x, 3)*begin_y + 0.000234535 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -3.42176e-08 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + -1.07268e-09 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + 2.23548e-12 *lens_ipow(begin_x, 4)*begin_dx + 2.24018e-06 *begin_x*lens_ipow(begin_dy, 5) + 8.64462e-08 *begin_x*begin_dx*lens_ipow(begin_lambda, 4) + 1.79726e-08 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -3.66991e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 3.77071e-09 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 4) + -3.34941e-11 *lens_ipow(begin_x, 3)*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -0.114902 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 3) + 4.82923e-16 *begin_x*lens_ipow(begin_y, 7)*begin_dx*begin_dy + -4.46802e-14 *lens_ipow(begin_x, 6)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -3.07233e-05 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + 0.000638466 *begin_y*lens_ipow(begin_dx, 10) + -3.68773e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 3),
       + -1.6903e-09  + 65 *begin_dy + -2.09602e-08 *begin_dx + 1 *begin_y + -1.16464e-09 *begin_x + 5.45112e-07 *begin_dx*begin_dy + 5.12608e-09 *begin_y*begin_dy + 7.68168e-11 *lens_ipow(begin_y, 2) + -1.31964e-08 *begin_x*begin_dy + -2.16388e-09 *begin_x*begin_dx + -6.60343e-11 *begin_x*begin_y + 3.38607e-08 *begin_y*lens_ipow(begin_dx, 2) + 1.38741e-07 *begin_x*lens_ipow(begin_dy, 2) + -2.99743e-08 *begin_x*begin_dx*begin_dy + -7.11455e-08 *begin_x*lens_ipow(begin_dx, 2) + 1.22323e-09 *begin_x*begin_y*begin_dy + -1.52558e-09 *lens_ipow(begin_x, 2)*begin_dy + 9.62841e-12 *lens_ipow(begin_x, 3) + 2.15305e-08 *begin_y*begin_dx*lens_ipow(begin_lambda, 2) + 3.72342e-07 *begin_x*lens_ipow(begin_dy, 3) + 2.53751e-09 *begin_x*begin_y*lens_ipow(begin_dx, 2) + 5.08928e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -6.15124e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 1.48272e-05 *lens_ipow(begin_dy, 5) + 8.65769e-05 *begin_dx*lens_ipow(begin_dy, 4) + 1.45594e-06 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + -4.58885e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -4.88226e-14 *lens_ipow(begin_x, 4)*begin_y + -6.54416e-06 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -1.98809e-08 *begin_x*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -2.86538e-13 *begin_x*lens_ipow(begin_y, 4)*begin_dy + -0.000279357 *lens_ipow(begin_dx, 7) + 2.24792e-08 *lens_ipow(begin_x, 2)*begin_y*begin_dx*lens_ipow(begin_dy, 3) + -0.000310699 *lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 2) + 6.35914e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + -1.24787e-14 *lens_ipow(begin_x, 7)*lens_ipow(begin_dy, 2) + -0.124796 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 3) + -3.89281e-09 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + -0.000459617 *begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 7) + -4.09566e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 65  + 1.15011e-08 *begin_y + -7.65603e-09 *begin_x + -2.70318e-05 *begin_dx*begin_dy + -8.29487e-08 *begin_y*begin_dy + 2.23746e-08 *begin_y*begin_dx + -1.06425e-09 *lens_ipow(begin_y, 2) + -2.45393e-06 *begin_dy*lens_ipow(begin_lambda, 2) + -6.44409e-09 *lens_ipow(begin_y, 2)*begin_dx + -1.94938e-06 *begin_x*begin_dx*begin_dy + 0.000469069 *begin_dx*lens_ipow(begin_dy, 3) + -3.42176e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -1.07268e-09 *lens_ipow(begin_x, 3)*begin_dy + 2.23548e-12 *lens_ipow(begin_x, 4) + 8.64462e-08 *begin_x*lens_ipow(begin_lambda, 4) + 3.59452e-08 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -3.34941e-11 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_lambda, 2) + -0.804311 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 3) + 4.82923e-16 *begin_x*lens_ipow(begin_y, 7)*begin_dy + -4.46802e-14 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dy, 2) + -0.000122893 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 6) + 0.00638466 *begin_y*lens_ipow(begin_dx, 9) + -1.10632e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3)+0.0f;
    dx1_domega0[0][1] =  + 9.40161e-08  + -4.0681e-09 *begin_y + -2.65577e-09 *begin_x + -1.35159e-05 *lens_ipow(begin_dx, 2) + -8.29487e-08 *begin_y*begin_dx + -2.59591e-10 *lens_ipow(begin_y, 2) + -5.41298e-08 *begin_x*begin_dy + -1.47485e-09 *lens_ipow(begin_x, 2) + -2.45393e-06 *begin_dx*lens_ipow(begin_lambda, 2) + -9.74692e-07 *begin_x*lens_ipow(begin_dx, 2) + 0.000703604 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -6.84352e-08 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -1.07268e-09 *lens_ipow(begin_x, 3)*begin_dx + 1.12009e-05 *begin_x*lens_ipow(begin_dy, 4) + -1.46796e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 1.50828e-08 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 3) + -0.344705 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2) + 4.82923e-16 *begin_x*lens_ipow(begin_y, 7)*begin_dx + -8.93603e-14 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy + -3.68773e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 3)+0.0f;
    dx1_domega0[1][0] =  + -2.09602e-08  + 5.45112e-07 *begin_dy + -2.16388e-09 *begin_x + 6.77214e-08 *begin_y*begin_dx + -2.99743e-08 *begin_x*begin_dy + -1.42291e-07 *begin_x*begin_dx + 2.15305e-08 *begin_y*lens_ipow(begin_lambda, 2) + 5.07502e-09 *begin_x*begin_y*begin_dx + 8.65769e-05 *lens_ipow(begin_dy, 4) + 4.36781e-06 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -4.58885e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -1.96325e-05 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -1.98809e-08 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 2) + -0.0019555 *lens_ipow(begin_dx, 6) + 2.24792e-08 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 3) + 6.35914e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -0.873574 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 3) + -0.000459617 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 7) + -2.04783e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3)+0.0f;
    dx1_domega0[1][1] =  + 65  + 5.45112e-07 *begin_dx + 5.12608e-09 *begin_y + -1.31964e-08 *begin_x + 2.77483e-07 *begin_x*begin_dy + -2.99743e-08 *begin_x*begin_dx + 1.22323e-09 *begin_x*begin_y + -1.52558e-09 *lens_ipow(begin_x, 2) + 1.11703e-06 *begin_x*lens_ipow(begin_dy, 2) + 1.01786e-08 *lens_ipow(begin_x, 2)*begin_dy + 7.41358e-05 *lens_ipow(begin_dy, 4) + 0.000346308 *begin_dx*lens_ipow(begin_dy, 3) + 1.45594e-06 *begin_y*lens_ipow(begin_dx, 3) + -1.30883e-05 *begin_x*lens_ipow(begin_dx, 3)*begin_dy + -1.98809e-08 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -2.86538e-13 *begin_x*lens_ipow(begin_y, 4) + 6.74377e-08 *lens_ipow(begin_x, 2)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.0018642 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 2) + 1.90774e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + -2.49574e-14 *lens_ipow(begin_x, 7)*begin_dy + -0.374389 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2) + -7.78562e-09 *begin_x*lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 5) + -0.00137885 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 7) + -1.2287e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + -3.21832e-05  + 118.633 *begin_dx + 1.32559e-06 *begin_y + 0.9962 *begin_x + 0.00362093 *lens_ipow(begin_dx, 2) + 2.40896e-07 *lens_ipow(begin_x, 2) + -67.2007 *begin_dx*lens_ipow(begin_dy, 2) + -67.1949 *lens_ipow(begin_dx, 3) + -1.1112 *begin_y*begin_dx*begin_dy + -0.00467654 *lens_ipow(begin_y, 2)*begin_dx + 0.0322325 *begin_x*lens_ipow(begin_dy, 2) + -1.0814 *begin_x*lens_ipow(begin_dx, 2) + 0.000556925 *begin_x*begin_y*begin_dy + 2.25569e-06 *begin_x*lens_ipow(begin_y, 2) + -0.00421962 *lens_ipow(begin_x, 2)*begin_dx + 2.16858e-06 *lens_ipow(begin_x, 3) + 0.674128 *begin_dx*lens_ipow(begin_lambda, 3) + -0.0247845 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.00750772 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.00414195 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.000262894 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4) + 132.116 *begin_dx*lens_ipow(begin_dy, 6) + 525.815 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + -2.50698e-07 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + -0.269658 *begin_x*lens_ipow(begin_dy, 6) + -9.72626e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + -2.11742 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + -2.81907 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 5) + 3530.24 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2) + 884.241 *lens_ipow(begin_dx, 9) + -3.84102e-12 *lens_ipow(begin_y, 8)*begin_dx + 0.0182674 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -0.0001424 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + 6.01294e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 2.09613e-06 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 6.42232e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dx + 2.22204e-09 *lens_ipow(begin_x, 6)*begin_dx*lens_ipow(begin_lambda, 2) + -3.05767 *begin_dx*lens_ipow(begin_lambda, 10) + -4.06736 *begin_x*begin_y*lens_ipow(begin_dx, 8)*begin_dy + 3.89545e-11 *lens_ipow(begin_x, 8)*begin_dx*lens_ipow(begin_dy, 2);
    out[1] =  + -1.81258e-06  + 118.644 *begin_dy + 0.996236 *begin_y + 2.46607e-05 *begin_y*begin_dy + -67.4346 *lens_ipow(begin_dy, 3) + -67.5287 *lens_ipow(begin_dx, 2)*begin_dy + -1.08614 *begin_y*lens_ipow(begin_dy, 2) + 0.0307602 *begin_y*lens_ipow(begin_dx, 2) + -0.00428795 *lens_ipow(begin_y, 2)*begin_dy + 2.14138e-06 *lens_ipow(begin_y, 3) + -1.11904 *begin_x*begin_dx*begin_dy + 0.00053884 *begin_x*begin_y*begin_dx + -0.00474617 *lens_ipow(begin_x, 2)*begin_dy + 2.01435e-06 *lens_ipow(begin_x, 2)*begin_y + 0.654417 *begin_dy*lens_ipow(begin_lambda, 3) + -0.00876924 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00726299 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 1.17768 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 0.000216821 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 594.394 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + 141.733 *lens_ipow(begin_dx, 6)*begin_dy + -0.000103565 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + -1.21216e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3) + 0.0256555 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + 6.64829e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + -1.66957e-07 *lens_ipow(begin_x, 5)*begin_dx*begin_dy + -2.81716 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 5) + -2.2213 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 5) + -17.1086 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3) + 868.785 *lens_ipow(begin_dy, 9) + 5565.29 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 7) + 3.95579e-12 *lens_ipow(begin_y, 8)*begin_dy + -0.000165013 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + 7.07569e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -1.57589e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 3) + 2.13283e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -3.00515 *begin_dy*lens_ipow(begin_lambda, 10) + -15.2327 *begin_x*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6) + 0.168378 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 7) + -0.00298098 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2);
    out[2] =  + -1.45005e-06  + -3.55572e-05 *begin_dy + -1.88185 *begin_dx + 4.27394e-07 *begin_y + -0.0236202 *begin_x + 0.203361 *begin_dx*begin_lambda + 1.3446e-06 *begin_y*begin_dx + 2.63371e-08 *lens_ipow(begin_y, 2) + 2.75175e-06 *begin_x*begin_dy + -3.1449e-08 *lens_ipow(begin_x, 2) + -2.96886 *begin_dx*lens_ipow(begin_dy, 2) + 0.0565876 *lens_ipow(begin_dx, 3) + -1.88681e-05 *begin_y*lens_ipow(begin_dy, 2) + -0.0527617 *begin_y*begin_dx*begin_dy + -0.000224473 *lens_ipow(begin_y, 2)*begin_dx + -0.0352543 *begin_x*lens_ipow(begin_dy, 2) + -2.46976e-05 *begin_x*begin_dx*begin_dy + 0.003401 *begin_x*lens_ipow(begin_dx, 2) + -0.000683332 *begin_x*begin_y*begin_dy + -2.89675e-06 *begin_x*lens_ipow(begin_y, 2) + -4.65492e-06 *lens_ipow(begin_x, 2)*begin_dx + 2.8794e-09 *lens_ipow(begin_x, 2)*begin_y + 1.58248e-08 *lens_ipow(begin_x, 3) + -0.0565389 *begin_dx*lens_ipow(begin_lambda, 3) + -4.61799e-05 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + 2.57858e-10 *begin_x*lens_ipow(begin_y, 3) + 0.0580073 *lens_ipow(begin_dx, 5) + 0.000532303 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -8.57374e-09 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + 0.00326159 *begin_x*lens_ipow(begin_lambda, 4) + -4.29379e-07 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.407905 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + -0.00347434 *begin_y*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + -2.98782e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy*begin_lambda + 0.0768391 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 0.000141149 *begin_x*begin_y*lens_ipow(begin_dx, 7) + -0.380747 *begin_dx*lens_ipow(begin_lambda, 10) + 1.58789 *begin_y*lens_ipow(begin_dx, 9)*begin_dy + -0.0157669 *begin_x*lens_ipow(begin_lambda, 10) + -0.000749201 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 6);
    out[3] =  + -3.35079e-07  + -1.94762 *begin_dy + -0.0247 *begin_y + -1.25201e-08 *begin_x + 0.406773 *begin_dy*begin_lambda + -9.70455e-05 *begin_dx*begin_dy + 0.0029817 *begin_y*begin_lambda + -1.09679e-06 *begin_y*begin_dy + -1.37598e-06 *begin_y*begin_dx + -1.74291e-06 *begin_x*begin_dy + -3.12732e-08 *begin_x*begin_y + 0.101357 *lens_ipow(begin_dy, 3) + 3.07653 *lens_ipow(begin_dx, 2)*begin_dy + 0.00438024 *begin_y*lens_ipow(begin_dy, 2) + -5.23069e-06 *begin_y*begin_dx*begin_dy + 0.0162859 *begin_y*lens_ipow(begin_dx, 2) + 3.08909e-06 *lens_ipow(begin_y, 2)*begin_dy + 1.58416e-08 *lens_ipow(begin_y, 3) + 0.0781408 *begin_x*begin_dx*begin_dy + 0.000435029 *begin_x*begin_y*begin_dx + 4.04503e-10 *begin_x*lens_ipow(begin_y, 2) + 0.00045602 *lens_ipow(begin_x, 2)*begin_dy + 2.88722e-06 *lens_ipow(begin_x, 2)*begin_y + -0.350068 *begin_dy*lens_ipow(begin_lambda, 3) + -0.00340313 *begin_y*lens_ipow(begin_lambda, 4) + -9.22771e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.011577 *begin_x*begin_dx*lens_ipow(begin_dy, 3) + -1.87373e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + 0.000566151 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.0034642 *begin_x*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -5.80261e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*begin_dy + 8.18628e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 6) + -1.37776e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 4) + 0.000174717 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 5) + 0.501258 *begin_dy*lens_ipow(begin_lambda, 10) + -53.6077 *lens_ipow(begin_dy, 11) + 0.00650638 *begin_y*lens_ipow(begin_lambda, 10) + 4.37633 *begin_y*lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 1.52189e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -0.000347422 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 2);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0236202  + 2.75175e-06 *begin_dy + -6.2898e-08 *begin_x + -0.0352543 *lens_ipow(begin_dy, 2) + -2.46976e-05 *begin_dx*begin_dy + 0.003401 *lens_ipow(begin_dx, 2) + -0.000683332 *begin_y*begin_dy + -2.89675e-06 *lens_ipow(begin_y, 2) + -9.30983e-06 *begin_x*begin_dx + 5.7588e-09 *begin_x*begin_y + 4.74745e-08 *lens_ipow(begin_x, 2) + 2.57858e-10 *lens_ipow(begin_y, 3) + 0.00326159 *lens_ipow(begin_lambda, 4) + -4.29379e-07 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -5.97565e-06 *begin_x*begin_y*begin_dx*begin_dy*begin_lambda + 0.0768391 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 0.000141149 *begin_y*lens_ipow(begin_dx, 7) + -0.0157669 *lens_ipow(begin_lambda, 10) + -0.000749201 *begin_y*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 6)+0.0f;
    domega2_dx0[0][1] =  + 4.27394e-07  + 1.3446e-06 *begin_dx + 5.26743e-08 *begin_y + -1.88681e-05 *lens_ipow(begin_dy, 2) + -0.0527617 *begin_dx*begin_dy + -0.000448947 *begin_y*begin_dx + -0.000683332 *begin_x*begin_dy + -5.7935e-06 *begin_x*begin_y + 2.8794e-09 *lens_ipow(begin_x, 2) + -4.61799e-05 *begin_dx*lens_ipow(begin_dy, 2) + 7.73573e-10 *begin_x*lens_ipow(begin_y, 2) + 0.000532303 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -2.57212e-08 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -8.58759e-07 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -0.00347434 *begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + -2.98782e-06 *lens_ipow(begin_x, 2)*begin_dx*begin_dy*begin_lambda + 0.000141149 *begin_x*lens_ipow(begin_dx, 7) + 1.58789 *lens_ipow(begin_dx, 9)*begin_dy + -0.000749201 *begin_x*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 6)+0.0f;
    domega2_dx0[1][0] =  + -1.25201e-08  + -1.74291e-06 *begin_dy + -3.12732e-08 *begin_y + 0.0781408 *begin_dx*begin_dy + 0.000435029 *begin_y*begin_dx + 4.04503e-10 *lens_ipow(begin_y, 2) + 0.000912039 *begin_x*begin_dy + 5.77444e-06 *begin_x*begin_y + 0.011577 *begin_dx*lens_ipow(begin_dy, 3) + -3.74747e-08 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 0.000566151 *begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.0034642 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -1.74078e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*begin_dy + 0.000524152 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 5) + 3.04378e-05 *begin_x*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -0.000694844 *begin_x*begin_y*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 2)+0.0f;
    domega2_dx0[1][1] =  + -0.0247  + 0.0029817 *begin_lambda + -1.09679e-06 *begin_dy + -1.37598e-06 *begin_dx + -3.12732e-08 *begin_x + 0.00438024 *lens_ipow(begin_dy, 2) + -5.23069e-06 *begin_dx*begin_dy + 0.0162859 *lens_ipow(begin_dx, 2) + 6.17817e-06 *begin_y*begin_dy + 4.75249e-08 *lens_ipow(begin_y, 2) + 0.000435029 *begin_x*begin_dx + 8.09005e-10 *begin_x*begin_y + 2.88722e-06 *lens_ipow(begin_x, 2) + -0.00340313 *lens_ipow(begin_lambda, 4) + -0.000184554 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -3.74747e-08 *lens_ipow(begin_x, 2)*begin_y*begin_dy + 0.000566151 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.0034642 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 2.45588e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -6.88881e-08 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 4) + 0.00650638 *lens_ipow(begin_lambda, 10) + 4.37633 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 1.52189e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -0.000347422 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 2)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.897754  + 0.0569472 *begin_lambda + -4.8233e-06 *begin_dx + 1.31616e-07 *begin_y + -1.26205e-08 *begin_x + -0.0103534 *lens_ipow(begin_dy, 2) + -0.00991199 *lens_ipow(begin_dx, 2) + -0.000125807 *begin_y*begin_dy + -1.18342e-06 *lens_ipow(begin_y, 2) + -0.000162612 *begin_x*begin_dx + 3.64093e-09 *begin_x*begin_y + -1.44971e-06 *lens_ipow(begin_x, 2) + -0.0479791 *lens_ipow(begin_lambda, 3) + -4.80876e-06 *begin_x*begin_dx*begin_dy + 0.153349 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.00617281 *begin_y*lens_ipow(begin_dy, 3) + -0.000164309 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -3.2562e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -1.68399e-06 *lens_ipow(begin_y, 3)*begin_dy + -0.0045852 *begin_x*lens_ipow(begin_dx, 3) + -0.000118248 *begin_x*begin_y*begin_dx*begin_dy + -1.16705e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.000138019 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -1.101e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -8.04415e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -1.45364e-06 *lens_ipow(begin_x, 3)*begin_dx + -0.54064 *lens_ipow(begin_dy, 6) + -0.332815 *lens_ipow(begin_dx, 6) + -0.0327352 *begin_y*lens_ipow(begin_dx, 4)*begin_dy + -1.2612e-11 *lens_ipow(begin_y, 6) + -0.000197506 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + -3.51185e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -6.6049e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 2) + -1.07007e-11 *lens_ipow(begin_x, 6) + -27.5742 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 4) + 0.00487056 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 5) + 1.03918 *begin_y*lens_ipow(begin_dx, 8)*begin_dy + -1.16973e-13 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dx*begin_dy + -4.4021e-11 *lens_ipow(begin_x, 7)*begin_dx*lens_ipow(begin_dy, 2) + 0.087543 *lens_ipow(begin_lambda, 11);
else
  out[4] = 0.0f;
