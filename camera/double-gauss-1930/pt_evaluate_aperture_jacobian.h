const float dx00 =  + 0.814319  + 2.54411e-07 *y + -0.486129 *lens_ipow(dy, 2) + -1.37078 *lens_ipow(dx, 2) + -0.00533204 *y*dy + -8.17454e-06 *lens_ipow(y, 2) + -1.88325e-06 *x*dy + -0.0150434 *x*dx + -2.37577e-05 *lens_ipow(x, 2) + 0.0282357 *lens_ipow(lambda, 4) + -0.0084271 *x*dx*lens_ipow(dy, 2) + -0.00770431 *x*lens_ipow(dx, 3) + 2.83681 *lens_ipow(dy, 6) + -0.0012199 *x*y*lens_ipow(dx, 3)*dy + -0.0217868 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -0.00951154 *lens_ipow(x, 2)*lens_ipow(dy, 6) + 5.58546e-12 *lens_ipow(x, 7)*dx + -0.137591 *lens_ipow(lambda, 10) + -2.43519e-13 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(lambda, 2)+0.0f;
const float dx01 =  + 4.23662e-07  + 3.15095e-05 *dx + 2.54411e-07 *x + -0.887354 *dx*dy + -0.00459433 *y*dx + -0.00533204 *x*dy + -1.63491e-05 *x*y + 0.159948 *y*dx*lens_ipow(dy, 4) + 7.49288e-07 *lens_ipow(y, 4)*dx*dy + -0.00060995 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 9.39835e-09 *lens_ipow(y, 5)*dx*lambda + -0.0172227 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 4) + -0.000411711 *lens_ipow(y, 3)*lens_ipow(dx, 5) + -1.94815e-13 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx02 =  + 81.4095  + 0.00524136 *dx + 3.15095e-05 *y + -68.2089 *lens_ipow(dy, 2) + -205.837 *lens_ipow(dx, 2) + -0.887354 *y*dy + -0.00229716 *lens_ipow(y, 2) + -2.74156 *x*dx + -0.00752169 *lens_ipow(x, 2) + 2.02778 *lens_ipow(lambda, 3) + 100.276 *lens_ipow(dx, 4) + -0.00421355 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.0115565 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 181.368 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -13.015 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.0799742 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 1.49858e-07 *lens_ipow(y, 5)*dy + -0.00182985 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 1.56639e-09 *lens_ipow(y, 6)*lambda + -847.054 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -0.0258341 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.000514639 *lens_ipow(y, 4)*lens_ipow(dx, 4) + -0.0108934 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 6.98183e-13 *lens_ipow(x, 8) + -10.7066 *lens_ipow(lambda, 10)+0.0f;
const float dx03 =  + 0.000704671 *dy + -136.418 *dx*dy + -0.887354 *y*dx + -0.972259 *x*dy + -0.00533204 *x*y + -9.41626e-07 *lens_ipow(x, 2) + -0.0084271 *lens_ipow(x, 2)*dx*dy + 120.912 *lens_ipow(dx, 3)*dy*lambda + -6.50748 *lens_ipow(dx, 4)*dy + 0.319897 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 1.49858e-07 *lens_ipow(y, 5)*dx + 17.0209 *x*lens_ipow(dy, 5) + -0.00060995 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -677.643 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + -0.0217868 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 4) + -0.0190231 *lens_ipow(x, 3)*lens_ipow(dy, 5)+0.0f;
const float dx04 =  + 6.08334 *dx*lens_ipow(lambda, 2) + 0.112943 *x*lens_ipow(lambda, 3) + 60.4558 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 1.56639e-09 *lens_ipow(y, 6)*dx + -0.0344454 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -0.0435736 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -107.066 *dx*lens_ipow(lambda, 9) + -1.37591 *x*lens_ipow(lambda, 9) + -9.74077e-14 *lens_ipow(x, 5)*lens_ipow(y, 4)*lambda+0.0f;
const float dx10 =  + 1.10483e-07 *y + -0.881645 *dx*dy + -0.00534004 *y*dx + -0.00454091 *x*dy + -1.65174e-05 *x*y + 0.00585902 *y*dx*lens_ipow(dy, 2) + -0.00308811 *x*lens_ipow(dx, 2)*dy + -0.117032 *x*lens_ipow(dy, 5) + 8.39819e-09 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.76463e-10 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -1.56634e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 4)+0.0f;
const float dx11 =  + 0.814303  + 3.0924e-05 *dy + 8.17266e-07 *y + 1.10483e-07 *x + -1.36518 *lens_ipow(dy, 2) + -0.483232 *lens_ipow(dx, 2) + -0.0150583 *y*dy + -2.42698e-05 *lens_ipow(y, 2) + -0.00534004 *x*dx + -8.25868e-06 *lens_ipow(x, 2) + 0.000462666 *lens_ipow(dx, 3) + 0.0283783 *lens_ipow(lambda, 4) + -0.00407911 *y*lens_ipow(dy, 3) + -0.0143526 *y*lens_ipow(dx, 2)*dy + 0.00585902 *x*dx*lens_ipow(dy, 2) + 5.5988e-09 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -1.38232e-10 *lens_ipow(x, 4)*y*dy + 35.048 *lens_ipow(dx, 8) + -2.65881 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + -1.30707e-09 *lens_ipow(y, 6)*lens_ipow(dx, 2) + -8.42165e-13 *lens_ipow(y, 7)*dy + -0.138545 *lens_ipow(lambda, 10) + -1.17475e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 4)+0.0f;
const float dx12 =  + 2.23496e-05  + -135.025 *dx*dy + -0.966464 *y*dx + -0.881645 *x*dy + -0.00534004 *x*y + -0.0492249 *dx*lens_ipow(dy, 2) + 0.001388 *y*lens_ipow(dx, 2) + -0.0143526 *lens_ipow(y, 2)*dx*dy + 0.00585902 *x*y*lens_ipow(dy, 2) + -0.00308811 *lens_ipow(x, 2)*dx*dy + 986.362 *dx*lens_ipow(dy, 5) + 1495.27 *lens_ipow(dx, 5)*dy + 5.5988e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -2.52568 *dx*dy*lens_ipow(lambda, 5) + 2148.87 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + 280.384 *y*lens_ipow(dx, 7) + -5.31761 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -3.73449e-10 *lens_ipow(y, 7)*dx + -1.56634e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 3)+0.0f;
const float dx13 =  + 81.4074  + 3.0924e-05 *y + -205.105 *lens_ipow(dy, 2) + -67.5127 *lens_ipow(dx, 2) + -2.73037 *y*dy + -0.00752915 *lens_ipow(y, 2) + -0.881645 *x*dx + -0.00227046 *lens_ipow(x, 2) + 2.03968 *lens_ipow(lambda, 3) + -0.0492249 *lens_ipow(dx, 2)*dy + 80.4284 *lens_ipow(dy, 4) + -0.00611867 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00717632 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.011718 *x*y*dx*dy + -0.00154405 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 2465.9 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 249.211 *lens_ipow(dx, 6) + -0.292581 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -6.91159e-11 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.26284 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + 1611.65 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + -3.98821 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -1.05271e-13 *lens_ipow(y, 8) + -10.8571 *lens_ipow(lambda, 10)+0.0f;
const float dx14 =  + 6.11904 *dy*lens_ipow(lambda, 2) + 0.113513 *y*lens_ipow(lambda, 3) + -6.31419 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + 537.217 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + -108.571 *dy*lens_ipow(lambda, 9) + -1.38545 *y*lens_ipow(lambda, 9)+0.0f;
const float dx20 =  + -0.00628944  + 3.26887e-06 *dx + 9.31044e-09 *y + -0.0112114 *lens_ipow(dy, 2) + -0.0350522 *lens_ipow(dx, 2) + -0.000293299 *y*dy + -2.04779e-06 *lens_ipow(y, 2) + -0.000932483 *x*dx + 4.76349e-09 *x*y + -6.37689e-06 *lens_ipow(x, 2) + 6.25036e-10 *lens_ipow(x, 3) + 0.000638611 *lens_ipow(lambda, 4) + -0.000258133 *y*lens_ipow(dx, 2)*dy + 0.0375048 *lens_ipow(dy, 6)*lambda + 4.53408e-13 *x*lens_ipow(y, 6)*dx + -8.07754e-05 *lens_ipow(x, 3)*lens_ipow(dx, 5) + 5.19057e-12 *lens_ipow(x, 7)*dx + 6.62882e-14 *lens_ipow(x, 8)*lambda + -0.00265068 *lens_ipow(lambda, 10) + 5.13482e-06 *lens_ipow(y, 4)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.000493222 *lens_ipow(x, 2)*y*lens_ipow(dx, 6)*dy + -7.48313e-09 *lens_ipow(x, 4)*lens_ipow(lambda, 6)+0.0f;
const float dx21 =  + -1.92859e-07  + 9.31044e-09 *x + -0.0221786 *dx*dy + -0.000304545 *y*dx + -0.000293299 *x*dy + -4.09559e-06 *x*y + 2.38175e-09 *lens_ipow(x, 2) + 0.000158793 *lens_ipow(dx, 2)*dy + -0.000258133 *x*lens_ipow(dx, 2)*dy + 0.00548801 *y*lens_ipow(dx, 5) + 1.36022e-12 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx + 2.05393e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.000164407 *lens_ipow(x, 3)*lens_ipow(dx, 6)*dy+0.0f;
const float dx22 =  + 0.597373  + 3.26887e-06 *x + 0.00857568 *lens_ipow(lambda, 2) + -0.56158 *lens_ipow(dy, 2) + -1.859 *lens_ipow(dx, 2) + -0.0221786 *y*dy + -0.000152272 *lens_ipow(y, 2) + -0.0701045 *x*dx + -0.000466241 *lens_ipow(x, 2) + 0.000317587 *y*dx*dy + -0.000516267 *x*y*dx*dy + 0.182915 *dx*lens_ipow(dy, 3)*lambda + 107.23 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.01372 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.00567563 *lens_ipow(lambda, 7) + 37.928 *lens_ipow(dx, 5)*lens_ipow(dy, 2) + 2.26704e-13 *lens_ipow(x, 2)*lens_ipow(y, 6) + -0.000100969 *lens_ipow(x, 4)*lens_ipow(dx, 4) + 6.48821e-13 *lens_ipow(x, 8) + 46335.4 *lens_ipow(dx, 4)*lens_ipow(dy, 6) + 39564.2 *lens_ipow(dx, 10) + 2.05393e-05 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000986444 *lens_ipow(x, 3)*y*lens_ipow(dx, 5)*dy+0.0f;
const float dx23 =  + -1.31337e-05  + -1.12316 *dx*dy + -0.0221786 *y*dx + -0.0224229 *x*dy + -0.000293299 *x*y + 0.000158793 *y*lens_ipow(dx, 2) + -0.000258133 *x*y*lens_ipow(dx, 2) + 0.274373 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 42.8919 *lens_ipow(dx, 5)*dy + 12.6427 *lens_ipow(dx, 6)*dy + 0.225029 *x*lens_ipow(dy, 5)*lambda + 55602.5 *lens_ipow(dx, 5)*lens_ipow(dy, 5) + 1.02696e-05 *x*lens_ipow(y, 4)*lens_ipow(dx, 4)*dy + -0.000164407 *lens_ipow(x, 3)*y*lens_ipow(dx, 6)+0.0f;
const float dx24 =  + 0.0171514 *dx*lambda + 0.00255444 *x*lens_ipow(lambda, 3) + 0.0914576 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.0397294 *dx*lens_ipow(lambda, 6) + 0.0375048 *x*lens_ipow(dy, 6) + 7.36535e-15 *lens_ipow(x, 9) + -0.0265068 *x*lens_ipow(lambda, 9) + -8.97975e-09 *lens_ipow(x, 5)*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + -1.75349e-06 *dx + -6.25914e-09 *y + -0.0224882 *dx*dy + -0.00029801 *y*dx + -0.000309238 *x*dy + -4.14897e-06 *x*y + -1.60673e-06 *x*lens_ipow(dy, 2) + 3.11332e-06 *x*dx*dy + -0.000228904 *y*dx*lens_ipow(dy, 2) + 1.82083e-08 *lens_ipow(y, 3)*dx + 0.000181505 *x*lens_ipow(dy, 3) + 0.00276614 *dx*dy*lens_ipow(lambda, 8) + 1.13743 *x*lens_ipow(dy, 9) + 0.151731 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 6) + 1.44409e-17 *x*lens_ipow(y, 9) + -5.83711e-13 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const float dx31 =  + -0.00629737  + -8.45536e-07 *dy + -6.25914e-09 *x + -0.034625 *lens_ipow(dy, 2) + -0.0112229 *lens_ipow(dx, 2) + -0.000914077 *y*dy + -6.21453e-06 *lens_ipow(y, 2) + -0.00029801 *x*dx + -2.07448e-06 *lens_ipow(x, 2) + 0.000356516 *lens_ipow(lambda, 3) + 5.1793e-08 *lens_ipow(y, 2)*dx + -0.000228904 *x*dx*lens_ipow(dy, 2) + 5.46248e-08 *x*lens_ipow(y, 2)*dx + -6.26811e-05 *lens_ipow(y, 3)*lens_ipow(dy, 5) + -0.00124699 *lens_ipow(lambda, 10) + 7.5796e-15 *lens_ipow(y, 9)*dy + 0.0758657 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 6) + 6.49841e-17 *lens_ipow(x, 2)*lens_ipow(y, 8) + -2.91856e-13 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const float dx32 =  + 5.26237e-06  + -1.75349e-06 *x + -1.13204 *dx*dy + -0.0224458 *y*dx + -0.0224882 *x*dy + -0.00029801 *x*y + 1.72643e-08 *lens_ipow(y, 3) + 1.55666e-06 *lens_ipow(x, 2)*dy + -0.000228904 *x*y*lens_ipow(dy, 2) + 1.82083e-08 *x*lens_ipow(y, 3) + 105412 *lens_ipow(dx, 3)*lens_ipow(dy, 7) + 0.00276614 *x*dy*lens_ipow(lambda, 8) + 0.151731 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 6)+0.0f;
const float dx33 =  + 0.598784  + -8.45536e-07 *y + -1.81081 *lens_ipow(dy, 2) + -0.56602 *lens_ipow(dx, 2) + -0.0692501 *y*dy + -0.000457038 *lens_ipow(y, 2) + -0.0224882 *x*dx + -0.000154619 *lens_ipow(x, 2) + -1.60673e-06 *lens_ipow(x, 2)*dy + 1.55666e-06 *lens_ipow(x, 2)*dx + -0.000457808 *x*y*dx*dy + 0.000272258 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0219255 *lens_ipow(lambda, 6) + -7.83513e-05 *lens_ipow(y, 4)*lens_ipow(dy, 4) + 31215 *lens_ipow(dy, 10) + 184471 *lens_ipow(dx, 4)*lens_ipow(dy, 6) + 7.5796e-16 *lens_ipow(y, 10) + 0.00276614 *x*dx*lens_ipow(lambda, 8) + 5.11844 *lens_ipow(x, 2)*lens_ipow(dy, 8) + 0.455194 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 5) + -1.9457e-13 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy+0.0f;
const float dx34 =  + 0.00106955 *y*lens_ipow(lambda, 2) + 0.131553 *dy*lens_ipow(lambda, 5) + -0.0124699 *y*lens_ipow(lambda, 9) + 0.0221291 *x*dx*dy*lens_ipow(lambda, 7)+0.0f;
const float dx40 =  + 4.09132e-07  + -0.0059644 *dx + -5.02155e-05 *x + -0.0549131 *dx*lens_ipow(dy, 2) + -0.0255735 *lens_ipow(dx, 3) + 8.15093e-06 *x*y*dy + 4.25253e-07 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + 4.40948e-10 *x*lens_ipow(y, 4) + 1.06473e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 1.17715e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 1.82473e-11 *lens_ipow(x, 5) + -0.0011513 *x*y*lens_ipow(dx, 2)*dy*lambda + 0.000712638 *lens_ipow(y, 3)*dx*lens_ipow(dy, 5) + -0.100161 *x*y*lens_ipow(dx, 6)*dy + 4.87336e-06 *lens_ipow(x, 4)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 8.89384e-13 *x*lens_ipow(y, 7)*dy*lambda + 6.38883e-12 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx41 =  + 6.02479e-07  + -0.00640889 *dy + -5.05919e-05 *y + 2.24481e-06 *y*dx + 0.000347983 *y*lens_ipow(dx, 2) + 4.07547e-06 *lens_ipow(x, 2)*dy + -0.000297962 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -3.27768e-10 *lens_ipow(y, 5) + 4.25253e-07 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + 8.81896e-10 *lens_ipow(x, 2)*lens_ipow(y, 3) + 7.09821e-08 *lens_ipow(x, 3)*y*dx + -0.00057565 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy*lambda + 0.00213792 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 5) + -0.0500807 *lens_ipow(x, 2)*lens_ipow(dx, 6)*dy + 0.136966 *y*lens_ipow(dy, 6)*lens_ipow(lambda, 3) + -0.55911 *y*lens_ipow(dx, 6)*lens_ipow(lambda, 3) + -0.000313749 *lens_ipow(y, 3)*lens_ipow(dx, 7) + 3.11284e-12 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy*lambda + 2.12961e-12 *lens_ipow(x, 6)*y*lens_ipow(lambda, 3)+0.0f;
const float dx42 =  + -0.845677 *dx + -0.0059644 *x + -0.00929363 *dx*dy + 1.12241e-06 *lens_ipow(y, 2) + 0.000347983 *lens_ipow(y, 2)*dx + -0.0549131 *x*lens_ipow(dy, 2) + -0.0767206 *x*lens_ipow(dx, 2) + -169.953 *dx*lens_ipow(dy, 4) + -481.306 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 3.54911e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + 5.88576e-07 *lens_ipow(x, 4)*dx + -0.0011513 *lens_ipow(x, 2)*y*dx*dy*lambda + -3185.1 *lens_ipow(dx, 7) + -4.4383 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 0.000712638 *x*lens_ipow(y, 3)*lens_ipow(dy, 5) + -0.300484 *lens_ipow(x, 2)*y*lens_ipow(dx, 5)*dy + 9.74672e-07 *lens_ipow(x, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.67733 *lens_ipow(y, 2)*lens_ipow(dx, 5)*lens_ipow(lambda, 3) + -0.000549061 *lens_ipow(y, 4)*lens_ipow(dx, 6)+0.0f;
const float dx43 =  + 0.000113846  + -0.828926 *dy + -0.00640889 *y + -0.00464682 *lens_ipow(dx, 2) + -0.109826 *x*dx*dy + 4.07547e-06 *lens_ipow(x, 2)*y + -339.907 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -240.653 *lens_ipow(dx, 4)*dy + -0.000297962 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 4.25253e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -0.00057565 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lambda + -3804.02 *lens_ipow(dy, 7) + -4.4383 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 5) + 0.00356319 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 4) + -0.0500807 *lens_ipow(x, 2)*y*lens_ipow(dx, 6) + 1.94934e-06 *lens_ipow(x, 5)*dx*dy*lens_ipow(lambda, 2) + 0.410897 *lens_ipow(y, 2)*lens_ipow(dy, 5)*lens_ipow(lambda, 3) + 4.44692e-13 *lens_ipow(x, 2)*lens_ipow(y, 7)*lambda+0.0f;
const float dx44 =  + 0.0912116  + -0.229306 *lens_ipow(lambda, 2) + -0.00057565 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -11.0958 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 1.94934e-06 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2)*lambda + 1.51549 *lens_ipow(lambda, 10) + 0.205449 *lens_ipow(y, 2)*lens_ipow(dy, 6)*lens_ipow(lambda, 2) + -0.838665 *lens_ipow(y, 2)*lens_ipow(dx, 6)*lens_ipow(lambda, 2) + 4.44692e-13 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy + 3.19441e-12 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(lambda, 2)+0.0f;
