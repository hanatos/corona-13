//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + -2.06871e-05  + 81.4095 *begin_dx + 4.23662e-07 *begin_y + 0.814319 *begin_x + 0.000352336 *lens_ipow(begin_dy, 2) + 0.00262068 *lens_ipow(begin_dx, 2) + 3.15095e-05 *begin_y*begin_dx + 2.54411e-07 *begin_x*begin_y + -68.2089 *begin_dx*lens_ipow(begin_dy, 2) + -68.6124 *lens_ipow(begin_dx, 3) + -0.887354 *begin_y*begin_dx*begin_dy + -0.00229716 *lens_ipow(begin_y, 2)*begin_dx + -0.486129 *begin_x*lens_ipow(begin_dy, 2) + -1.37078 *begin_x*lens_ipow(begin_dx, 2) + -0.00533204 *begin_x*begin_y*begin_dy + -8.17454e-06 *begin_x*lens_ipow(begin_y, 2) + -9.41626e-07 *lens_ipow(begin_x, 2)*begin_dy + -0.00752169 *lens_ipow(begin_x, 2)*begin_dx + -7.91925e-06 *lens_ipow(begin_x, 3) + 2.02778 *begin_dx*lens_ipow(begin_lambda, 3) + 20.0552 *lens_ipow(begin_dx, 5) + 0.0282357 *begin_x*lens_ipow(begin_lambda, 4) + -0.00421355 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.00385216 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 60.4558 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + -3.25374 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 0.0799742 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 4) + 1.49858e-07 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + 2.83681 *begin_x*lens_ipow(begin_dy, 6) + -0.00060995 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 1.56639e-09 *lens_ipow(begin_y, 6)*begin_dx*begin_lambda + -169.411 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 4) + -0.00861136 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 4) + -0.000102928 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 5) + -0.0108934 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -0.00317051 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 6) + 6.98183e-13 *lens_ipow(begin_x, 8)*begin_dx + -10.7066 *begin_dx*lens_ipow(begin_lambda, 10) + -0.137591 *begin_x*lens_ipow(begin_lambda, 10) + -4.87038e-14 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 2),
       + 1.32547e-06  + 81.4074 *begin_dy + 2.23496e-05 *begin_dx + 0.814303 *begin_y + 3.0924e-05 *begin_y*begin_dy + 4.08633e-07 *lens_ipow(begin_y, 2) + 1.10483e-07 *begin_x*begin_y + -68.3684 *lens_ipow(begin_dy, 3) + -67.5127 *lens_ipow(begin_dx, 2)*begin_dy + -1.36518 *begin_y*lens_ipow(begin_dy, 2) + -0.483232 *begin_y*lens_ipow(begin_dx, 2) + -0.00752915 *lens_ipow(begin_y, 2)*begin_dy + -8.08994e-06 *lens_ipow(begin_y, 3) + -0.881645 *begin_x*begin_dx*begin_dy + -0.00534004 *begin_x*begin_y*begin_dx + -0.00227046 *lens_ipow(begin_x, 2)*begin_dy + -8.25868e-06 *lens_ipow(begin_x, 2)*begin_y + 2.03968 *begin_dy*lens_ipow(begin_lambda, 3) + -0.0246124 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000462666 *begin_y*lens_ipow(begin_dx, 3) + 16.0857 *lens_ipow(begin_dy, 5) + 0.0283783 *begin_y*lens_ipow(begin_lambda, 4) + -0.00203956 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -0.00717632 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.00585902 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00154405 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 493.181 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 249.211 *lens_ipow(begin_dx, 6)*begin_dy + -0.0585162 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + 2.7994e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.91159e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy + -1.26284 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 5) + 537.217 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3)*begin_lambda + 35.048 *begin_y*lens_ipow(begin_dx, 8) + -1.3294 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + -1.86724e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 2) + -1.05271e-13 *lens_ipow(begin_y, 8)*begin_dy + -10.8571 *begin_dy*lens_ipow(begin_lambda, 10) + -0.138545 *begin_y*lens_ipow(begin_lambda, 10) + -3.91585e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 81.4095  + 0.00524136 *begin_dx + 3.15095e-05 *begin_y + -68.2089 *lens_ipow(begin_dy, 2) + -205.837 *lens_ipow(begin_dx, 2) + -0.887354 *begin_y*begin_dy + -0.00229716 *lens_ipow(begin_y, 2) + -2.74156 *begin_x*begin_dx + -0.00752169 *lens_ipow(begin_x, 2) + 2.02778 *lens_ipow(begin_lambda, 3) + 100.276 *lens_ipow(begin_dx, 4) + -0.00421355 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -0.0115565 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 181.368 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -13.015 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 0.0799742 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 1.49858e-07 *lens_ipow(begin_y, 5)*begin_dy + -0.00182985 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.56639e-09 *lens_ipow(begin_y, 6)*begin_lambda + -847.054 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 4) + -0.0258341 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 4) + -0.000514639 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4) + -0.0108934 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 6.98183e-13 *lens_ipow(begin_x, 8) + -10.7066 *lens_ipow(begin_lambda, 10)+0.0f;
    dx1_domega0[0][1] =  + 0.000704671 *begin_dy + -136.418 *begin_dx*begin_dy + -0.887354 *begin_y*begin_dx + -0.972259 *begin_x*begin_dy + -0.00533204 *begin_x*begin_y + -9.41626e-07 *lens_ipow(begin_x, 2) + -0.0084271 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 120.912 *lens_ipow(begin_dx, 3)*begin_dy*begin_lambda + -6.50748 *lens_ipow(begin_dx, 4)*begin_dy + 0.319897 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 1.49858e-07 *lens_ipow(begin_y, 5)*begin_dx + 17.0209 *begin_x*lens_ipow(begin_dy, 5) + -0.00060995 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + -677.643 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3) + -0.0217868 *lens_ipow(begin_x, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + -0.0190231 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 5)+0.0f;
    dx1_domega0[1][0] =  + 2.23496e-05  + -135.025 *begin_dx*begin_dy + -0.966464 *begin_y*begin_dx + -0.881645 *begin_x*begin_dy + -0.00534004 *begin_x*begin_y + -0.0492249 *begin_dx*lens_ipow(begin_dy, 2) + 0.001388 *begin_y*lens_ipow(begin_dx, 2) + -0.0143526 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.00585902 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -0.00308811 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 986.362 *begin_dx*lens_ipow(begin_dy, 5) + 1495.27 *lens_ipow(begin_dx, 5)*begin_dy + 5.5988e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx + -2.52568 *begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + 2148.87 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*begin_lambda + 280.384 *begin_y*lens_ipow(begin_dx, 7) + -5.31761 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + -3.73449e-10 *lens_ipow(begin_y, 7)*begin_dx + -1.56634e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)+0.0f;
    dx1_domega0[1][1] =  + 81.4074  + 3.0924e-05 *begin_y + -205.105 *lens_ipow(begin_dy, 2) + -67.5127 *lens_ipow(begin_dx, 2) + -2.73037 *begin_y*begin_dy + -0.00752915 *lens_ipow(begin_y, 2) + -0.881645 *begin_x*begin_dx + -0.00227046 *lens_ipow(begin_x, 2) + 2.03968 *lens_ipow(begin_lambda, 3) + -0.0492249 *lens_ipow(begin_dx, 2)*begin_dy + 80.4284 *lens_ipow(begin_dy, 4) + -0.00611867 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.00717632 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.011718 *begin_x*begin_y*begin_dx*begin_dy + -0.00154405 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 2465.9 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 249.211 *lens_ipow(begin_dx, 6) + -0.292581 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + -6.91159e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -1.26284 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + 1611.65 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*begin_lambda + -3.98821 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -1.05271e-13 *lens_ipow(begin_y, 8) + -10.8571 *lens_ipow(begin_lambda, 10)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + -3.22872e-05  + 98.9954 *begin_dx + 8.64153e-06 *begin_y + 0.851601 *begin_x + 7.06487e-05 *begin_y*begin_dy + -0.000456385 *begin_x*begin_dx + -9.12331e-07 *begin_x*begin_y + -11.9226 *begin_dx*lens_ipow(begin_dy, 2) + -0.0619983 *lens_ipow(begin_dx, 2)*begin_dy + -12.5938 *lens_ipow(begin_dx, 3) + 0.855521 *begin_y*begin_dx*begin_dy + 0.00978111 *lens_ipow(begin_y, 2)*begin_dx + 2.72831 *begin_x*lens_ipow(begin_dy, 2) + 3.52654 *begin_x*lens_ipow(begin_dx, 2) + 0.06051 *begin_x*begin_y*begin_dy + 0.000333285 *begin_x*lens_ipow(begin_y, 2) + 0.0697881 *lens_ipow(begin_x, 2)*begin_dx + -1.83966e-07 *lens_ipow(begin_x, 2)*begin_y + 0.000332212 *lens_ipow(begin_x, 3) + 0.560816 *begin_dx*lens_ipow(begin_lambda, 3) + 9.48202e-05 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 9.8021e-07 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 1.9954e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -2.63123e-08 *lens_ipow(begin_x, 4) + -0.969979 *begin_x*lens_ipow(begin_dy, 4) + 0.000159735 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.000115625 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 0.177641 *begin_y*lens_ipow(begin_dx, 4)*begin_dy + 3052.72 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 7.24363e-07 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -2.45574e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + 7761.54 *lens_ipow(begin_dx, 9) + 0.00619112 *begin_x*lens_ipow(begin_lambda, 8) + -2.09814e-13 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6) + -2.07054 *begin_dx*lens_ipow(begin_lambda, 10) + 229706 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 8) + 1946.99 *begin_y*lens_ipow(begin_dx, 9)*begin_dy + -1.7831e-12 *lens_ipow(begin_y, 9)*begin_dx*begin_dy + -3.75529e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -4.48366e-16 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2);
    out[1] =  + 0.000215366  + 99.0277 *begin_dy + 0.85144 *begin_y + 0.00779382 *lens_ipow(begin_dy, 2) + -1.90801e-06 *lens_ipow(begin_y, 2) + -3.60359e-05 *begin_x*begin_dy + 3.71528e-06 *begin_x*begin_y + -1.0825e-06 *lens_ipow(begin_x, 2) + -18.2156 *lens_ipow(begin_dy, 3) + -14.6601 *lens_ipow(begin_dx, 2)*begin_dy + 3.5193 *begin_y*lens_ipow(begin_dy, 2) + 2.72982 *begin_y*lens_ipow(begin_dx, 2) + 0.0699987 *lens_ipow(begin_y, 2)*begin_dy + 0.000333978 *lens_ipow(begin_y, 3) + 0.804093 *begin_x*begin_dx*begin_dy + 4.70614e-06 *begin_x*begin_y*begin_dy + 0.0604572 *begin_x*begin_y*begin_dx + 0.00954859 *lens_ipow(begin_x, 2)*begin_dy + 0.000334072 *lens_ipow(begin_x, 2)*begin_y + 0.601684 *begin_dy*lens_ipow(begin_lambda, 3) + -0.00016648 *begin_x*begin_y*lens_ipow(begin_dy, 2) + 108.828 *lens_ipow(begin_dy, 5) + 199.591 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.029654 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + 6.65749e-05 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + 9.16095e-11 *begin_x*lens_ipow(begin_y, 5) + -8.49352e-11 *lens_ipow(begin_x, 5)*begin_y + -10.4299 *begin_y*lens_ipow(begin_dx, 6) + -3.29954e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3) + 1.62518e-09 *lens_ipow(begin_x, 6)*begin_dy + 0.00651722 *begin_y*lens_ipow(begin_lambda, 7) + -781.906 *lens_ipow(begin_dy, 9) + 15862.6 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 5) + 5892.58 *lens_ipow(begin_dx, 8)*begin_dy + -2.4967e-13 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -1.78325e-07 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 3)*begin_lambda + -2.20618 *begin_dy*lens_ipow(begin_lambda, 10) + 3.898e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3)*begin_dy + -0.00279017 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 7) + -5.6106e-08 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_lambda, 6);
    out[2] =  + -3.8794e-05  + 8.04855e-05 *begin_dy + -4.37476 *begin_dx + -0.0477281 *begin_x + 0.00137206 *lens_ipow(begin_dy, 2) + 0.000114416 *lens_ipow(begin_dx, 2) + -5.1335e-08 *lens_ipow(begin_y, 2) + 6.53264e-06 *begin_x*begin_dy + 0.000210974 *lens_ipow(begin_lambda, 3) + -0.0103629 *begin_dx*lens_ipow(begin_lambda, 2) + -44.9562 *begin_dx*lens_ipow(begin_dy, 2) + 2.23176 *lens_ipow(begin_dx, 3) + -0.844474 *begin_y*begin_dx*begin_dy + 5.11962e-05 *begin_y*lens_ipow(begin_dx, 2) + -0.00378974 *lens_ipow(begin_y, 2)*begin_dx + -0.519422 *begin_x*lens_ipow(begin_dy, 2) + -0.00972586 *begin_x*begin_y*begin_dy + -4.36122e-05 *begin_x*lens_ipow(begin_y, 2) + 5.22096e-07 *lens_ipow(begin_x, 2)*begin_dy + -0.000457883 *lens_ipow(begin_x, 2)*begin_dx + -2.08698e-06 *lens_ipow(begin_x, 3) + 8.96643e-05 *begin_x*lens_ipow(begin_lambda, 3) + -9.74567e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 2) + 1.40482e-09 *lens_ipow(begin_x, 4) + -0.0453133 *lens_ipow(begin_dy, 5) + -0.666224 *lens_ipow(begin_dx, 5) + 1.94173e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 0.0236707 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 2.5098 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 0.000149894 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + -6.77343e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -5.9009e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.0778036 *begin_x*lens_ipow(begin_dy, 7) + -9.89898 *begin_y*begin_dx*lens_ipow(begin_dy, 7) + 127.61 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 3) + 27.478 *begin_y*lens_ipow(begin_dx, 7)*begin_dy*begin_lambda + -6.98984e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + 0.0801192 *begin_dx*lens_ipow(begin_lambda, 10) + 96671.5 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 4) + 4.42742e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2);
    out[3] =  + -6.59248e-06  + -4.39309 *begin_dy + -7.30858e-05 *begin_dx + -0.0479157 *begin_y + -8.51495e-07 *begin_x + 0.00113682 *lens_ipow(begin_dy, 2) + -0.00235461 *begin_dx*begin_dy + 0.00071304 *lens_ipow(begin_dx, 2) + -1.74043e-05 *begin_x*begin_dy + 3.77936 *lens_ipow(begin_dy, 3) + 0.0115858 *begin_dx*lens_ipow(begin_dy, 2) + 49.7177 *lens_ipow(begin_dx, 2)*begin_dy + 0.0469348 *begin_y*lens_ipow(begin_dy, 2) + 0.325336 *begin_y*lens_ipow(begin_dx, 2) + 1.22258e-05 *lens_ipow(begin_y, 2)*begin_dy + -5.10008e-07 *lens_ipow(begin_y, 3) + 1.0517 *begin_x*begin_dx*begin_dy + 0.00718422 *begin_x*begin_y*begin_dx + 5.18206e-09 *begin_x*lens_ipow(begin_y, 2) + 0.00558656 *lens_ipow(begin_x, 2)*begin_dy + 4.00401e-05 *lens_ipow(begin_x, 2)*begin_y + 0.000212039 *begin_y*lens_ipow(begin_lambda, 3) + -3.13579e-05 *begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -0.000511339 *begin_x*lens_ipow(begin_dy, 3) + -1.55361 *lens_ipow(begin_dx, 4)*begin_dy + 0.0255659 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.0094547 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 4) + 1.06281e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.000628799 *begin_x*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 3.00164e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*begin_dy + -0.457521 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + -1.26604e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 4) + -3.52475e-10 *lens_ipow(begin_x, 6)*begin_dy*begin_lambda + -1.04865e-09 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -1194.15 *lens_ipow(begin_dy, 11) + -10493.7 *lens_ipow(begin_dx, 10)*begin_dy + -0.00104625 *begin_y*lens_ipow(begin_lambda, 10) + -2.39314e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 6) + -2.64215e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 6) + 5.6138e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0477281  + 6.53264e-06 *begin_dy + -0.519422 *lens_ipow(begin_dy, 2) + -0.00972586 *begin_y*begin_dy + -4.36122e-05 *lens_ipow(begin_y, 2) + 1.04419e-06 *begin_x*begin_dy + -0.000915766 *begin_x*begin_dx + -6.26093e-06 *lens_ipow(begin_x, 2) + 8.96643e-05 *lens_ipow(begin_lambda, 3) + -1.94913e-06 *begin_x*lens_ipow(begin_lambda, 2) + 5.61929e-09 *lens_ipow(begin_x, 3) + 5.82519e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 2.5098 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 0.000149894 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + -2.03203e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -1.77027e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.0778036 *lens_ipow(begin_dy, 7) + -6.98984e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + 0.000132822 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)+0.0f;
    domega2_dx0[0][1] =  + -1.0267e-07 *begin_y + -0.844474 *begin_dx*begin_dy + 5.11962e-05 *lens_ipow(begin_dx, 2) + -0.00757949 *begin_y*begin_dx + -0.00972586 *begin_x*begin_dy + -8.72244e-05 *begin_x*begin_y + 3.88346e-09 *lens_ipow(begin_x, 3)*begin_y + 0.0236707 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.000299789 *begin_x*begin_y*lens_ipow(begin_dy, 4) + -1.35469e-07 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dy, 2) + -1.18018e-07 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2) + -9.89898 *begin_dx*lens_ipow(begin_dy, 7) + 27.478 *lens_ipow(begin_dx, 7)*begin_dy*begin_lambda + -1.39797e-05 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + 8.85483e-05 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)+0.0f;
    domega2_dx0[1][0] =  + -8.51495e-07  + -1.74043e-05 *begin_dy + 1.0517 *begin_dx*begin_dy + 0.00718422 *begin_y*begin_dx + 5.18206e-09 *lens_ipow(begin_y, 2) + 0.0111731 *begin_x*begin_dy + 8.00801e-05 *begin_x*begin_y + -0.000511339 *lens_ipow(begin_dy, 3) + 2.12562e-08 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.000628799 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 1.20066e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_dy + -0.457521 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + -5.06416e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4) + -2.11485e-09 *lens_ipow(begin_x, 5)*begin_dy*begin_lambda + -5.24326e-09 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -2.39314e-05 *lens_ipow(begin_y, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 6) + -5.2843e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 6) + 2.24552e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5)+0.0f;
    domega2_dx0[1][1] =  + -0.0479157  + 0.0469348 *lens_ipow(begin_dy, 2) + 0.325336 *lens_ipow(begin_dx, 2) + 2.44517e-05 *begin_y*begin_dy + -1.53002e-06 *lens_ipow(begin_y, 2) + 0.00718422 *begin_x*begin_dx + 1.03641e-08 *begin_x*begin_y + 4.00401e-05 *lens_ipow(begin_x, 2) + 0.000212039 *lens_ipow(begin_lambda, 3) + -3.13579e-05 *begin_dx*lens_ipow(begin_lambda, 2) + 0.0255659 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 2.12562e-08 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2) + -1.04865e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.00104625 *lens_ipow(begin_lambda, 10) + -4.78629e-05 *begin_x*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 6) + -7.92645e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.621638  + 0.151228 *begin_lambda + -0.00017301 *begin_dy + -2.08713e-06 *begin_y + -8.78743e-06 *begin_x + -0.811103 *lens_ipow(begin_dy, 2) + 0.000103357 *begin_dx*begin_lambda + -0.00118959 *begin_dx*begin_dy + -0.791182 *lens_ipow(begin_dx, 2) + -0.0175219 *begin_y*begin_dy + -9.46734e-05 *lens_ipow(begin_y, 2) + -0.0171096 *begin_x*begin_dx + -9.65303e-05 *lens_ipow(begin_x, 2) + -0.126351 *lens_ipow(begin_lambda, 3) + -0.0324512 *lens_ipow(begin_dx, 3) + 0.000193553 *begin_x*lens_ipow(begin_dy, 2) + -5.74799e-06 *begin_x*begin_y*begin_dx + -4.47266e-08 *begin_x*lens_ipow(begin_y, 2) + 1.37065e-05 *lens_ipow(begin_x, 2)*begin_dx + 1.42992e-07 *lens_ipow(begin_x, 3) + -1.18148 *lens_ipow(begin_dy, 4) + -3.83757 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.838286 *lens_ipow(begin_dx, 4) + 6.63602e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.02732e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 0.000361468 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -6.26128e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 1.30085e-09 *lens_ipow(begin_x, 3)*begin_y + -0.00454509 *begin_y*lens_ipow(begin_dx, 4) + 1.39042e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + -1.65048e-08 *lens_ipow(begin_y, 5)*begin_dy + -1.27552e-10 *lens_ipow(begin_y, 6) + -0.000664689 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -2.29946e-08 *lens_ipow(begin_x, 5)*begin_dx + 3.11003e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 5) + -4.5113e-13 *lens_ipow(begin_x, 8) + -769.049 *lens_ipow(begin_dy, 10) + -1423.88 *lens_ipow(begin_dx, 10) + 0.212642 *lens_ipow(begin_lambda, 11) + 73.4435 *lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 5);
else
  out[4] = 0.0f;
