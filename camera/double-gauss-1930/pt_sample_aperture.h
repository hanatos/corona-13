float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + -2.06871e-05  + 81.4095 *begin_dx + 4.23662e-07 *begin_y + 0.814319 *begin_x + 0.000352336 *lens_ipow(begin_dy, 2) + 0.00262068 *lens_ipow(begin_dx, 2) + 3.15095e-05 *begin_y*begin_dx + 2.54411e-07 *begin_x*begin_y + -68.2089 *begin_dx*lens_ipow(begin_dy, 2) + -68.6124 *lens_ipow(begin_dx, 3) + -0.887354 *begin_y*begin_dx*begin_dy + -0.00229716 *lens_ipow(begin_y, 2)*begin_dx + -0.486129 *begin_x*lens_ipow(begin_dy, 2) + -1.37078 *begin_x*lens_ipow(begin_dx, 2) + -0.00533204 *begin_x*begin_y*begin_dy + -8.17454e-06 *begin_x*lens_ipow(begin_y, 2) + -9.41626e-07 *lens_ipow(begin_x, 2)*begin_dy + -0.00752169 *lens_ipow(begin_x, 2)*begin_dx + -7.91925e-06 *lens_ipow(begin_x, 3) + 2.02778 *begin_dx*lens_ipow(begin_lambda, 3) + 20.0552 *lens_ipow(begin_dx, 5) + 0.0282357 *begin_x*lens_ipow(begin_lambda, 4) + -0.00421355 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.00385216 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 60.4558 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + -3.25374 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 0.0799742 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 4) + 1.49858e-07 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + 2.83681 *begin_x*lens_ipow(begin_dy, 6) + -0.00060995 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 1.56639e-09 *lens_ipow(begin_y, 6)*begin_dx*begin_lambda + -169.411 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 4) + -0.00861136 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 4) + -0.000102928 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 5) + -0.0108934 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -0.00317051 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 6) + 6.98183e-13 *lens_ipow(begin_x, 8)*begin_dx + -10.7066 *begin_dx*lens_ipow(begin_lambda, 10) + -0.137591 *begin_x*lens_ipow(begin_lambda, 10) + -4.87038e-14 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 2);
  pred_y =  + 1.32547e-06  + 81.4074 *begin_dy + 2.23496e-05 *begin_dx + 0.814303 *begin_y + 3.0924e-05 *begin_y*begin_dy + 4.08633e-07 *lens_ipow(begin_y, 2) + 1.10483e-07 *begin_x*begin_y + -68.3684 *lens_ipow(begin_dy, 3) + -67.5127 *lens_ipow(begin_dx, 2)*begin_dy + -1.36518 *begin_y*lens_ipow(begin_dy, 2) + -0.483232 *begin_y*lens_ipow(begin_dx, 2) + -0.00752915 *lens_ipow(begin_y, 2)*begin_dy + -8.08994e-06 *lens_ipow(begin_y, 3) + -0.881645 *begin_x*begin_dx*begin_dy + -0.00534004 *begin_x*begin_y*begin_dx + -0.00227046 *lens_ipow(begin_x, 2)*begin_dy + -8.25868e-06 *lens_ipow(begin_x, 2)*begin_y + 2.03968 *begin_dy*lens_ipow(begin_lambda, 3) + -0.0246124 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000462666 *begin_y*lens_ipow(begin_dx, 3) + 16.0857 *lens_ipow(begin_dy, 5) + 0.0283783 *begin_y*lens_ipow(begin_lambda, 4) + -0.00203956 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -0.00717632 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.00585902 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00154405 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 493.181 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + 249.211 *lens_ipow(begin_dx, 6)*begin_dy + -0.0585162 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + 2.7994e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.91159e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy + -1.26284 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 5) + 537.217 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3)*begin_lambda + 35.048 *begin_y*lens_ipow(begin_dx, 8) + -1.3294 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + -1.86724e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 2) + -1.05271e-13 *lens_ipow(begin_y, 8)*begin_dy + -10.8571 *begin_dy*lens_ipow(begin_lambda, 10) + -0.138545 *begin_y*lens_ipow(begin_lambda, 10) + -3.91585e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4);
  pred_dx =  + -5.4868e-07  + -1.31337e-05 *begin_dy + 0.597373 *begin_dx + -1.92859e-07 *begin_y + -0.00628944 *begin_x + 3.26887e-06 *begin_x*begin_dx + 9.31044e-09 *begin_x*begin_y + 0.00857568 *begin_dx*lens_ipow(begin_lambda, 2) + -0.56158 *begin_dx*lens_ipow(begin_dy, 2) + -0.619665 *lens_ipow(begin_dx, 3) + -0.0221786 *begin_y*begin_dx*begin_dy + -0.000152272 *lens_ipow(begin_y, 2)*begin_dx + -0.0112114 *begin_x*lens_ipow(begin_dy, 2) + -0.0350522 *begin_x*lens_ipow(begin_dx, 2) + -0.000293299 *begin_x*begin_y*begin_dy + -2.04779e-06 *begin_x*lens_ipow(begin_y, 2) + -0.000466241 *lens_ipow(begin_x, 2)*begin_dx + 2.38175e-09 *lens_ipow(begin_x, 2)*begin_y + -2.12563e-06 *lens_ipow(begin_x, 3) + 0.000158793 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.56259e-10 *lens_ipow(begin_x, 4) + 0.000638611 *begin_x*lens_ipow(begin_lambda, 4) + -0.000258133 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.0914576 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*begin_lambda + 21.4459 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 0.002744 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -0.00567563 *begin_dx*lens_ipow(begin_lambda, 7) + 6.32133 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + 0.0375048 *begin_x*lens_ipow(begin_dy, 6)*begin_lambda + 2.26704e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_dx + -2.01939e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 5) + 6.48821e-13 *lens_ipow(begin_x, 8)*begin_dx + 7.36535e-15 *lens_ipow(begin_x, 9)*begin_lambda + 9267.08 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 6) + 3596.75 *lens_ipow(begin_dx, 11) + -0.00265068 *begin_x*lens_ipow(begin_lambda, 10) + 5.13482e-06 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -0.000164407 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 6)*begin_dy + -1.49663e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_lambda, 6);
  pred_dy =  + -8.18721e-07  + 0.598784 *begin_dy + 5.26237e-06 *begin_dx + -0.00629737 *begin_y + -8.45536e-07 *begin_y*begin_dy + -1.75349e-06 *begin_x*begin_dx + -6.25914e-09 *begin_x*begin_y + -0.603605 *lens_ipow(begin_dy, 3) + -0.56602 *lens_ipow(begin_dx, 2)*begin_dy + -0.034625 *begin_y*lens_ipow(begin_dy, 2) + -0.0112229 *begin_y*lens_ipow(begin_dx, 2) + -0.000457038 *lens_ipow(begin_y, 2)*begin_dy + -2.07151e-06 *lens_ipow(begin_y, 3) + -0.0224882 *begin_x*begin_dx*begin_dy + -0.00029801 *begin_x*begin_y*begin_dx + -0.000154619 *lens_ipow(begin_x, 2)*begin_dy + -2.07448e-06 *lens_ipow(begin_x, 2)*begin_y + 0.000356516 *begin_y*lens_ipow(begin_lambda, 3) + 1.72643e-08 *lens_ipow(begin_y, 3)*begin_dx + -8.03363e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 1.55666e-06 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -0.000228904 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + 1.82083e-08 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 9.07525e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 0.0219255 *begin_dy*lens_ipow(begin_lambda, 6) + -1.56703e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 5) + 2837.73 *lens_ipow(begin_dy, 11) + 26353 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 7) + -0.00124699 *begin_y*lens_ipow(begin_lambda, 10) + 7.5796e-16 *lens_ipow(begin_y, 10)*begin_dy + 0.00276614 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 8) + 0.568716 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 9) + 0.0758657 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6) + 7.22045e-18 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + -9.72852e-14 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 81.4095  + 0.00524136 *begin_dx + 3.15095e-05 *begin_y + -68.2089 *lens_ipow(begin_dy, 2) + -205.837 *lens_ipow(begin_dx, 2) + -0.887354 *begin_y*begin_dy + -0.00229716 *lens_ipow(begin_y, 2) + -2.74156 *begin_x*begin_dx + -0.00752169 *lens_ipow(begin_x, 2) + 2.02778 *lens_ipow(begin_lambda, 3) + 100.276 *lens_ipow(begin_dx, 4) + -0.00421355 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -0.0115565 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 181.368 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -13.015 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 0.0799742 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 1.49858e-07 *lens_ipow(begin_y, 5)*begin_dy + -0.00182985 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.56639e-09 *lens_ipow(begin_y, 6)*begin_lambda + -847.054 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 4) + -0.0258341 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 4) + -0.000514639 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4) + -0.0108934 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 6.98183e-13 *lens_ipow(begin_x, 8) + -10.7066 *lens_ipow(begin_lambda, 10)+0.0f;
  dx1_domega0[0][1] =  + 0.000704671 *begin_dy + -136.418 *begin_dx*begin_dy + -0.887354 *begin_y*begin_dx + -0.972259 *begin_x*begin_dy + -0.00533204 *begin_x*begin_y + -9.41626e-07 *lens_ipow(begin_x, 2) + -0.0084271 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 120.912 *lens_ipow(begin_dx, 3)*begin_dy*begin_lambda + -6.50748 *lens_ipow(begin_dx, 4)*begin_dy + 0.319897 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 1.49858e-07 *lens_ipow(begin_y, 5)*begin_dx + 17.0209 *begin_x*lens_ipow(begin_dy, 5) + -0.00060995 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + -677.643 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3) + -0.0217868 *lens_ipow(begin_x, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + -0.0190231 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 5)+0.0f;
  dx1_domega0[1][0] =  + 2.23496e-05  + -135.025 *begin_dx*begin_dy + -0.966464 *begin_y*begin_dx + -0.881645 *begin_x*begin_dy + -0.00534004 *begin_x*begin_y + -0.0492249 *begin_dx*lens_ipow(begin_dy, 2) + 0.001388 *begin_y*lens_ipow(begin_dx, 2) + -0.0143526 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.00585902 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -0.00308811 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 986.362 *begin_dx*lens_ipow(begin_dy, 5) + 1495.27 *lens_ipow(begin_dx, 5)*begin_dy + 5.5988e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx + -2.52568 *begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + 2148.87 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*begin_lambda + 280.384 *begin_y*lens_ipow(begin_dx, 7) + -5.31761 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + -3.73449e-10 *lens_ipow(begin_y, 7)*begin_dx + -1.56634e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)+0.0f;
  dx1_domega0[1][1] =  + 81.4074  + 3.0924e-05 *begin_y + -205.105 *lens_ipow(begin_dy, 2) + -67.5127 *lens_ipow(begin_dx, 2) + -2.73037 *begin_y*begin_dy + -0.00752915 *lens_ipow(begin_y, 2) + -0.881645 *begin_x*begin_dx + -0.00227046 *lens_ipow(begin_x, 2) + 2.03968 *lens_ipow(begin_lambda, 3) + -0.0492249 *lens_ipow(begin_dx, 2)*begin_dy + 80.4284 *lens_ipow(begin_dy, 4) + -0.00611867 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.00717632 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.011718 *begin_x*begin_y*begin_dx*begin_dy + -0.00154405 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 2465.9 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 249.211 *lens_ipow(begin_dx, 6) + -0.292581 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + -6.91159e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -1.26284 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + 1611.65 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*begin_lambda + -3.98821 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + -1.05271e-13 *lens_ipow(begin_y, 8) + -10.8571 *lens_ipow(begin_lambda, 10)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
