float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + 4.29068e-05  + 131.941 *begin_dx + 1.47919e-06 *begin_y + 0.760868 *begin_x + -0.00248268 *lens_ipow(begin_dy, 2) + 3.05647e-05 *begin_x*begin_dy + 6.79418e-05 *begin_x*begin_dx + -5.21674e-07 *begin_x*begin_y + 4.33109e-07 *lens_ipow(begin_x, 2) + 31.7351 *begin_dx*lens_ipow(begin_dy, 2) + 32.225 *lens_ipow(begin_dx, 3) + 1.28139 *begin_y*begin_dx*begin_dy + 0.00677532 *lens_ipow(begin_y, 2)*begin_dx + 0.721853 *begin_x*lens_ipow(begin_dy, 2) + 2.03673 *begin_x*lens_ipow(begin_dx, 2) + 0.0146307 *begin_x*begin_y*begin_dy + 6.14833e-05 *begin_x*lens_ipow(begin_y, 2) + 0.0215743 *lens_ipow(begin_x, 2)*begin_dx + 6.19039e-05 *lens_ipow(begin_x, 3) + -0.0115372 *begin_x*lens_ipow(begin_lambda, 3) + -4.70837e-07 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 0.12077 *begin_dx*lens_ipow(begin_lambda, 4) + 4.08016e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -5.33215e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -0.359659 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 4) + 9.11649e-10 *begin_x*lens_ipow(begin_y, 5)*begin_dy + 0.20722 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 0.10681 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 5) + 0.000134914 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + 6.65254e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2) + 1.41142e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2) + -0.00128574 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 5) + -0.00393656 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 5) + -555.619 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -0.783692 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 7) + -462.046 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 5) + -2.75031 *begin_x*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 5) + -3.30349e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_lambda, 5) + -10.5193 *begin_y*lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 6) + 0.0659771 *begin_x*lens_ipow(begin_lambda, 10);
  pred_y =  + 4.77201e-05  + 131.943 *begin_dy + 0.760961 *begin_y + 4.46534e-07 *begin_x + 2.72166e-05 *begin_y*begin_dx + -6.26592e-07 *lens_ipow(begin_y, 2) + 3.04161e-05 *begin_x*begin_dx + 4.35454e-07 *begin_x*begin_y + 32.3847 *lens_ipow(begin_dy, 3) + 32.0399 *lens_ipow(begin_dx, 2)*begin_dy + 2.03225 *begin_y*lens_ipow(begin_dy, 2) + 0.725552 *begin_y*lens_ipow(begin_dx, 2) + 0.021516 *lens_ipow(begin_y, 2)*begin_dy + 6.14628e-05 *lens_ipow(begin_y, 3) + 1.29155 *begin_x*begin_dx*begin_dy + 0.0147175 *begin_x*begin_y*begin_dx + 0.00679404 *lens_ipow(begin_x, 2)*begin_dy + 6.12551e-05 *lens_ipow(begin_x, 2)*begin_y + -0.0119604 *begin_y*lens_ipow(begin_lambda, 3) + 3.7335e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.0743001 *begin_dy*lens_ipow(begin_lambda, 4) + 7.39082e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2) + 2.34632e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -0.30367 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 0.0510535 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5) + -8.41132 *begin_x*lens_ipow(begin_dx, 5)*begin_dy + -0.00171867 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 1.41059e-09 *lens_ipow(begin_x, 5)*begin_y*begin_dx + -0.00326215 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 5) + -0.00247691 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 5) + -7.73829e-05 *lens_ipow(begin_x, 3)*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + -265.517 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 4) + -3.7727 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 4) + 4.10599e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -557.907 *lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 5) + -4.06703e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + 0.0658052 *begin_y*lens_ipow(begin_lambda, 10) + 1055.34 *begin_y*lens_ipow(begin_dx, 10) + -0.512701 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 8) + -5.85707e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 6);
  pred_dx =  + -8.6932e-07  + 1.09885 *begin_dx + -1.26279e-06 *begin_y + -0.00132365 *begin_x + 0.0012265 *lens_ipow(begin_dx, 2) + -5.36823e-08 *lens_ipow(begin_y, 2) + 2.23365e-05 *begin_x*begin_dx + -2.97453e-08 *begin_x*begin_y + 1.05093e-07 *lens_ipow(begin_x, 2) + 3.24245 *begin_dx*lens_ipow(begin_dy, 2) + 3.28285 *lens_ipow(begin_dx, 3) + 0.0480135 *begin_y*begin_dx*begin_dy + 0.000211836 *lens_ipow(begin_y, 2)*begin_dx + 0.0239438 *begin_x*lens_ipow(begin_dy, 2) + 0.0740722 *begin_x*lens_ipow(begin_dx, 2) + 0.00041325 *begin_x*begin_y*begin_dy + 3.61309e-07 *begin_x*begin_y*begin_dx + 1.75436e-06 *begin_x*lens_ipow(begin_y, 2) + 0.000644108 *lens_ipow(begin_x, 2)*begin_dx + 1.82361e-06 *lens_ipow(begin_x, 3) + -0.473722 *begin_dx*lens_ipow(begin_lambda, 3) + -4.40139e-08 *lens_ipow(begin_x, 2)*begin_y*begin_dy + 0.000136754 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 3.49091e-11 *lens_ipow(begin_y, 5) + -0.00442241 *begin_x*lens_ipow(begin_lambda, 4) + -4.02563e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -12.8953 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + -0.000280941 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.0129486 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 5) + -1.69778e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -8.4809e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy + -31.1988 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 3) + -0.0171254 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + -0.0481691 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 5) + -30.853 *begin_dx*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 4) + -6.45788e-07 *lens_ipow(begin_x, 4)*begin_dx*lens_ipow(begin_lambda, 4) + -1.21974 *begin_x*lens_ipow(begin_dy, 6)*lens_ipow(begin_lambda, 3) + 2.47465 *begin_dx*lens_ipow(begin_lambda, 10) + 0.0223832 *begin_x*lens_ipow(begin_lambda, 10) + -6.84023e-12 *lens_ipow(begin_x, 7)*lens_ipow(begin_lambda, 4);
  pred_dy =  + 9.58992e-06  + 1.10012 *begin_dy + -2.3823e-05 *begin_dx + -0.00132423 *begin_y + 1.87268e-06 *begin_x + -0.000838678 *lens_ipow(begin_dy, 2) + -1.64542e-05 *begin_y*begin_dy + -1.24193e-07 *lens_ipow(begin_y, 2) + 1.20334e-05 *begin_x*begin_dy + 4.17942e-08 *begin_x*begin_y + 3.16362 *lens_ipow(begin_dy, 3) + 3.32107 *lens_ipow(begin_dx, 2)*begin_dy + 0.0723735 *begin_y*lens_ipow(begin_dy, 2) + 0.0244675 *begin_y*lens_ipow(begin_dx, 2) + 0.000624062 *lens_ipow(begin_y, 2)*begin_dy + 1.82553e-06 *lens_ipow(begin_y, 3) + 0.0488996 *begin_x*begin_dx*begin_dy + 0.00042194 *begin_x*begin_y*begin_dx + 0.000212792 *lens_ipow(begin_x, 2)*begin_dy + 1.79653e-06 *lens_ipow(begin_x, 2)*begin_y + -1.07738e-08 *lens_ipow(begin_x, 3) + -0.477853 *begin_dy*lens_ipow(begin_lambda, 3) + 8.06506e-06 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -0.00445144 *begin_y*lens_ipow(begin_lambda, 4) + 0.000710439 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -2.44116e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.000131075 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + -14.8966 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*begin_lambda + -0.000353754 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -7.28148e-07 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3) + -28.0094 *lens_ipow(begin_dx, 4)*begin_dy*lens_ipow(begin_lambda, 3) + -0.0164122 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + -0.16416 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 3) + -0.0279546 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + -2.18418e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_lambda + -203.867 *lens_ipow(begin_dy, 7)*lens_ipow(begin_lambda, 2) + -0.000223086 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 6) + -8.89977e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 2) + 2.47058 *begin_dy*lens_ipow(begin_lambda, 10) + 0.021674 *begin_y*lens_ipow(begin_lambda, 10);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 131.941  + 6.79418e-05 *begin_x + 31.7351 *lens_ipow(begin_dy, 2) + 96.675 *lens_ipow(begin_dx, 2) + 1.28139 *begin_y*begin_dy + 0.00677532 *lens_ipow(begin_y, 2) + 4.07347 *begin_x*begin_dx + 0.0215743 *lens_ipow(begin_x, 2) + 0.12077 *lens_ipow(begin_lambda, 4) + -0.719317 *begin_x*begin_dx*lens_ipow(begin_lambda, 4) + 0.62166 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.534052 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4) + 0.000404743 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 2.82284e-07 *lens_ipow(begin_x, 5)*begin_dx + -0.00393656 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 5) + -1666.86 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -5.48584 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6) + -2310.23 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 5) + -31.5578 *begin_y*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 6)+0.0f;
  dx1_domega0[0][1] =  + -0.00496536 *begin_dy + 3.05647e-05 *begin_x + 63.4702 *begin_dx*begin_dy + 1.28139 *begin_y*begin_dx + 1.44371 *begin_x*begin_dy + 0.0146307 *begin_x*begin_y + -4.70837e-07 *begin_x*lens_ipow(begin_y, 2) + 8.16031e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 9.11649e-10 *begin_x*lens_ipow(begin_y, 5) + 0.41444 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*begin_dy + 0.000134914 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 1.33051e-07 *lens_ipow(begin_x, 5)*begin_dy + -0.00128574 *begin_x*begin_y*lens_ipow(begin_lambda, 5) + -1111.24 *lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 4) + -11.0012 *begin_x*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 5) + -10.5193 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 6)+0.0f;
  dx1_domega0[1][0] =  + 2.72166e-05 *begin_y + 3.04161e-05 *begin_x + 64.0799 *begin_dx*begin_dy + 1.4511 *begin_y*begin_dx + 1.29155 *begin_x*begin_dy + 0.0147175 *begin_x*begin_y + 7.46701e-05 *lens_ipow(begin_y, 2)*begin_dx + 0.000147816 *lens_ipow(begin_x, 2)*begin_y*begin_dx + -42.0566 *begin_x*lens_ipow(begin_dx, 4)*begin_dy + -0.00171867 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + 1.41059e-09 *lens_ipow(begin_x, 5)*begin_y + -0.00247691 *begin_x*begin_y*lens_ipow(begin_lambda, 5) + -7.73829e-05 *lens_ipow(begin_x, 3)*begin_dy*lens_ipow(begin_lambda, 3) + -15.0908 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 4) + 8.21199e-06 *lens_ipow(begin_y, 5)*begin_dx*lens_ipow(begin_dy, 2) + -2231.63 *lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 5) + 10553.4 *begin_y*lens_ipow(begin_dx, 9) + -0.512701 *begin_x*begin_dy*lens_ipow(begin_lambda, 8)+0.0f;
  dx1_domega0[1][1] =  + 131.943  + 97.1542 *lens_ipow(begin_dy, 2) + 32.0399 *lens_ipow(begin_dx, 2) + 4.06449 *begin_y*begin_dy + 0.021516 *lens_ipow(begin_y, 2) + 1.29155 *begin_x*begin_dx + 0.00679404 *lens_ipow(begin_x, 2) + 0.0743001 *lens_ipow(begin_lambda, 4) + -0.607341 *begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 0.255267 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + -8.41132 *begin_x*lens_ipow(begin_dx, 5) + -0.00515601 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.00326215 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 5) + -7.73829e-05 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_lambda, 3) + -1327.58 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 4) + 8.21199e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2)*begin_dy + -557.907 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 5) + -0.000122011 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -0.512701 *begin_x*begin_dx*lens_ipow(begin_lambda, 8)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
