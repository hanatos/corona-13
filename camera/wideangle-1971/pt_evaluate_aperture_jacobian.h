const float dx00 =  + 0.760868  + 3.05647e-05 *dy + 6.79418e-05 *dx + -5.21674e-07 *y + 8.66217e-07 *x + 0.721853 *lens_ipow(dy, 2) + 2.03673 *lens_ipow(dx, 2) + 0.0146307 *y*dy + 6.14833e-05 *lens_ipow(y, 2) + 0.0431486 *x*dx + 0.000185712 *lens_ipow(x, 2) + -0.0115372 *lens_ipow(lambda, 3) + -4.70837e-07 *lens_ipow(y, 2)*dy + 4.08016e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.59964e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.359659 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + 9.11649e-10 *lens_ipow(y, 5)*dy + 0.41444 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.213621 *x*lens_ipow(dx, 5) + 0.000269829 *x*y*lens_ipow(dx, 3)*dy + 3.32627e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 7.05711e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.00128574 *y*dy*lens_ipow(lambda, 5) + -0.00787312 *x*dx*lens_ipow(lambda, 5) + -2.75031 *lens_ipow(dy, 4)*lens_ipow(lambda, 5) + -1.65174e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 5) + 0.0659771 *lens_ipow(lambda, 10)+0.0f;
const float dx01 =  + 1.47919e-06  + -5.21674e-07 *x + 1.28139 *dx*dy + 0.0135506 *y*dx + 0.0146307 *x*dy + 0.000122967 *x*y + -9.41674e-07 *x*y*dy + 8.16031e-05 *x*y*lens_ipow(dy, 2) + -1.06643e-09 *lens_ipow(x, 3)*y + 4.55824e-09 *x*lens_ipow(y, 4)*dy + 0.000134914 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -0.00128574 *x*dy*lens_ipow(lambda, 5) + -1.56738 *y*lens_ipow(dx, 7) + -10.5193 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx02 =  + 131.941  + 6.79418e-05 *x + 31.7351 *lens_ipow(dy, 2) + 96.675 *lens_ipow(dx, 2) + 1.28139 *y*dy + 0.00677532 *lens_ipow(y, 2) + 4.07347 *x*dx + 0.0215743 *lens_ipow(x, 2) + 0.12077 *lens_ipow(lambda, 4) + -0.719317 *x*dx*lens_ipow(lambda, 4) + 0.62166 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.534052 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 0.000404743 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 2.82284e-07 *lens_ipow(x, 5)*dx + -0.00393656 *lens_ipow(x, 2)*lens_ipow(lambda, 5) + -1666.86 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -5.48584 *lens_ipow(y, 2)*lens_ipow(dx, 6) + -2310.23 *lens_ipow(dx, 4)*lens_ipow(lambda, 5) + -31.5578 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx03 =  + -0.00496536 *dy + 3.05647e-05 *x + 63.4702 *dx*dy + 1.28139 *y*dx + 1.44371 *x*dy + 0.0146307 *x*y + -4.70837e-07 *x*lens_ipow(y, 2) + 8.16031e-05 *x*lens_ipow(y, 2)*dy + 9.11649e-10 *x*lens_ipow(y, 5) + 0.41444 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 0.000134914 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 1.33051e-07 *lens_ipow(x, 5)*dy + -0.00128574 *x*y*lens_ipow(lambda, 5) + -1111.24 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 4) + -11.0012 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 5) + -10.5193 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 6)+0.0f;
const float dx04 =  + -0.0346116 *x*lens_ipow(lambda, 2) + 0.483079 *dx*lens_ipow(lambda, 3) + -1.43863 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.00642872 *x*y*dy*lens_ipow(lambda, 4) + -0.0196828 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 4) + -2222.48 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -2310.23 *lens_ipow(dx, 5)*lens_ipow(lambda, 4) + -13.7516 *x*lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -1.65174e-07 *lens_ipow(x, 5)*lens_ipow(lambda, 4) + -63.1156 *y*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 5) + 0.659771 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + 4.46534e-07  + 3.04161e-05 *dx + 4.35454e-07 *y + 1.29155 *dx*dy + 0.0147175 *y*dx + 0.0135881 *x*dy + 0.00012251 *x*y + 0.000147816 *x*y*lens_ipow(dx, 2) + 4.69265e-09 *x*lens_ipow(y, 3) + -8.41132 *lens_ipow(dx, 5)*dy + -0.00171867 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 7.05293e-09 *lens_ipow(x, 4)*y*dx + -0.00247691 *y*dx*lens_ipow(lambda, 5) + -0.000232149 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 3) + -0.000162681 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -0.512701 *dx*dy*lens_ipow(lambda, 8) + -1.17141e-07 *x*lens_ipow(y, 3)*lens_ipow(lambda, 6)+0.0f;
const float dx11 =  + 0.760961  + 2.72166e-05 *dx + -1.25318e-06 *y + 4.35454e-07 *x + 2.03225 *lens_ipow(dy, 2) + 0.725552 *lens_ipow(dx, 2) + 0.0430319 *y*dy + 0.000184388 *lens_ipow(y, 2) + 0.0147175 *x*dx + 6.12551e-05 *lens_ipow(x, 2) + -0.0119604 *lens_ipow(lambda, 3) + 7.46701e-05 *y*lens_ipow(dx, 2) + 7.39082e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 7.03897e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.30367 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 0.102107 *y*lens_ipow(dy, 5) + -0.00343734 *x*y*dx*lens_ipow(dy, 3) + 1.41059e-09 *lens_ipow(x, 5)*dx + -0.00652429 *y*dy*lens_ipow(lambda, 5) + -0.00247691 *x*dx*lens_ipow(lambda, 5) + -3.7727 *lens_ipow(dx, 4)*lens_ipow(lambda, 4) + 2.053e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0658052 *lens_ipow(lambda, 10) + 1055.34 *lens_ipow(dx, 10) + -1.75712e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 6)+0.0f;
const float dx12 =  + 2.72166e-05 *y + 3.04161e-05 *x + 64.0799 *dx*dy + 1.4511 *y*dx + 1.29155 *x*dy + 0.0147175 *x*y + 7.46701e-05 *lens_ipow(y, 2)*dx + 0.000147816 *lens_ipow(x, 2)*y*dx + -42.0566 *x*lens_ipow(dx, 4)*dy + -0.00171867 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 1.41059e-09 *lens_ipow(x, 5)*y + -0.00247691 *x*y*lens_ipow(lambda, 5) + -7.73829e-05 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 3) + -15.0908 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 4) + 8.21199e-06 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + -2231.63 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 5) + 10553.4 *y*lens_ipow(dx, 9) + -0.512701 *x*dy*lens_ipow(lambda, 8)+0.0f;
const float dx13 =  + 131.943  + 97.1542 *lens_ipow(dy, 2) + 32.0399 *lens_ipow(dx, 2) + 4.06449 *y*dy + 0.021516 *lens_ipow(y, 2) + 1.29155 *x*dx + 0.00679404 *lens_ipow(x, 2) + 0.0743001 *lens_ipow(lambda, 4) + -0.607341 *y*dy*lens_ipow(lambda, 4) + 0.255267 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -8.41132 *x*lens_ipow(dx, 5) + -0.00515601 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.00326215 *lens_ipow(y, 2)*lens_ipow(lambda, 5) + -7.73829e-05 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 3) + -1327.58 *lens_ipow(dy, 4)*lens_ipow(lambda, 4) + 8.21199e-06 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy + -557.907 *lens_ipow(dx, 4)*lens_ipow(lambda, 5) + -0.000122011 *lens_ipow(x, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.512701 *x*dx*lens_ipow(lambda, 8)+0.0f;
const float dx14 =  + -0.0358812 *y*lens_ipow(lambda, 2) + 0.2972 *dy*lens_ipow(lambda, 3) + -1.21468 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.0163107 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 4) + -0.0123846 *x*y*dx*lens_ipow(lambda, 4) + -0.000232149 *lens_ipow(x, 3)*dx*dy*lens_ipow(lambda, 2) + -1062.07 *lens_ipow(dy, 5)*lens_ipow(lambda, 3) + -15.0908 *y*lens_ipow(dx, 4)*lens_ipow(lambda, 3) + -2789.54 *lens_ipow(dx, 4)*dy*lens_ipow(lambda, 4) + -0.000122011 *lens_ipow(x, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.658052 *y*lens_ipow(lambda, 9) + -4.10161 *x*dx*dy*lens_ipow(lambda, 7) + -3.51424e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(lambda, 5)+0.0f;
const float dx20 =  + -0.00132365  + 2.23365e-05 *dx + -2.97453e-08 *y + 2.10186e-07 *x + 0.0239438 *lens_ipow(dy, 2) + 0.0740722 *lens_ipow(dx, 2) + 0.00041325 *y*dy + 3.61309e-07 *y*dx + 1.75436e-06 *lens_ipow(y, 2) + 0.00128822 *x*dx + 5.47084e-06 *lens_ipow(x, 2) + -8.80277e-08 *x*y*dy + -0.00442241 *lens_ipow(lambda, 4) + -8.05125e-06 *x*y*dx*dy + -0.000280941 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0258973 *x*lens_ipow(dx, 5) + -3.39556e-07 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -2.54427e-10 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.0481691 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + -2.58315e-06 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 4) + -1.21974 *lens_ipow(dy, 6)*lens_ipow(lambda, 3) + 0.0223832 *lens_ipow(lambda, 10) + -4.78816e-11 *lens_ipow(x, 6)*lens_ipow(lambda, 4)+0.0f;
const float dx21 =  + -1.26279e-06  + -1.07365e-07 *y + -2.97453e-08 *x + 0.0480135 *dx*dy + 0.000423671 *y*dx + 0.00041325 *x*dy + 3.61309e-07 *x*dx + 3.50871e-06 *x*y + -4.40139e-08 *lens_ipow(x, 2)*dy + 0.000273507 *y*lens_ipow(dx, 3) + 1.74546e-10 *lens_ipow(y, 4) + -4.02563e-06 *lens_ipow(x, 2)*dx*dy + -0.000561883 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.39556e-07 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + -2.54427e-10 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -0.0171254 *dx*dy*lens_ipow(lambda, 5)+0.0f;
const float dx22 =  + 1.09885  + 0.00245301 *dx + 2.23365e-05 *x + 3.24245 *lens_ipow(dy, 2) + 9.84855 *lens_ipow(dx, 2) + 0.0480135 *y*dy + 0.000211836 *lens_ipow(y, 2) + 0.148144 *x*dx + 3.61309e-07 *x*y + 0.000644108 *lens_ipow(x, 2) + -0.473722 *lens_ipow(lambda, 3) + 0.000410261 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -4.02563e-06 *lens_ipow(x, 2)*y*dy + -38.6858 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000561883 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.0647431 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -1.69778e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -155.994 *lens_ipow(dx, 4)*lens_ipow(lambda, 3) + -0.0171254 *y*dy*lens_ipow(lambda, 5) + -0.0963383 *x*dx*lens_ipow(lambda, 5) + -30.853 *lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -6.45788e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 4) + 2.47465 *lens_ipow(lambda, 10)+0.0f;
const float dx23 =  + 6.4849 *dx*dy + 0.0480135 *y*dx + 0.0478876 *x*dy + 0.00041325 *x*y + -4.40139e-08 *lens_ipow(x, 2)*y + -4.02563e-06 *lens_ipow(x, 2)*y*dx + -25.7905 *lens_ipow(dx, 3)*dy*lambda + -0.000561883 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -8.4809e-11 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0171254 *y*dx*lens_ipow(lambda, 5) + -123.412 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -7.31846 *x*lens_ipow(dy, 5)*lens_ipow(lambda, 3)+0.0f;
const float dx24 =  + -1.42117 *dx*lens_ipow(lambda, 2) + -0.0176896 *x*lens_ipow(lambda, 3) + -12.8953 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -3.39556e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lambda + -93.5964 *lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -0.0856272 *y*dx*dy*lens_ipow(lambda, 4) + -0.240846 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -123.412 *dx*lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -2.58315e-06 *lens_ipow(x, 4)*dx*lens_ipow(lambda, 3) + -3.65923 *x*lens_ipow(dy, 6)*lens_ipow(lambda, 2) + 24.7465 *dx*lens_ipow(lambda, 9) + 0.223832 *x*lens_ipow(lambda, 9) + -2.73609e-11 *lens_ipow(x, 7)*lens_ipow(lambda, 3)+0.0f;
const float dx30 =  + 1.87268e-06  + 1.20334e-05 *dy + 4.17942e-08 *y + 0.0488996 *dx*dy + 0.00042194 *y*dx + 0.000425584 *x*dy + 3.59306e-06 *x*y + -3.23214e-08 *lens_ipow(x, 2) + 1.61301e-05 *x*dx*dy + -2.44116e-06 *lens_ipow(y, 2)*dx*dy + 0.00026215 *x*lens_ipow(dy, 3) + -0.000707508 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.18444e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -0.0279546 *dx*dy*lens_ipow(lambda, 5) + -4.36836e-12 *x*lens_ipow(y, 5)*lambda + -0.000223086 *y*dx*lens_ipow(lambda, 6) + -1.77995e-09 *x*lens_ipow(y, 4)*dy*lens_ipow(lambda, 2)+0.0f;
const float dx31 =  + -0.00132423  + -1.64542e-05 *dy + -2.48386e-07 *y + 4.17942e-08 *x + 0.0723735 *lens_ipow(dy, 2) + 0.0244675 *lens_ipow(dx, 2) + 0.00124812 *y*dy + 5.4766e-06 *lens_ipow(y, 2) + 0.00042194 *x*dx + 1.79653e-06 *lens_ipow(x, 2) + -0.00445144 *lens_ipow(lambda, 4) + 0.00142088 *y*lens_ipow(dy, 3) + -4.88232e-06 *x*y*dx*dy + -0.000353754 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -7.28148e-07 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -0.0164122 *lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -0.16416 *lens_ipow(dx, 4)*lens_ipow(lambda, 3) + -1.09209e-11 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + -0.000223086 *x*dx*lens_ipow(lambda, 6) + -3.55991e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 0.021674 *lens_ipow(lambda, 10)+0.0f;
const float dx32 =  + -2.3823e-05  + 6.64213 *dx*dy + 0.0489351 *y*dx + 0.0488996 *x*dy + 0.00042194 *x*y + 8.06506e-06 *lens_ipow(x, 2)*dy + -2.44116e-06 *x*lens_ipow(y, 2)*dy + -29.7932 *dx*lens_ipow(dy, 3)*lambda + -0.000707508 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -2.18444e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -112.038 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 3) + -0.656641 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -0.0279546 *x*dy*lens_ipow(lambda, 5) + -0.000223086 *x*y*lens_ipow(lambda, 6)+0.0f;
const float dx33 =  + 1.10012  + -0.00167736 *dy + -1.64542e-05 *y + 1.20334e-05 *x + 9.49085 *lens_ipow(dy, 2) + 3.32107 *lens_ipow(dx, 2) + 0.144747 *y*dy + 0.000624062 *lens_ipow(y, 2) + 0.0488996 *x*dx + 0.000212792 *lens_ipow(x, 2) + -0.477853 *lens_ipow(lambda, 3) + 8.06506e-06 *lens_ipow(x, 2)*dx + 0.00213132 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -2.44116e-06 *x*lens_ipow(y, 2)*dx + 0.000393225 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -44.6899 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000707508 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -28.0094 *lens_ipow(dx, 4)*lens_ipow(lambda, 3) + -0.0328243 *y*dy*lens_ipow(lambda, 5) + -0.0279546 *x*dx*lens_ipow(lambda, 5) + -1427.07 *lens_ipow(dy, 6)*lens_ipow(lambda, 2) + -8.89977e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(lambda, 2) + 2.47058 *lens_ipow(lambda, 10)+0.0f;
const float dx34 =  + -1.43356 *dy*lens_ipow(lambda, 2) + -0.0178058 *y*lens_ipow(lambda, 3) + -14.8966 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -84.0283 *lens_ipow(dx, 4)*dy*lens_ipow(lambda, 2) + -0.0820608 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -0.492481 *y*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -0.139773 *x*dx*dy*lens_ipow(lambda, 4) + -2.18418e-12 *lens_ipow(x, 2)*lens_ipow(y, 5) + -407.734 *lens_ipow(dy, 7)*lambda + -0.00133851 *x*y*dx*lens_ipow(lambda, 5) + -1.77995e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy*lambda + 24.7058 *dy*lens_ipow(lambda, 9) + 0.21674 *y*lens_ipow(lambda, 9)+0.0f;
const float dx40 =  + -1.3086e-07  + -0.000134304 *dx + -2.0486e-06 *x + -0.0263453 *dx*lens_ipow(dy, 2) + -0.0323309 *lens_ipow(dx, 3) + -0.000360829 *y*dx*dy + -1.34622e-06 *lens_ipow(y, 2)*dx + -0.000551412 *x*lens_ipow(dx, 2) + -2.22519e-06 *x*y*dy + -3.25091e-06 *lens_ipow(x, 2)*dx + 0.00447409 *y*dx*lens_ipow(dy, 3) + 1.40578e-05 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -1.07558e-07 *lens_ipow(y, 3)*dx*dy + -0.00499776 *x*lens_ipow(dy, 4) + -3.62367e-11 *x*lens_ipow(y, 4) + -4.94531e-05 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -4.49025e-11 *lens_ipow(x, 5) + 3.53204e-07 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy + -524.018 *lens_ipow(dx, 3)*lens_ipow(dy, 6) + 2.75165 *y*lens_ipow(dx, 7)*dy+0.0f;
const float dx41 =  + 7.41546e-08  + -0.000136496 *dy + -2.30276e-06 *y + -0.0298565 *lens_ipow(dy, 3) + -0.0331792 *lens_ipow(dx, 2)*dy + -0.000514611 *y*lens_ipow(dy, 2) + -0.000156836 *y*lens_ipow(dx, 2) + -3.16567e-06 *lens_ipow(y, 2)*dy + -0.000360829 *x*dx*dy + -2.69244e-06 *x*y*dx + -1.11259e-06 *lens_ipow(x, 2)*dy + -3.38442e-05 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 0.00447409 *x*dx*lens_ipow(dy, 3) + 2.81156e-05 *x*y*lens_ipow(dx, 3) + -3.22674e-07 *x*lens_ipow(y, 2)*dx*dy + -7.24733e-11 *lens_ipow(x, 2)*lens_ipow(y, 3) + 8.83009e-08 *lens_ipow(x, 4)*lens_ipow(dx, 2)*dy + 2.75165 *x*lens_ipow(dx, 7)*dy+0.0f;
const float dx42 =  + -2.80591e-05  + -0.0862399 *dx + -0.000134304 *x + -0.0663584 *y*dx*dy + -0.000156836 *lens_ipow(y, 2)*dx + -0.0263453 *x*lens_ipow(dy, 2) + -0.0969928 *x*lens_ipow(dx, 2) + -0.000360829 *x*y*dy + -1.34622e-06 *x*lens_ipow(y, 2) + -0.000551412 *lens_ipow(x, 2)*dx + -1.08364e-06 *lens_ipow(x, 3) + -187.971 *dx*lens_ipow(dy, 4) + -339.822 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -179.4 *lens_ipow(dx, 5) + 0.00447409 *x*y*lens_ipow(dy, 3) + 4.21734e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.07558e-07 *x*lens_ipow(y, 3)*dy + -4.94531e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 1.76602e-07 *lens_ipow(x, 4)*y*dx*dy + -1572.05 *x*lens_ipow(dx, 2)*lens_ipow(dy, 6) + 19.2616 *x*y*lens_ipow(dx, 6)*dy+0.0f;
const float dx43 =  + -0.0919505 *dy + -0.000136496 *y + -0.0895694 *y*lens_ipow(dy, 2) + -0.0331792 *y*lens_ipow(dx, 2) + -0.000514611 *lens_ipow(y, 2)*dy + -1.05522e-06 *lens_ipow(y, 3) + -0.0526905 *x*dx*dy + -0.000360829 *x*y*dx + -1.11259e-06 *lens_ipow(x, 2)*y + -143.637 *lens_ipow(dy, 5) + -375.941 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -169.911 *lens_ipow(dx, 4)*dy + -3.38442e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.0134223 *x*y*dx*lens_ipow(dy, 2) + -1.07558e-07 *x*lens_ipow(y, 3)*dx + -0.00999552 *lens_ipow(x, 2)*lens_ipow(dy, 3) + 8.83009e-08 *lens_ipow(x, 4)*y*lens_ipow(dx, 2) + -3144.1 *x*lens_ipow(dx, 3)*lens_ipow(dy, 5) + 2.75165 *x*y*lens_ipow(dx, 7)+0.0f;
const float dx44 =  + 0.236684  + -0.592818 *lens_ipow(lambda, 2) + 3.91336 *lens_ipow(lambda, 10)+0.0f;
