const float dx00 =  + 0.808035  + -1.56745e-06 *y + 0.14674 *lens_ipow(dy, 2) + 0.0112868 *y*dy + 0.000141138 *lens_ipow(y, 2) + 0.024359 *x*dx + 0.000389264 *lens_ipow(x, 2) + 0.0157898 *lens_ipow(lambda, 3) + 0.000239042 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00127825 *x*dx*lens_ipow(lambda, 2) + 0.000823162 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00866087 *lens_ipow(dx, 2)*lens_ipow(dy, 6) + 2.42675e-10 *lens_ipow(x, 7)*dx + 0.00750191 *x*y*lens_ipow(dx, 7)*dy + -1.30534e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dy, 3) + -3.25737e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dx, 2) + 1.27085e-09 *lens_ipow(x, 6)*lens_ipow(lambda, 4)+0.0f;
const float dx01 =  + 5.52046e-07  + -1.56745e-06 *x + 0.00650523 *y*dx + 0.0112868 *x*dy + 0.000282276 *x*y + -0.0818127 *lens_ipow(dx, 3)*dy + -0.00705803 *y*dx*lens_ipow(dy, 2) + 0.000478084 *x*y*lens_ipow(dx, 2) + 0.0336336 *y*lens_ipow(dx, 7) + 0.445589 *dx*lens_ipow(dy, 9) + -2.65823e-07 *lens_ipow(y, 5)*lens_ipow(dx, 5) + 3.85742e-13 *lens_ipow(y, 9)*dx + 0.00375095 *lens_ipow(x, 2)*lens_ipow(dx, 7)*dy + -2.17557e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dy, 3) + -2.60589e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const float dx02 =  + 38.4939  + -0.00465678 *dx + 1.13603 *lens_ipow(lambda, 2) + -8.94836 *lens_ipow(dy, 2) + -33.866 *lens_ipow(dx, 2) + 0.00325261 *lens_ipow(y, 2) + 0.0121795 *lens_ipow(x, 2) + 0.0221718 *lens_ipow(dy, 3) + -0.0636495 *lens_ipow(dx, 2)*dy + 0.0266191 *lens_ipow(dx, 3)*dy + 16.0113 *lens_ipow(dx, 4) + -0.245438 *y*lens_ipow(dx, 2)*dy + -0.00352902 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000478084 *x*lens_ipow(y, 2)*dx + 0.000639126 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.000548775 *lens_ipow(x, 3)*dx + 9.3389 *lens_ipow(dy, 6) + 82.0726 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -1.36058 *lens_ipow(lambda, 7) + -2.12751 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + 0.117718 *lens_ipow(y, 2)*lens_ipow(dx, 6) + 0.0173217 *x*dx*lens_ipow(dy, 6) + 3.03344e-11 *lens_ipow(x, 8) + 33.7938 *lens_ipow(dx, 10) + 0.445589 *y*lens_ipow(dy, 9) + -2.21519e-07 *lens_ipow(y, 6)*lens_ipow(dx, 4) + 3.85742e-14 *lens_ipow(y, 10) + 0.0262567 *lens_ipow(x, 2)*y*lens_ipow(dx, 6)*dy + -1.30295e-11 *lens_ipow(x, 5)*lens_ipow(y, 4)*dx+0.0f;
const float dx03 =  + -17.8967 *dx*dy + 0.293479 *x*dy + 0.0112868 *x*y + 0.0665154 *dx*lens_ipow(dy, 2) + -0.0212165 *lens_ipow(dx, 3) + 0.00665478 *lens_ipow(dx, 4) + -0.0818127 *y*lens_ipow(dx, 3) + -0.00705803 *lens_ipow(y, 2)*dx*dy + 56.0334 *dx*lens_ipow(dy, 5) + 32.829 *lens_ipow(dx, 5)*dy + 0.0519652 *x*lens_ipow(dx, 2)*lens_ipow(dy, 5) + 4.0103 *y*dx*lens_ipow(dy, 8) + 0.00375095 *lens_ipow(x, 2)*y*lens_ipow(dx, 7) + -1.30534e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dy, 2)+0.0f;
const float dx04 =  + 2.27207 *dx*lambda + 0.0473695 *x*lens_ipow(lambda, 2) + 0.00127825 *lens_ipow(x, 2)*dx*lambda + -9.52404 *dx*lens_ipow(lambda, 6) + -3.54585 *lens_ipow(dx, 3)*lens_ipow(lambda, 4) + 7.26198e-10 *lens_ipow(x, 7)*lens_ipow(lambda, 3)+0.0f;
const float dx10 =  + -4.9063e-05 *dy + 0.000166233 *dx + 0.0113582 *y*dx + 0.0070483 *x*dy + 0.000296154 *x*y + -0.0332369 *dx*lens_ipow(dy, 3) + -3.93619e-05 *lens_ipow(y, 2)*dx*dy + -0.00753639 *x*lens_ipow(dx, 2)*dy + 0.000467671 *x*y*lens_ipow(dy, 2) + 0.0233767 *x*lens_ipow(dy, 7) + 0.00313065 *lens_ipow(y, 2)*dx*lens_ipow(dy, 7) + -0.000239807 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -2.6372e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dy, 2) + -2.03789e-06 *lens_ipow(x, 4)*dx*dy*lens_ipow(lambda, 4) + -8.28987e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 3)+0.0f;
const float dx11 =  + 0.809858  + 0.000112878 *dy + 0.141577 *lens_ipow(dx, 2) + 0.0218458 *y*dy + 0.00034537 *lens_ipow(y, 2) + 0.0113582 *x*dx + 0.000148077 *lens_ipow(x, 2) + 0.00033454 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -7.87238e-05 *x*y*dx*dy + 0.000233835 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00825841 *lens_ipow(dx, 6) + 4.27076e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.0666773 *lens_ipow(lambda, 8) + 0.000510274 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + 1.45987e-07 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 3) + 0.00324153 *lens_ipow(y, 2)*lens_ipow(dy, 6)*lens_ipow(lambda, 2) + 0.0062613 *x*y*dx*lens_ipow(dy, 7) + -7.99358e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -3.2965e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dy, 2) + -4.97392e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 3)+0.0f;
const float dx12 =  + -0.000396378  + 0.000166233 *x + -18.9979 *dx*dy + 0.283154 *y*dx + 0.0113582 *x*y + 16.3035 *lens_ipow(dx, 3)*dy + -0.0332369 *x*lens_ipow(dy, 3) + -3.93619e-05 *x*lens_ipow(y, 2)*dy + -0.00753639 *lens_ipow(x, 2)*dx*dy + 35.8298 *dx*lens_ipow(dy, 5) + 0.0495505 *y*lens_ipow(dx, 5) + 1.7083e-07 *lens_ipow(y, 5)*dx + 0.629434 *dx*lens_ipow(dy, 6) + 48.1258 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 0.000340183 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 4) + 0.00313065 *x*lens_ipow(y, 2)*lens_ipow(dy, 7) + -0.000239807 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -4.07579e-07 *lens_ipow(x, 5)*dy*lens_ipow(lambda, 4) + -4.97392e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const float dx13 =  + 38.6818  + 0.000112878 *y + -4.9063e-05 *x + -31.9943 *lens_ipow(dy, 2) + -9.49893 *lens_ipow(dx, 2) + 0.0109229 *lens_ipow(y, 2) + 0.00352415 *lens_ipow(x, 2) + 1.22435 *lens_ipow(lambda, 4) + 4.07587 *lens_ipow(dx, 4) + 0.000223026 *lens_ipow(y, 3)*dy + -0.0997106 *x*dx*lens_ipow(dy, 2) + -3.93619e-05 *x*lens_ipow(y, 2)*dx + -0.0037682 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000467671 *lens_ipow(x, 2)*y*dy + 24.188 *lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 89.5746 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 1.8883 *lens_ipow(dx, 2)*lens_ipow(dy, 5) + 55.0576 *lens_ipow(dy, 8) + 24.0629 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + 0.0818183 *lens_ipow(x, 2)*lens_ipow(dy, 6) + 2.43312e-08 *lens_ipow(y, 6)*lens_ipow(lambda, 3) + -31.1849 *lens_ipow(dy, 2)*lens_ipow(lambda, 8) + 0.00648306 *lens_ipow(y, 3)*lens_ipow(dy, 5)*lens_ipow(lambda, 2) + 0.0219146 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 6) + -0.000319743 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -1.3186e-11 *lens_ipow(x, 4)*lens_ipow(y, 5)*dy + -4.07579e-07 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 4)+0.0f;
const float dx14 =  + 4.89742 *dy*lens_ipow(lambda, 3) + 9.67521 *lens_ipow(dy, 5)*lambda + 0.533418 *y*lens_ipow(lambda, 7) + 0.000680365 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 7.29937e-08 *lens_ipow(y, 6)*dy*lens_ipow(lambda, 2) + -83.1597 *lens_ipow(dy, 3)*lens_ipow(lambda, 7) + 0.00216102 *lens_ipow(y, 3)*lens_ipow(dy, 6)*lambda + -1.63031e-06 *lens_ipow(x, 5)*dx*dy*lens_ipow(lambda, 3)+0.0f;
const float dx20 =  + -0.0492188  + 1.70815e-06 *dy + -5.40972e-07 *x + -0.0504185 *lens_ipow(dy, 2) + -0.0819684 *lens_ipow(dx, 2) + -0.00250089 *y*dy + -2.63877e-05 *lens_ipow(y, 2) + -0.00385553 *x*dx + -3.66417e-05 *lens_ipow(x, 2) + 0.00795007 *lens_ipow(lambda, 4) + -0.00104939 *lens_ipow(dy, 4) + -2.44319e-05 *x*y*dx*dy + 1.65926e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.25756e-05 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 7.50092e-06 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -5.70417e-05 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -8.77615e-12 *lens_ipow(x, 7)*dx + -0.0384944 *lens_ipow(lambda, 10) + 0.00145553 *y*lens_ipow(dx, 6)*dy*lens_ipow(lambda, 2) + 1.59975e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx21 =  + 1.71298e-09  + -0.0933151 *dx*dy + -0.00216578 *y*dx + -0.00250089 *x*dy + -5.27754e-05 *x*y + -0.0027988 *lens_ipow(dx, 3)*dy + -2.69104e-05 *lens_ipow(dx, 4) + -1.22159e-05 *lens_ipow(x, 2)*dx*dy + 1.10617e-08 *lens_ipow(x, 3)*y + 2.07707e-06 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -7.91676e-12 *lens_ipow(y, 7)*dx + -0.000627045 *y*lens_ipow(dx, 9) + 0.00145553 *x*lens_ipow(dx, 6)*dy*lens_ipow(lambda, 2) + 1.0665e-07 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx22 =  + -1.13552  + -0.000173564 *dx + -1.98465 *lens_ipow(dy, 2) + -3.75294 *lens_ipow(dx, 2) + -0.0933151 *y*dy + -0.00108289 *lens_ipow(y, 2) + -0.163937 *x*dx + -0.00192777 *lens_ipow(x, 2) + 0.169351 *lens_ipow(lambda, 3) + -0.00839641 *y*lens_ipow(dx, 2)*dy + -0.000107642 *y*lens_ipow(dx, 3) + -1.22159e-05 *lens_ipow(x, 2)*y*dy + -0.985106 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 5.19268e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -7.60555e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -0.240531 *lens_ipow(dx, 2)*lens_ipow(dy, 6) + -9.89596e-13 *lens_ipow(y, 8) + -1.09702e-12 *lens_ipow(x, 8) + -0.879262 *lens_ipow(lambda, 10) + -0.137924 *lens_ipow(dy, 10) + -2.4655 *lens_ipow(dx, 10) + -0.0028217 *lens_ipow(y, 2)*lens_ipow(dx, 8) + 0.0087332 *x*y*lens_ipow(dx, 5)*dy*lens_ipow(lambda, 2) + 1.0665e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 4)+0.0f;
const float dx23 =  + -0.000461623 *dy + 1.70815e-06 *x + -3.9693 *dx*dy + -0.0933151 *y*dx + -0.100837 *x*dy + -0.00250089 *x*y + -0.0027988 *y*lens_ipow(dx, 3) + -0.00419755 *x*lens_ipow(dy, 3) + -1.22159e-05 *lens_ipow(x, 2)*y*dx + 1.25756e-05 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 2) + -0.394042 *lens_ipow(dx, 5)*dy + 1.03854e-06 *lens_ipow(y, 4)*dx*dy + 1.00012e-05 *lens_ipow(x, 3)*lens_ipow(dy, 3) + -0.481062 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + -1.37924 *dx*lens_ipow(dy, 9) + 0.00145553 *x*y*lens_ipow(dx, 6)*lens_ipow(lambda, 2)+0.0f;
const float dx24 =  + 0.508052 *dx*lens_ipow(lambda, 2) + 0.0318003 *x*lens_ipow(lambda, 3) + 1.25756e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -8.79262 *dx*lens_ipow(lambda, 9) + -0.384944 *x*lens_ipow(lambda, 9) + 0.00291107 *x*y*lens_ipow(dx, 6)*dy*lambda + 2.133e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx30 =  + 2.05829e-06  + 1.37864e-08 *y + 0.00379349 *dx*dy + -0.000454984 *y*dx + 0.000610744 *x*dy + 5.79556e-06 *x*y + 0.00103283 *y*dx*lens_ipow(dy, 2) + -1.64125e-06 *x*lens_ipow(y, 2)*dy + -2.00279e-08 *x*lens_ipow(y, 3) + 0.00142132 *x*lens_ipow(dx, 4)*dy + -1.01358e-06 *x*y*dx*lens_ipow(dy, 4) + 0.00068186 *y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -3.17969e-09 *lens_ipow(x, 5)*lens_ipow(dy, 3) + 0.000429511 *y*dx*lens_ipow(dy, 8) + -1.65718e-14 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx31 =  + -0.0493509  + 3.3069e-07 *y + 1.37864e-08 *x + -0.0762816 *lens_ipow(dy, 2) + -0.0176375 *lens_ipow(dx, 2) + -0.00350028 *y*dy + -3.11864e-05 *lens_ipow(y, 2) + -0.000454984 *x*dx + 2.89778e-06 *lens_ipow(x, 2) + 0.0080274 *lens_ipow(lambda, 4) + -0.000297008 *y*lens_ipow(dx, 2)*dy + 0.00103283 *x*dx*lens_ipow(dy, 2) + -1.64125e-06 *lens_ipow(x, 2)*y*dy + -3.00418e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -6.18269e-05 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -5.06788e-07 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4) + -9.62162e-12 *lens_ipow(y, 7)*dy + 0.00068186 *x*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -0.0386125 *lens_ipow(lambda, 10) + -0.00220053 *lens_ipow(dx, 10) + 0.000429511 *x*dx*lens_ipow(dy, 8) + -1.84131e-15 *lens_ipow(x, 9)*dx+0.0f;
const float dx32 =  + -0.888615 *dx*dy + 0.000557404 *lens_ipow(dx, 2) + -0.035275 *y*dx + 0.00379349 *x*dy + -0.000454984 *x*y + -0.00196186 *lens_ipow(dx, 2)*dy + -0.000297008 *lens_ipow(y, 2)*dx*dy + 0.00103283 *x*y*lens_ipow(dy, 2) + -0.913186 *dx*lens_ipow(dy, 5) + 0.00284264 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -5.06788e-07 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -2.85471 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + -2.67521 *lens_ipow(dx, 7)*dy + 0.00204558 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.0220053 *y*lens_ipow(dx, 9) + 0.000429511 *x*y*lens_ipow(dy, 8) + -1.84131e-15 *lens_ipow(x, 9)*y+0.0f;
const float dx33 =  + -1.13523  + -0.000340449 *dy + -3.57048 *lens_ipow(dy, 2) + -0.444308 *lens_ipow(dx, 2) + -0.152563 *y*dy + -0.00175014 *lens_ipow(y, 2) + 0.00379349 *x*dx + 0.000305372 *lens_ipow(x, 2) + -0.000653953 *lens_ipow(dx, 3) + 0.265059 *lens_ipow(lambda, 4) + -0.000148504 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00206567 *x*y*dx*dy + -8.20623e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.28296 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -8.24359e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 0.000710661 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -2.02715e-06 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 3) + -1.42735 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + -0.334401 *lens_ipow(dx, 8) + -1.2027e-12 *lens_ipow(y, 8) + 0.00272744 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -1.58984e-09 *lens_ipow(x, 6)*lens_ipow(dy, 2) + -1.27064 *lens_ipow(lambda, 10) + -2.7529 *lens_ipow(dy, 10) + 0.00343609 *x*y*dx*lens_ipow(dy, 7)+0.0f;
const float dx34 =  + 1.06024 *dy*lens_ipow(lambda, 3) + 0.0321096 *y*lens_ipow(lambda, 3) + -12.7064 *dy*lens_ipow(lambda, 9) + -0.386125 *y*lens_ipow(lambda, 9)+0.0f;
const float dx40 =  + -9.97992e-07 *dy + -0.00112255 *dx + -1.72667e-05 *x + 0.00037023 *y*dx*dy + -2.91086e-07 *x*lens_ipow(y, 2) + -0.00679596 *lens_ipow(dx, 3)*lambda + -5.36462e-05 *x*lens_ipow(lambda, 4) + -2.65519e-10 *x*lens_ipow(y, 4) + 3.6663e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 1.31366e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -1.39988e-09 *lens_ipow(x, 5) + 4.52453e-08 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 4.43452e-07 *x*lens_ipow(y, 2)*lens_ipow(dy, 4) + 2.27321e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -9.00286e-15 *lens_ipow(x, 7)*lens_ipow(y, 2)+0.0f;
const float dx41 =  + -0.00153216 *dy + -3.79641e-05 *y + -2.63693e-05 *lens_ipow(dx, 3) + 7.21414e-05 *y*lens_ipow(dx, 2) + 0.00037023 *x*dx*dy + -2.91086e-07 *lens_ipow(x, 2)*y + 0.000253497 *y*lens_ipow(dy, 2)*lambda + 9.33016e-07 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -5.31037e-10 *lens_ipow(x, 2)*lens_ipow(y, 3) + 0.00218107 *dy*lens_ipow(lambda, 5) + 4.52453e-08 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -4.94557e-12 *lens_ipow(y, 7) + 4.43452e-07 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -5.04501e-05 *lens_ipow(y, 2)*lens_ipow(dy, 7) + 2.27321e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -2.25071e-15 *lens_ipow(x, 8)*y+0.0f;
const float dx42 =  + 2.32758e-05  + -0.0444232 *dx + -0.00112255 *x + -0.000667485 *lens_ipow(dy, 2) + -0.000946979 *lens_ipow(dy, 3) + -0.482783 *dx*lens_ipow(dy, 2) + -0.51853 *lens_ipow(dx, 3) + -7.9108e-05 *y*lens_ipow(dx, 2) + 7.21414e-05 *lens_ipow(y, 2)*dx + 0.00037023 *x*y*dy + -0.0203879 *x*lens_ipow(dx, 2)*lambda + -0.168384 *dx*lens_ipow(dy, 4) + -0.358535 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 6.5683e-07 *lens_ipow(x, 4)*dx + 2.26227e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.518671 *lens_ipow(dx, 7) + -0.974127 *lens_ipow(dx, 3)*lens_ipow(lambda, 5) + 4.54643e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx43 =  + -5.66651e-05  + -0.0737317 *dy + -0.00153216 *y + -9.97992e-07 *x + -0.00133497 *dx*dy + -0.00284094 *dx*lens_ipow(dy, 2) + -0.482783 *lens_ipow(dx, 2)*dy + 0.00037023 *x*y*dx + 0.000253497 *lens_ipow(y, 2)*dy*lambda + -1.27642 *lens_ipow(dy, 5) + -0.336768 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.179268 *lens_ipow(dx, 4)*dy + 4.66508e-07 *lens_ipow(y, 4)*dy + 1.83315e-07 *lens_ipow(x, 4)*dy + 0.00218107 *y*lens_ipow(lambda, 5) + 4.52453e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 8.86905e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.000117717 *lens_ipow(y, 3)*lens_ipow(dy, 6) + 2.27321e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4)*dy+0.0f;
const float dx44 =  + 0.076207 *lens_ipow(lambda, 2) + 0.000126749 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00679596 *x*lens_ipow(dx, 3) + -0.000107292 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 0.0109054 *y*dy*lens_ipow(lambda, 4) + -1.21766 *lens_ipow(dx, 4)*lens_ipow(lambda, 4) + -1.33607 *lens_ipow(lambda, 10)+0.0f;
