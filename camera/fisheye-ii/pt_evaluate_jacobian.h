const float dx00 =  + -1.44172  + 3.79666e-05 *x + 0.722517 *lens_ipow(dy, 2) + 1.88901 *lens_ipow(dx, 2) + 0.0499706 *y*dy + -0.000556658 *lens_ipow(y, 2) + 0.173309 *x*dx + -0.0016393 *lens_ipow(x, 2) + -0.26754 *lens_ipow(lambda, 3) + 6.16508e-05 *x*lens_ipow(y, 2)*dx + -0.116753 *y*lens_ipow(dy, 5) + -1.45818 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.49592 *y*lens_ipow(dx, 4)*dy + -0.0534739 *x*dx*lens_ipow(lambda, 4) + -0.000104694 *lens_ipow(x, 3)*y*dx*dy + 3.54291e-07 *lens_ipow(y, 5)*dy*lambda + 0.0759269 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.0205446 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -0.0655726 *y*dy*lens_ipow(lambda, 7) + -1.83075e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*lambda + -2.09671e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(lambda, 3) + -1.0105e-06 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lambda + -1.237e-10 *lens_ipow(x, 8)*lambda + 1.17814 *lens_ipow(lambda, 10) + -17.537 *lens_ipow(dx, 4)*lens_ipow(lambda, 6) + 0.00703605 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + 3.90223e-07 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 3) + 3.53504e-06 *lens_ipow(x, 6)*lens_ipow(dy, 4)+0.0f;
const float dx01 =  + 1.64495e-05 *y + 1.15799 *dx*dy + 0.0683739 *y*dx + 0.0499706 *x*dy + -0.00111332 *x*y + 6.16508e-05 *lens_ipow(x, 2)*y*dx + -4.99647e-05 *lens_ipow(y, 4)*dx*dy + -0.116753 *x*lens_ipow(dy, 5) + -1.45818 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.49592 *x*lens_ipow(dx, 4)*dy + -2.61735e-05 *lens_ipow(x, 4)*dx*dy + 1.77145e-06 *x*lens_ipow(y, 4)*dy*lambda + 0.021332 *lens_ipow(y, 3)*lens_ipow(dx, 5) + 0.0759269 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.0655726 *x*dy*lens_ipow(lambda, 7) + -3.66151e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*lambda + -8.38683e-08 *lens_ipow(x, 5)*y*lens_ipow(lambda, 3) + 0.0211081 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + 3.90223e-07 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 3)+0.0f;
const float dx02 =  + 7.63569  + -0.0134337 *dy + 12.392 *lens_ipow(dy, 2) + 38.3252 *lens_ipow(dx, 2) + 1.15799 *y*dy + 0.034187 *lens_ipow(y, 2) + 3.77801 *x*dx + 0.0866546 *lens_ipow(x, 2) + 3.08254e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -4.62751 *lens_ipow(lambda, 6) + -9.99294e-06 *lens_ipow(y, 5)*dy + -2.91636 *x*y*dx*lens_ipow(dy, 3) + -5.9837 *x*y*lens_ipow(dx, 3)*dy + -0.0267369 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + -2.61735e-05 *lens_ipow(x, 4)*y*dy + 0.0266651 *lens_ipow(y, 4)*lens_ipow(dx, 4) + 0.11389 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -31712.4 *lens_ipow(dx, 8)*lambda + -2.88716e-07 *lens_ipow(x, 7)*dx*lambda + -70.1478 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 6) + 0.0140721 *x*lens_ipow(y, 3)*dx*dy*lens_ipow(lambda, 4) + 2.92667e-07 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dx, 2)+0.0f;
const float dx03 =  + -0.0134337 *dx + 24.784 *dx*dy + 1.15799 *y*dx + 1.44503 *x*dy + 0.0499706 *x*y + -9.99294e-06 *lens_ipow(y, 5)*dx + -0.583763 *x*y*lens_ipow(dy, 4) + -4.37454 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.49592 *x*y*lens_ipow(dx, 4) + -2.61735e-05 *lens_ipow(x, 4)*y*dx + 3.54291e-07 *x*lens_ipow(y, 5)*lambda + 0.0759269 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -0.0136964 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 4) + -0.0655726 *x*y*lens_ipow(lambda, 7) + 0.00703605 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + 2.02003e-06 *lens_ipow(x, 7)*lens_ipow(dy, 3)+0.0f;
const float dx04 =  + -0.80262 *x*lens_ipow(lambda, 2) + -27.7651 *dx*lens_ipow(lambda, 5) + -0.106948 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 3) + 3.54291e-07 *x*lens_ipow(y, 5)*dy + -0.0273928 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -3523.6 *lens_ipow(dx, 9) + -0.459008 *x*y*dy*lens_ipow(lambda, 6) + -6.10251e-11 *lens_ipow(x, 3)*lens_ipow(y, 6) + -1.25802e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -1.44358e-07 *lens_ipow(x, 7)*lens_ipow(dx, 2) + -1.37445e-11 *lens_ipow(x, 9) + 11.7814 *x*lens_ipow(lambda, 9) + -105.222 *x*lens_ipow(dx, 4)*lens_ipow(lambda, 5) + 0.0281442 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx10 =  + 1.24646e-05 *y + 1.24023 *dx*dy + 0.0415129 *y*dx + 0.0664074 *x*dy + -0.00114043 *x*y + 0.0132079 *y*dx*lambda + -0.00427025 *lens_ipow(y, 2)*dx*dy + 0.114558 *x*lens_ipow(dy, 3) + -1.48468 *y*dx*lens_ipow(dy, 4) + 0.825236 *x*lens_ipow(dx, 4)*dy + 4.35025e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -5.67664e-05 *lens_ipow(x, 4)*dx*dy + 6.44357e-07 *lens_ipow(x, 4)*y*dx + -9.58864e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2)*lambda + -30.3653 *y*lens_ipow(dx, 5)*lens_ipow(dy, 2) + 0.0571448 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -3.25495e-07 *x*lens_ipow(y, 5)*lens_ipow(dy, 2) + -0.0503258 *y*dx*lens_ipow(lambda, 7) + -2.61093e-10 *x*lens_ipow(y, 7)*lens_ipow(lambda, 2) + -1.06758e-09 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx11 =  + -1.4375  + 0.000528357 *dy + 1.24646e-05 *x + 1.8975 *lens_ipow(dy, 2) + 0.683344 *lens_ipow(dx, 2) + 0.167374 *y*dy + -0.000221466 *y*dx + -0.00172148 *lens_ipow(y, 2) + 0.0415129 *x*dx + -0.000570216 *lens_ipow(x, 2) + -0.297598 *lens_ipow(lambda, 3) + 0.0132079 *x*dx*lambda + -0.00854049 *x*y*dx*dy + -1.48468 *x*dx*lens_ipow(dy, 4) + 4.35025e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 1.28871e-07 *lens_ipow(x, 5)*dx + -2.39716e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2)*lambda + 0.0189359 *lens_ipow(y, 3)*lens_ipow(dy, 5) + -30.3653 *x*lens_ipow(dx, 5)*lens_ipow(dy, 2) + 0.0571448 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -8.13738e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2) + 1.74361e-08 *lens_ipow(y, 7)*dy*lambda + -0.0503258 *x*dx*lens_ipow(lambda, 7) + 1.59946 *lens_ipow(lambda, 10) + 778.271 *lens_ipow(dy, 10) + -9.13826e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*lens_ipow(lambda, 2) + -5.3379e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx12 =  + 0.229534 *lens_ipow(dy, 2) + 24.0211 *dx*dy + 1.36669 *y*dx + -0.000110733 *lens_ipow(y, 2) + 1.24023 *x*dy + 0.0415129 *x*y + 0.0132079 *x*y*lambda + -0.00427025 *x*lens_ipow(y, 2)*dy + 7.41885 *dx*dy*lens_ipow(lambda, 4) + -1.48468 *x*y*lens_ipow(dy, 4) + 1.65047 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 1.45008e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.13533e-05 *lens_ipow(x, 5)*dy + 1.28871e-07 *lens_ipow(x, 5)*y + -151.826 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.0571448 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -0.0503258 *x*y*lens_ipow(lambda, 7)+0.0f;
const float dx13 =  + 7.88254  + 0.000528357 *y + 36.9882 *lens_ipow(dy, 2) + 0.459068 *dx*dy + 12.0105 *lens_ipow(dx, 2) + 3.795 *y*dy + 0.0836872 *lens_ipow(y, 2) + 1.24023 *x*dx + 0.0332037 *lens_ipow(x, 2) + -0.00427025 *x*lens_ipow(y, 2)*dx + 0.171837 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -9.94245 *lens_ipow(lambda, 5) + 3.70943 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -5.93872 *x*y*dx*lens_ipow(dy, 3) + 0.412618 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -1.13533e-05 *lens_ipow(x, 5)*dx + -4.79432e-05 *lens_ipow(x, 4)*y*dy*lambda + 0.0236699 *lens_ipow(y, 4)*lens_ipow(dy, 4) + -60.7305 *x*y*lens_ipow(dx, 5)*dy + 0.0857172 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.25495e-07 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + 2.17952e-09 *lens_ipow(y, 8)*lambda + 39.8188 *lens_ipow(lambda, 10) + 7782.71 *y*lens_ipow(dy, 9)+0.0f;
const float dx14 =  + -0.892793 *y*lens_ipow(lambda, 2) + 0.0132079 *x*y*dx + -49.7123 *dy*lens_ipow(lambda, 4) + 14.8377 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -2.39716e-05 *lens_ipow(x, 4)*y*lens_ipow(dy, 2) + 2.17952e-09 *lens_ipow(y, 8)*dy + -0.352281 *x*y*dx*lens_ipow(lambda, 6) + 398.188 *dy*lens_ipow(lambda, 9) + 15.9946 *y*lens_ipow(lambda, 9) + -2.61093e-10 *lens_ipow(x, 2)*lens_ipow(y, 7)*lambda + -3.5586e-10 *lens_ipow(x, 6)*lens_ipow(y, 3)*lambda+0.0f;
const float dx20 =  + -0.0841526  + 0.0180183 *lens_ipow(dy, 2) + 0.0627795 *lens_ipow(dx, 2) + 0.00141379 *y*dy + 6.70309e-05 *lens_ipow(y, 2) + 0.00539724 *x*dx + 0.000241426 *lens_ipow(x, 2) + -1.9187e-05 *x*y*dx*dy + -6.94939e-06 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 0.128218 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -6.09087e-06 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 1.9468e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00176429 *lens_ipow(lambda, 8) + -0.0310762 *x*y*dx*lens_ipow(dy, 5) + 0.000176332 *x*lens_ipow(y, 2)*lens_ipow(dx, 5) + -0.0150675 *lens_ipow(x, 2)*lens_ipow(dx, 6) + -1.52373e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + -1.64675e-07 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 2) + -1.11792 *lens_ipow(dx, 4)*lens_ipow(lambda, 6) + -3.65546e-15 *lens_ipow(y, 10) + 7.65346e-08 *lens_ipow(x, 5)*y*dx*dy*lens_ipow(lambda, 2) + -3.05201e-09 *lens_ipow(x, 6)*lens_ipow(lambda, 4) + -2.9356e-13 *lens_ipow(x, 6)*lens_ipow(y, 4) + -1.60462e-13 *lens_ipow(x, 8)*lens_ipow(y, 2) + -3.61907e-14 *lens_ipow(x, 10)+0.0f;
const float dx21 =  + 0.0445775 *dx*dy + 0.00270553 *y*dx + 0.00141379 *x*dy + 0.000134062 *x*y + 0.00458472 *y*lens_ipow(dx, 3) + -9.59349e-06 *lens_ipow(x, 2)*dx*dy + -0.00280002 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -2.08482e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + -6.09087e-06 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + 1.29787e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -2.57169e-05 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy + -0.0155381 *lens_ipow(x, 2)*dx*lens_ipow(dy, 5) + 0.000176332 *lens_ipow(x, 2)*y*lens_ipow(dx, 5) + -3.04747e-11 *lens_ipow(x, 3)*lens_ipow(y, 5) + -0.121143 *dx*dy*lens_ipow(lambda, 8) + -3.65546e-14 *x*lens_ipow(y, 9) + 1.27558e-08 *lens_ipow(x, 6)*dx*dy*lens_ipow(lambda, 2) + -1.67748e-13 *lens_ipow(x, 7)*lens_ipow(y, 3) + -3.56583e-14 *lens_ipow(x, 9)*y+0.0f;
const float dx22 =  + -0.225093  + -0.0013309 *dy + 0.69134 *lens_ipow(dy, 2) + 2.05302 *lens_ipow(dx, 2) + 0.0445775 *y*dy + 0.00135277 *lens_ipow(y, 2) + 0.125559 *x*dx + 0.00269862 *lens_ipow(x, 2) + -0.125917 *lens_ipow(lambda, 4) + 0.00687707 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -9.59349e-06 *lens_ipow(x, 2)*y*dy + -0.000933339 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 0.192327 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.04543e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -2458.91 *lens_ipow(dx, 2)*lens_ipow(dy, 6) + -1.54301e-05 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy + -0.0155381 *lens_ipow(x, 2)*y*lens_ipow(dy, 5) + 0.000440831 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.030135 *lens_ipow(x, 3)*lens_ipow(dx, 5) + -2.74459e-08 *lens_ipow(x, 6)*lens_ipow(lambda, 2) + -7774.16 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lambda + -3564.3 *lens_ipow(dx, 8)*lens_ipow(lambda, 2) + -0.121143 *y*dy*lens_ipow(lambda, 8) + -4.4717 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 6) + 1.27558e-08 *lens_ipow(x, 6)*y*dy*lens_ipow(lambda, 2)+0.0f;
const float dx23 =  + -0.0013309 *dx + 1.38268 *dx*dy + 0.0445775 *y*dx + 0.0360366 *x*dy + 0.00141379 *x*y + -9.59349e-06 *lens_ipow(x, 2)*y*dx + -0.00280002 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -2.08482e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.128218 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 1.29787e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -4917.83 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + -5.14338e-06 *lens_ipow(y, 5)*lens_ipow(dx, 3) + -0.0776906 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 4) + -2221.19 *lens_ipow(dx, 7)*dy*lambda + -0.121143 *y*dx*lens_ipow(lambda, 8) + 1.27558e-08 *lens_ipow(x, 6)*y*dx*lens_ipow(lambda, 2)+0.0f;
const float dx24 =  + -0.503668 *dx*lens_ipow(lambda, 3) + -6.09087e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lambda + -0.0141143 *x*lens_ipow(lambda, 7) + -5.48918e-08 *lens_ipow(x, 6)*dx*lambda + -1110.59 *lens_ipow(dx, 7)*lens_ipow(dy, 2) + -792.066 *lens_ipow(dx, 9)*lambda + -0.969146 *y*dx*dy*lens_ipow(lambda, 7) + -6.70755 *x*lens_ipow(dx, 4)*lens_ipow(lambda, 5) + 2.55115e-08 *lens_ipow(x, 6)*y*dx*dy*lambda + -1.74401e-09 *lens_ipow(x, 7)*lens_ipow(lambda, 3)+0.0f;
const float dx30 =  + 1.58292e-06  + 0.037641 *dx*dy + 0.00114241 *y*dx + 0.00232167 *x*dy + 0.000185005 *x*y + -0.0122643 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000486164 *y*dx*lens_ipow(dy, 2) + -8.08502e-06 *x*lens_ipow(y, 2)*dy*lambda + -0.000863154 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 0.0614745 *x*lens_ipow(dy, 5) + 0.06362 *x*lens_ipow(dx, 4)*dy + -1.23485e-09 *x*lens_ipow(y, 5) + -4.62034e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 2.4502e-07 *lens_ipow(x, 5)*lens_ipow(dy, 3) + 8.40294e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy*lambda + 1.86281e-11 *lens_ipow(y, 8)*dx*dy + 5.56953e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 8.51065e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.29077e-13 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const float dx31 =  + -0.0841902  + 0.062871 *lens_ipow(dy, 2) + 0.000197419 *dx*dy + 0.0140976 *lens_ipow(dx, 2) + 0.00543761 *y*dy + 0.000245926 *lens_ipow(y, 2) + 0.00114241 *x*dx + 9.25027e-05 *lens_ipow(x, 2) + 5.93259e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000486164 *x*dx*lens_ipow(dy, 2) + -8.08502e-06 *lens_ipow(x, 2)*y*dy*lambda + 0.134065 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00172631 *x*y*lens_ipow(dx, 3)*dy + -3.08713e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.54011e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -0.00096889 *lens_ipow(lambda, 7) + 0.000538781 *lens_ipow(y, 3)*lens_ipow(dy, 5) + -2.07693e-07 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 2) + -7.57452e-12 *lens_ipow(y, 8) + 1.12039e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy*lambda + -1.13769 *lens_ipow(dy, 4)*lens_ipow(lambda, 6) + -3.63678e-09 *lens_ipow(y, 6)*lens_ipow(lambda, 4) + 1.49025e-10 *x*lens_ipow(y, 7)*dx*dy + 2.78477e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 6.38299e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -8.59038e-14 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx32 =  + 0.000197419 *y*dy + 0.0281951 *y*dx + 0.037641 *x*dy + 0.00114241 *x*y + 1.80214 *dx*dy*lambda + 3.95506e-05 *lens_ipow(y, 3)*dx + -0.0245285 *x*dx*lens_ipow(dy, 2) + -0.000486164 *x*y*lens_ipow(dy, 2) + 0.134065 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -0.00258946 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.12724 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -4.62034e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 2.80098e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda + -13675.8 *dx*lens_ipow(dy, 9) + 1.86281e-11 *x*lens_ipow(y, 8)*dy + 2.78477e-05 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 4.25532e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx33 =  + -0.217603  + 2.02468 *lens_ipow(dy, 2) + 0.125742 *y*dy + 0.000197419 *y*dx + 0.0027188 *lens_ipow(y, 2) + 0.037641 *x*dx + 0.00116084 *lens_ipow(x, 2) + -0.104653 *lens_ipow(lambda, 3) + 0.901071 *lens_ipow(dx, 2)*lambda + -0.0245285 *x*lens_ipow(dx, 2)*dy + -0.000972329 *x*y*dx*dy + -4.04251e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.201097 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000863154 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + 0.153686 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 0.03181 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 0.000673477 *lens_ipow(y, 4)*lens_ipow(dy, 4) + -3.46155e-08 *lens_ipow(y, 6)*lens_ipow(lambda, 2) + 1.2251e-07 *lens_ipow(x, 6)*lens_ipow(dy, 2) + 2.80098e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lambda + -3126.67 *lens_ipow(dy, 8)*lens_ipow(lambda, 2) + -61541 *lens_ipow(dx, 2)*lens_ipow(dy, 8) + -4.55078 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 6) + 1.86281e-11 *x*lens_ipow(y, 8)*dx + 4.17715e-05 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const float dx34 =  + -0.31396 *dy*lens_ipow(lambda, 2) + 0.901071 *lens_ipow(dx, 2)*dy + -4.04251e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -0.00678223 *y*lens_ipow(lambda, 6) + -6.9231e-08 *lens_ipow(y, 6)*dy*lambda + 2.80098e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy + -694.816 *lens_ipow(dy, 9)*lambda + -6.82617 *y*lens_ipow(dy, 4)*lens_ipow(lambda, 5) + -2.07816e-09 *lens_ipow(y, 7)*lens_ipow(lambda, 3) + 4.25532e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda+0.0f;
const float dx40 =  + -0.000134569 *dy + -0.00112552 *dx + -1.04343e-05 *y + -0.000678142 *x + 0.000531139 *lens_ipow(dy, 2) + -6.42917e-07 *lens_ipow(y, 2) + -2.19722e-07 *lens_ipow(x, 2) + -0.00071396 *y*dx*dy + -0.00179018 *x*lens_ipow(dx, 2) + 7.85518e-06 *x*lens_ipow(y, 2) + 1.51663e-05 *lens_ipow(x, 3) + -6.62658e-07 *lens_ipow(y, 3)*dx + 8.56763e-07 *lens_ipow(x, 3)*y*dy + -3.35494e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -1.34633e-09 *lens_ipow(x, 7) + -7.3624e-12 *x*lens_ipow(y, 8) + -7.10089e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + -1.94138e-11 *lens_ipow(x, 3)*lens_ipow(y, 6) + 2.73214e-12 *lens_ipow(x, 4)*lens_ipow(y, 5) + -5.06791e-11 *lens_ipow(x, 5)*lens_ipow(y, 4) + 1.65156e-09 *lens_ipow(x, 7)*lens_ipow(dy, 2) + -2.0956e-11 *lens_ipow(x, 7)*lens_ipow(y, 2) + 5.90677e-13 *lens_ipow(y, 9)*dx + 1.14156e-13 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx41 =  + -1.36373e-05  + -0.00147188 *dy + -0.000390242 *y + -1.04343e-05 *x + -1.28583e-06 *x*y + -0.00716731 *lens_ipow(dx, 3) + -0.00131603 *y*lens_ipow(dx, 2) + 8.70358e-06 *lens_ipow(y, 2)*dx + -0.00071396 *x*dx*dy + 7.85518e-06 *lens_ipow(x, 2)*y + -1.98798e-06 *x*lens_ipow(y, 2)*dx + 0.000811287 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 9.13711e-08 *lens_ipow(y, 5) + 2.14191e-07 *lens_ipow(x, 4)*dy + -1.67747e-07 *lens_ipow(x, 4)*y*dx*dy + 2.22883e-09 *lens_ipow(y, 7)*lens_ipow(dx, 2) + -8.78562e-12 *lens_ipow(y, 9) + -2.94496e-11 *lens_ipow(x, 2)*lens_ipow(y, 7) + -1.18348e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy + -2.91207e-11 *lens_ipow(x, 4)*lens_ipow(y, 5) + 2.73214e-12 *lens_ipow(x, 5)*lens_ipow(y, 4) + -3.37861e-11 *lens_ipow(x, 6)*lens_ipow(y, 3) + -5.23899e-12 *lens_ipow(x, 8)*y + 5.3161e-12 *x*lens_ipow(y, 8)*dx + 2.53681e-14 *lens_ipow(x, 9)*y+0.0f;
const float dx42 =  + 0.000440114  + 0.0200556 *dx + -0.00112552 *x + -0.0215019 *y*lens_ipow(dx, 2) + -0.00131603 *lens_ipow(y, 2)*dx + 2.90119e-06 *lens_ipow(y, 3) + -0.00071396 *x*y*dy + -0.00179018 *lens_ipow(x, 2)*dx + -6.62658e-07 *x*lens_ipow(y, 3) + -8.38736e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy + 5.57207e-10 *lens_ipow(y, 8)*dx + -2.36696e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy + 5.90677e-13 *x*lens_ipow(y, 9)+0.0f;
const float dx43 =  + -0.0425982 *dy + -0.00147188 *y + -0.000134569 *x + 0.00106228 *x*dy + -0.00071396 *x*y*dx + 0.000811287 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 2.14191e-07 *lens_ipow(x, 4)*y + -8.38736e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx + -2.36696e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx + 4.1289e-10 *lens_ipow(x, 8)*dy+0.0f;
const float dx44 =  + 0.46321 *lens_ipow(lambda, 2) + -12.2703 *lens_ipow(lambda, 10)+0.0f;
