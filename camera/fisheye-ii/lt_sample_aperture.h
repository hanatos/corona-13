//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
#ifndef DEBUG_LOG
#define DEBUG_LOG
#endif
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + -7.48661e-05  + 31.8705 *begin_dx + 0.436491 *begin_x + -0.00434827 *begin_dx*begin_dy + -9.44772e-05 *begin_x*begin_dx + 23.493 *begin_dx*lens_ipow(begin_dy, 2) + 23.4024 *lens_ipow(begin_dx, 3) + 1.65118 *begin_y*begin_dx*begin_dy + 0.0146014 *lens_ipow(begin_y, 2)*begin_dx + 0.362828 *begin_x*lens_ipow(begin_dy, 2) + 2.00488 *begin_x*lens_ipow(begin_dx, 2) + 0.0174479 *begin_x*begin_y*begin_dy + -4.84547e-05 *begin_x*lens_ipow(begin_y, 2) + 0.0317825 *lens_ipow(begin_x, 2)*begin_dx + -5.88871e-05 *lens_ipow(begin_x, 3) + -0.275446 *begin_dx*lens_ipow(begin_lambda, 3) + -0.00911571 *begin_x*lens_ipow(begin_lambda, 4) + 8.46664e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 0.000162533 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + -0.00500617 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 3) + 0.00346054 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 1.87863e-06 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + -1.10053e-09 *begin_x*lens_ipow(begin_y, 6) + -2.96166e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + 3.60505e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -5.47443e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + 0.154323 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + -1.62895e-10 *lens_ipow(begin_y, 8)*begin_dx + -15.1628 *begin_x*lens_ipow(begin_dy, 8) + 5.78761e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dx*begin_dy + -0.0318514 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 6) + -2.1098e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6) + 7.17363e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 1.90932e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2) + -23796.2 *lens_ipow(begin_dx, 9)*lens_ipow(begin_dy, 2) + 1.04464e-05 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 0.155273 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 3.65732e-05 *lens_ipow(begin_x, 4)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + 5.38196e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -2.46275e-14 *lens_ipow(begin_x, 11),
       + 6.2105e-05  + 31.8523 *begin_dy + 0.436577 *begin_y + -1.05829e-05 *begin_x + 23.7694 *lens_ipow(begin_dy, 3) + 23.3543 *lens_ipow(begin_dx, 2)*begin_dy + 2.01849 *begin_y*lens_ipow(begin_dy, 2) + 0.361428 *begin_y*lens_ipow(begin_dx, 2) + 0.0319743 *lens_ipow(begin_y, 2)*begin_dy + -6.28848e-05 *lens_ipow(begin_y, 3) + 1.6358 *begin_x*begin_dx*begin_dy + 0.0172154 *begin_x*begin_y*begin_dx + 0.0144248 *lens_ipow(begin_x, 2)*begin_dy + -6.19596e-05 *lens_ipow(begin_x, 2)*begin_y + -0.00022343 *begin_x*begin_y*begin_dx*begin_dy + -0.357427 *begin_dy*lens_ipow(begin_lambda, 4) + -0.00803071 *begin_y*lens_ipow(begin_lambda, 4) + -0.0719071 *begin_y*lens_ipow(begin_dx, 4) + 0.000210144 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 0.0173161 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + 0.000249095 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 8.42586 *begin_x*begin_dx*lens_ipow(begin_dy, 5) + 9.61801e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -0.00397214 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3)*begin_dy + -0.000161053 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3) + -0.0549945 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 6) + 2.40036e-08 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2) + 0.860181 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 7) + 0.00822521 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -5.8725e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -1.57326e-10 *lens_ipow(begin_x, 8)*begin_dy + -6.14155e-12 *lens_ipow(begin_x, 8)*begin_y + 0.159106 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + -3.27603e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 283.107 *begin_y*lens_ipow(begin_dy, 10) + -2.53299e-14 *lens_ipow(begin_y, 11) + 0.0521695 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 6) + 1.02787e-07 *begin_x*lens_ipow(begin_y, 6)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -8.88835e-14 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 9) + 1.50521e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*begin_dx*begin_dy
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 31.8705  + -0.00434827 *begin_dy + -9.44772e-05 *begin_x + 23.493 *lens_ipow(begin_dy, 2) + 70.2071 *lens_ipow(begin_dx, 2) + 1.65118 *begin_y*begin_dy + 0.0146014 *lens_ipow(begin_y, 2) + 4.00976 *begin_x*begin_dx + 0.0317825 *lens_ipow(begin_x, 2) + -0.275446 *lens_ipow(begin_lambda, 3) + 8.46664e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -0.00500617 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 3.75727e-06 *begin_x*lens_ipow(begin_y, 4)*begin_dx + -2.96166e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + 0.308646 *begin_x*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + -1.62895e-10 *lens_ipow(begin_y, 8) + 5.78761e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dy + -0.191108 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 5) + 1.43473e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx + 3.81864e-08 *lens_ipow(begin_x, 7)*begin_dx + -214166 *lens_ipow(begin_dx, 8)*lens_ipow(begin_dy, 2) + 0.776365 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 3.65732e-05 *lens_ipow(begin_x, 4)*begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 5.38196e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dy+0.0f;
    dx1_domega0[0][1] =  + -0.00434827 *begin_dx + 46.986 *begin_dx*begin_dy + 1.65118 *begin_y*begin_dx + 0.725656 *begin_x*begin_dy + 0.0174479 *begin_x*begin_y + 8.46664e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 0.000325067 *lens_ipow(begin_x, 3)*begin_dy + -0.0150185 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + 0.0138421 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + 7.2101e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dy + 0.154323 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -121.302 *begin_x*lens_ipow(begin_dy, 7) + 5.78761e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dx + -47592.4 *lens_ipow(begin_dx, 9)*begin_dy + 2.08927e-05 *begin_x*lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 4) + 0.310546 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*begin_dy + 3.65732e-05 *lens_ipow(begin_x, 4)*begin_y*begin_dx*lens_ipow(begin_lambda, 4) + 5.38196e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dx+0.0f;
    dx1_domega0[1][0] =  + 46.7086 *begin_dx*begin_dy + 0.722855 *begin_y*begin_dx + 1.6358 *begin_x*begin_dy + 0.0172154 *begin_x*begin_y + -0.00022343 *begin_x*begin_y*begin_dy + -0.287628 *begin_y*lens_ipow(begin_dx, 3) + 0.000420287 *lens_ipow(begin_y, 3)*begin_dx + 0.0173161 *begin_x*begin_y*lens_ipow(begin_dy, 2) + 0.000249095 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 8.42586 *begin_x*lens_ipow(begin_dy, 5) + -0.0119164 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_dy + -0.00048316 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2) + 0.0164504 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 0.159106 *begin_x*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5) + 0.0521695 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 6) + 1.02787e-07 *begin_x*lens_ipow(begin_y, 6)*begin_dy*lens_ipow(begin_lambda, 2) + 1.50521e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*begin_dy+0.0f;
    dx1_domega0[1][1] =  + 31.8523  + 71.3082 *lens_ipow(begin_dy, 2) + 23.3543 *lens_ipow(begin_dx, 2) + 4.03697 *begin_y*begin_dy + 0.0319743 *lens_ipow(begin_y, 2) + 1.6358 *begin_x*begin_dx + 0.0144248 *lens_ipow(begin_x, 2) + -0.00022343 *begin_x*begin_y*begin_dx + -0.357427 *lens_ipow(begin_lambda, 4) + 0.0346321 *begin_x*begin_y*begin_dx*begin_dy + 0.000249095 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 42.1293 *begin_x*begin_dx*lens_ipow(begin_dy, 4) + 1.9236e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -0.00397214 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + -0.329967 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 5) + 4.80071e-08 *lens_ipow(begin_y, 7)*begin_dy + 6.02127 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 6) + 0.0246756 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -1.57326e-10 *lens_ipow(begin_x, 8) + 0.318213 *begin_x*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 5) + -3.27603e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + 2831.07 *begin_y*lens_ipow(begin_dy, 9) + 0.313017 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 5) + 1.02787e-07 *begin_x*lens_ipow(begin_y, 6)*begin_dx*lens_ipow(begin_lambda, 2) + 1.50521e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*begin_dx+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + -0.000784753  + 7.63569 *begin_dx + -1.44172 *begin_x + -0.0134337 *begin_dx*begin_dy + 8.22474e-06 *lens_ipow(begin_y, 2) + 1.89833e-05 *lens_ipow(begin_x, 2) + 12.392 *begin_dx*lens_ipow(begin_dy, 2) + 12.7751 *lens_ipow(begin_dx, 3) + 1.15799 *begin_y*begin_dx*begin_dy + 0.034187 *lens_ipow(begin_y, 2)*begin_dx + 0.722517 *begin_x*lens_ipow(begin_dy, 2) + 1.88901 *begin_x*lens_ipow(begin_dx, 2) + 0.0499706 *begin_x*begin_y*begin_dy + -0.000556658 *begin_x*lens_ipow(begin_y, 2) + 0.0866546 *lens_ipow(begin_x, 2)*begin_dx + -0.000546433 *lens_ipow(begin_x, 3) + -0.26754 *begin_x*lens_ipow(begin_lambda, 3) + 3.08254e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -4.62751 *begin_dx*lens_ipow(begin_lambda, 6) + -9.99294e-06 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + -0.116753 *begin_x*begin_y*lens_ipow(begin_dy, 5) + -1.45818 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -1.49592 *begin_x*begin_y*lens_ipow(begin_dx, 4)*begin_dy + -0.0267369 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 4) + -2.61735e-05 *lens_ipow(begin_x, 4)*begin_y*begin_dx*begin_dy + 3.54291e-07 *begin_x*lens_ipow(begin_y, 5)*begin_dy*begin_lambda + 0.00533301 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 5) + 0.0379634 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.0068482 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -3523.6 *lens_ipow(begin_dx, 9)*begin_lambda + -0.0655726 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 7) + -6.10251e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_lambda + -4.19341e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -1.44358e-07 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2)*begin_lambda + -1.37445e-11 *lens_ipow(begin_x, 9)*begin_lambda + 1.17814 *begin_x*lens_ipow(begin_lambda, 10) + -17.537 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + 0.00703605 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 4) + 9.75557e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3) + 5.05006e-07 *lens_ipow(begin_x, 7)*lens_ipow(begin_dy, 4);
    out[1] =  + 0.000311169  + 7.88254 *begin_dy + -1.4375 *begin_y + 0.000528357 *begin_y*begin_dy + 1.24646e-05 *begin_x*begin_y + 12.3294 *lens_ipow(begin_dy, 3) + 0.229534 *begin_dx*lens_ipow(begin_dy, 2) + 12.0105 *lens_ipow(begin_dx, 2)*begin_dy + 1.8975 *begin_y*lens_ipow(begin_dy, 2) + 0.683344 *begin_y*lens_ipow(begin_dx, 2) + 0.0836872 *lens_ipow(begin_y, 2)*begin_dy + -0.000110733 *lens_ipow(begin_y, 2)*begin_dx + -0.000573825 *lens_ipow(begin_y, 3) + 1.24023 *begin_x*begin_dx*begin_dy + 0.0415129 *begin_x*begin_y*begin_dx + 0.0332037 *lens_ipow(begin_x, 2)*begin_dy + -0.000570216 *lens_ipow(begin_x, 2)*begin_y + -0.297598 *begin_y*lens_ipow(begin_lambda, 3) + 0.0132079 *begin_x*begin_y*begin_dx*begin_lambda + -0.00427025 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.057279 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + -9.94245 *begin_dy*lens_ipow(begin_lambda, 5) + 3.70943 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 4) + -1.48468 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 4) + 0.412618 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4)*begin_dy + 1.45008e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx + -1.13533e-05 *lens_ipow(begin_x, 5)*begin_dx*begin_dy + 1.28871e-07 *lens_ipow(begin_x, 5)*begin_y*begin_dx + -2.39716e-05 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 0.00473397 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 5) + -30.3653 *begin_x*begin_y*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 0.0285724 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -1.62748e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + 2.17952e-09 *lens_ipow(begin_y, 8)*begin_dy*begin_lambda + -0.0503258 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 7) + 39.8188 *begin_dy*lens_ipow(begin_lambda, 10) + 1.59946 *begin_y*lens_ipow(begin_lambda, 10) + 778.271 *begin_y*lens_ipow(begin_dy, 10) + -1.30547e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*lens_ipow(begin_lambda, 2) + -1.7793e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2);
    out[2] =  + -1.11922e-05  + -0.225093 *begin_dx + -0.0841526 *begin_x + -0.0013309 *begin_dx*begin_dy + 0.69134 *begin_dx*lens_ipow(begin_dy, 2) + 0.684338 *lens_ipow(begin_dx, 3) + 0.0445775 *begin_y*begin_dx*begin_dy + 0.00135277 *lens_ipow(begin_y, 2)*begin_dx + 0.0180183 *begin_x*lens_ipow(begin_dy, 2) + 0.0627795 *begin_x*lens_ipow(begin_dx, 2) + 0.00141379 *begin_x*begin_y*begin_dy + 6.70309e-05 *begin_x*lens_ipow(begin_y, 2) + 0.00269862 *lens_ipow(begin_x, 2)*begin_dx + 8.04753e-05 *lens_ipow(begin_x, 3) + -0.125917 *begin_dx*lens_ipow(begin_lambda, 4) + 0.00229236 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + -9.59349e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -0.000933339 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 3) + -6.94939e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 0.0641089 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -3.04543e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + 6.48934e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -819.638 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6) + -5.14338e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3)*begin_dy + -0.00176429 *begin_x*lens_ipow(begin_lambda, 8) + -0.0155381 *lens_ipow(begin_x, 2)*begin_y*begin_dx*lens_ipow(begin_dy, 5) + 8.81661e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -0.0050225 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 6) + -5.07911e-12 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6) + -2.74459e-08 *lens_ipow(begin_x, 6)*begin_dx*lens_ipow(begin_lambda, 2) + -1110.59 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2)*begin_lambda + -396.033 *lens_ipow(begin_dx, 9)*lens_ipow(begin_lambda, 2) + -0.121143 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 8) + -1.11792 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + -3.65546e-15 *begin_x*lens_ipow(begin_y, 10) + 1.27558e-08 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -4.36002e-10 *lens_ipow(begin_x, 7)*lens_ipow(begin_lambda, 4) + -4.19371e-14 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 4) + -1.78292e-14 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2) + -3.29006e-15 *lens_ipow(begin_x, 11);
    out[3] =  + 1.42794e-06  + -0.217603 *begin_dy + -0.0841902 *begin_y + 1.58292e-06 *begin_x + 0.674894 *lens_ipow(begin_dy, 3) + 0.062871 *begin_y*lens_ipow(begin_dy, 2) + 0.000197419 *begin_y*begin_dx*begin_dy + 0.0140976 *begin_y*lens_ipow(begin_dx, 2) + 0.0027188 *lens_ipow(begin_y, 2)*begin_dy + 8.19753e-05 *lens_ipow(begin_y, 3) + 0.037641 *begin_x*begin_dx*begin_dy + 0.00114241 *begin_x*begin_y*begin_dx + 0.00116084 *lens_ipow(begin_x, 2)*begin_dy + 9.25027e-05 *lens_ipow(begin_x, 2)*begin_y + -0.104653 *begin_dy*lens_ipow(begin_lambda, 3) + 0.901071 *lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 1.97753e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -0.0122643 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.000486164 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -4.04251e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.0670325 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.000863154 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + 0.0307372 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + 0.03181 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4)*begin_dy + -6.17425e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + -1.54011e-05 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3) + -0.00096889 *begin_y*lens_ipow(begin_lambda, 7) + 0.000134695 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 5) + -3.46155e-08 *lens_ipow(begin_y, 6)*begin_dy*lens_ipow(begin_lambda, 2) + -8.41613e-13 *lens_ipow(begin_y, 9) + 4.08366e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 3) + 2.80098e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda + -347.408 *lens_ipow(begin_dy, 9)*lens_ipow(begin_lambda, 2) + -6837.89 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 9) + -1.13769 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 6) + -5.1954e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_lambda, 4) + 1.86281e-11 *begin_x*lens_ipow(begin_y, 8)*begin_dx*begin_dy + 1.39238e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 2.12766e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -2.86346e-14 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 3);
    float pred_out_cs[7] = {0.0f};
    lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0841526  + 0.0180183 *lens_ipow(begin_dy, 2) + 0.0627795 *lens_ipow(begin_dx, 2) + 0.00141379 *begin_y*begin_dy + 6.70309e-05 *lens_ipow(begin_y, 2) + 0.00539724 *begin_x*begin_dx + 0.000241426 *lens_ipow(begin_x, 2) + -1.9187e-05 *begin_x*begin_y*begin_dx*begin_dy + -6.94939e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 0.128218 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -6.09087e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + 1.9468e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.00176429 *lens_ipow(begin_lambda, 8) + -0.0310762 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 5) + 0.000176332 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -0.0150675 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 6) + -1.52373e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6) + -1.64675e-07 *lens_ipow(begin_x, 5)*begin_dx*lens_ipow(begin_lambda, 2) + -1.11792 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + -3.65546e-15 *lens_ipow(begin_y, 10) + 7.65346e-08 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -3.05201e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_lambda, 4) + -2.9356e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4) + -1.60462e-13 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2) + -3.61907e-14 *lens_ipow(begin_x, 10)+0.0f;
    domega2_dx0[0][1] =  + 0.0445775 *begin_dx*begin_dy + 0.00270553 *begin_y*begin_dx + 0.00141379 *begin_x*begin_dy + 0.000134062 *begin_x*begin_y + 0.00458472 *begin_y*lens_ipow(begin_dx, 3) + -9.59349e-06 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -0.00280002 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + -2.08482e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -6.09087e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + 1.29787e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dy, 2) + -2.57169e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3)*begin_dy + -0.0155381 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 5) + 0.000176332 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 5) + -3.04747e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5) + -0.121143 *begin_dx*begin_dy*lens_ipow(begin_lambda, 8) + -3.65546e-14 *begin_x*lens_ipow(begin_y, 9) + 1.27558e-08 *lens_ipow(begin_x, 6)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -1.67748e-13 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 3) + -3.56583e-14 *lens_ipow(begin_x, 9)*begin_y+0.0f;
    domega2_dx0[1][0] =  + 1.58292e-06  + 0.037641 *begin_dx*begin_dy + 0.00114241 *begin_y*begin_dx + 0.00232167 *begin_x*begin_dy + 0.000185005 *begin_x*begin_y + -0.0122643 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.000486164 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + -8.08502e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -0.000863154 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + 0.0614745 *begin_x*lens_ipow(begin_dy, 5) + 0.06362 *begin_x*lens_ipow(begin_dx, 4)*begin_dy + -1.23485e-09 *begin_x*lens_ipow(begin_y, 5) + -4.62034e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 2.4502e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 3) + 8.40294e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda + 1.86281e-11 *lens_ipow(begin_y, 8)*begin_dx*begin_dy + 5.56953e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 8.51065e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -2.29077e-13 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 3)+0.0f;
    domega2_dx0[1][1] =  + -0.0841902  + 0.062871 *lens_ipow(begin_dy, 2) + 0.000197419 *begin_dx*begin_dy + 0.0140976 *lens_ipow(begin_dx, 2) + 0.00543761 *begin_y*begin_dy + 0.000245926 *lens_ipow(begin_y, 2) + 0.00114241 *begin_x*begin_dx + 9.25027e-05 *lens_ipow(begin_x, 2) + 5.93259e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.000486164 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + -8.08502e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy*begin_lambda + 0.134065 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.00172631 *begin_x*begin_y*lens_ipow(begin_dx, 3)*begin_dy + -3.08713e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -1.54011e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + -0.00096889 *lens_ipow(begin_lambda, 7) + 0.000538781 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 5) + -2.07693e-07 *lens_ipow(begin_y, 5)*begin_dy*lens_ipow(begin_lambda, 2) + -7.57452e-12 *lens_ipow(begin_y, 8) + 1.12039e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + -1.13769 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 6) + -3.63678e-09 *lens_ipow(begin_y, 6)*lens_ipow(begin_lambda, 4) + 1.49025e-10 *begin_x*lens_ipow(begin_y, 7)*begin_dx*begin_dy + 2.78477e-05 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 6.38299e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -8.59038e-14 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += invJ[0][i]*delta_out[i];
      y += invJ[1][i]*delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    DEBUG_LOG;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.34271  + 0.000440114 *begin_dx + -1.36373e-05 *begin_y + -0.0212991 *lens_ipow(begin_dy, 2) + 0.0100278 *lens_ipow(begin_dx, 2) + -0.00147188 *begin_y*begin_dy + -0.000195121 *lens_ipow(begin_y, 2) + -0.000134569 *begin_x*begin_dy + -0.00112552 *begin_x*begin_dx + -1.04343e-05 *begin_x*begin_y + -0.000339071 *lens_ipow(begin_x, 2) + 0.154403 *lens_ipow(begin_lambda, 3) + 0.000531139 *begin_x*lens_ipow(begin_dy, 2) + -6.42917e-07 *begin_x*lens_ipow(begin_y, 2) + -7.32405e-08 *lens_ipow(begin_x, 3) + -0.00716731 *begin_y*lens_ipow(begin_dx, 3) + -0.000658014 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 2.90119e-06 *lens_ipow(begin_y, 3)*begin_dx + -0.00071396 *begin_x*begin_y*begin_dx*begin_dy + -0.000895088 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 3.92759e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 3.79158e-06 *lens_ipow(begin_x, 4) + -6.62658e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 0.000270429 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 1.52285e-08 *lens_ipow(begin_y, 6) + 2.14191e-07 *lens_ipow(begin_x, 4)*begin_y*begin_dy + -8.38736e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -1.68291e-10 *lens_ipow(begin_x, 8) + 2.78604e-10 *lens_ipow(begin_y, 8)*lens_ipow(begin_dx, 2) + -8.78562e-13 *lens_ipow(begin_y, 10) + -3.6812e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8) + -2.36696e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dx*begin_dy + -4.85345e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 6) + 5.46428e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 5) + -8.44652e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4) + 2.06445e-10 *lens_ipow(begin_x, 8)*lens_ipow(begin_dy, 2) + -2.61949e-12 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2) + -1.11549 *lens_ipow(begin_lambda, 11) + 5.90677e-13 *begin_x*lens_ipow(begin_y, 9)*begin_dx + 1.2684e-14 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2);
else
  out[4] = 0.0f;
