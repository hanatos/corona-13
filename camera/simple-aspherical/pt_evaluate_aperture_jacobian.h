const float dx00 =  + 0.829483  + 0.829079 *lens_ipow(dy, 2) + 3.18621 *lens_ipow(dx, 2) + 0.00934177 *y*dy + 2.44959e-05 *lens_ipow(y, 2) + 0.0318194 *x*dx + 2.49875e-07 *x*y + 6.99508e-05 *lens_ipow(x, 2) + 0.0445591 *lens_ipow(lambda, 4) + -0.0429779 *y*lens_ipow(dx, 2)*dy + -0.000174347 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0413184 *x*dx*lens_ipow(dy, 2) + -0.092435 *x*lens_ipow(dx, 3) + -0.000929973 *x*y*dx*dy + -0.000230059 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.339065 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.160331 *y*lens_ipow(dy, 5) + -0.679798 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -3.34437e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.20553 *lens_ipow(lambda, 10) + 2.39582 *x*y*lens_ipow(dx, 7)*dy+0.0f;
const float dx01 =  + 0.000260821 *dx + 2.35854 *dx*dy + 0.0120451 *y*dx + 0.00934177 *x*dy + 4.89918e-05 *x*y + 1.24937e-07 *lens_ipow(x, 2) + -0.0539115 *y*dx*lens_ipow(dy, 2) + -0.0429779 *x*lens_ipow(dx, 2)*dy + -0.000348694 *x*y*lens_ipow(dy, 2) + -0.000464986 *lens_ipow(x, 2)*dx*dy + -0.211982 *lens_ipow(dx, 5) + -0.000460118 *x*y*lens_ipow(dx, 2)*lambda + -0.160331 *x*lens_ipow(dy, 5) + -0.679798 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00204058 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 3) + 1.19791 *lens_ipow(x, 2)*lens_ipow(dx, 7)*dy+0.0f;
const float dx02 =  + 198.216  + 0.000260821 *y + 199.292 *lens_ipow(dy, 2) + 608.243 *lens_ipow(dx, 2) + 2.35854 *y*dy + 0.00602257 *lens_ipow(y, 2) + 6.37243 *x*dx + 0.0159097 *lens_ipow(x, 2) + 9.01885 *lens_ipow(lambda, 3) + -0.0269557 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0859558 *x*y*dx*dy + -0.0206592 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.138653 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.000464986 *lens_ipow(x, 2)*y*dy + -1.05991 *y*lens_ipow(dx, 4) + -0.000460118 *x*lens_ipow(y, 2)*dx*lambda + 2175.58 *lens_ipow(dy, 6) + 14949.3 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 31049.4 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.67813 *x*dx*lens_ipow(lambda, 4) + -1.3596 *x*y*dx*lens_ipow(dy, 3) + -1.33775e-06 *lens_ipow(x, 5)*dx + -37.6688 *lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -141.824 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + -0.000680194 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + 164154 *lens_ipow(dx, 8) + -41.5475 *lens_ipow(lambda, 10) + 8.38536 *lens_ipow(x, 2)*y*lens_ipow(dx, 6)*dy+0.0f;
const float dx03 =  + 0.000911091  + 398.584 *dx*dy + 2.35854 *y*dx + 1.65816 *x*dy + 0.00934177 *x*y + -0.0539115 *lens_ipow(y, 2)*dx*dy + -0.0429779 *x*y*lens_ipow(dx, 2) + -0.000348694 *x*lens_ipow(y, 2)*dy + -0.0413184 *lens_ipow(x, 2)*dx*dy + -0.000464986 *lens_ipow(x, 2)*y*dx + 13053.5 *dx*lens_ipow(dy, 5) + 19932.4 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 12419.8 *lens_ipow(dx, 5)*dy + -0.801654 *x*y*lens_ipow(dy, 4) + -2.0394 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -75.3376 *dx*dy*lens_ipow(lambda, 5) + -0.000680194 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + 1.19791 *lens_ipow(x, 2)*y*lens_ipow(dx, 7)+0.0f;
const float dx04 =  + 27.0566 *dx*lens_ipow(lambda, 2) + 0.178236 *x*lens_ipow(lambda, 3) + -0.000230059 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.35626 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -188.344 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -236.373 *lens_ipow(dx, 3)*lens_ipow(lambda, 4) + -0.00204058 *lens_ipow(y, 3)*dx*dy*lens_ipow(lambda, 2) + -415.475 *dx*lens_ipow(lambda, 9) + -2.0553 *x*lens_ipow(lambda, 9)+0.0f;
const float dx10 =  + 8.079e-06  + -0.000117274 *dy + 2.33801 *dx*dy + 0.00935804 *y*dx + 0.0121404 *x*dy + 4.89311e-05 *x*y + -0.043742 *y*dx*lens_ipow(dy, 2) + -0.0521651 *x*lens_ipow(dx, 2)*dy + -0.000288061 *x*y*lens_ipow(dy, 2) + -0.000341549 *x*y*lens_ipow(dx, 2) + -0.631091 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.163327 *y*lens_ipow(dx, 5) + -0.000953331 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -1.91927e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 1.06096 *lens_ipow(y, 2)*dx*lens_ipow(dy, 7) + -7.89237e-08 *x*lens_ipow(y, 4)*dy*lens_ipow(lambda, 4) + -0.00318295 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 6)+0.0f;
const float dx11 =  + 0.82946  + 3.19676 *lens_ipow(dy, 2) + 0.829491 *lens_ipow(dx, 2) + 0.0319756 *y*dy + 6.95967e-05 *lens_ipow(y, 2) + 0.00935804 *x*dx + 2.44656e-05 *lens_ipow(x, 2) + 0.0451561 *lens_ipow(lambda, 4) + -0.0914234 *y*lens_ipow(dy, 3) + -0.0364535 *y*lens_ipow(dx, 2)*dy + -0.043742 *x*dx*lens_ipow(dy, 2) + -0.000144031 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.000170775 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.408 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -3.5275e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -0.631091 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.163327 *x*lens_ipow(dx, 5) + -0.00190666 *x*y*dx*dy*lens_ipow(lambda, 2) + -1.27951e-06 *lens_ipow(x, 3)*y*dx*dy + -0.2093 *lens_ipow(lambda, 10) + 2.12192 *x*y*dx*lens_ipow(dy, 7) + -1.57847e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 4)+0.0f;
const float dx12 =  + 398.496 *dx*dy + 1.65898 *y*dx + 2.33801 *x*dy + 0.00935804 *x*y + -0.0364535 *lens_ipow(y, 2)*dx*dy + -0.043742 *x*y*lens_ipow(dy, 2) + -0.0521651 *lens_ipow(x, 2)*dx*dy + -0.000341549 *lens_ipow(x, 2)*y*dx + 12203.2 *dx*lens_ipow(dy, 5) + 19409.2 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 12937.9 *lens_ipow(dx, 5)*dy + -1.89327 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.816636 *x*y*lens_ipow(dx, 4) + -0.000953331 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -6.39755e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -81.1871 *dx*dy*lens_ipow(lambda, 5) + 1.06096 *x*lens_ipow(y, 2)*lens_ipow(dy, 7) + -0.00106098 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 6)+0.0f;
const float dx13 =  + 198.201  + -0.000117274 *x + 609.058 *lens_ipow(dy, 2) + 199.248 *lens_ipow(dx, 2) + 6.39351 *y*dy + 0.0159878 *lens_ipow(y, 2) + 2.33801 *x*dx + 0.00607021 *lens_ipow(x, 2) + 9.06814 *lens_ipow(lambda, 3) + -0.137135 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0182267 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.087484 *x*y*dx*dy + -0.0260825 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.000288061 *lens_ipow(x, 2)*y*dy + 30508 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 14556.9 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 2156.32 *lens_ipow(dx, 6) + -0.816 *y*dy*lens_ipow(lambda, 4) + -1.411e-06 *lens_ipow(y, 5)*dy + -1.26218 *x*y*lens_ipow(dx, 3)*dy + -0.000953331 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -6.39755e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -157.335 *lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -40.5936 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + 163461 *lens_ipow(dy, 8) + -41.2104 *lens_ipow(lambda, 10) + 7.42671 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 6) + -3.94619e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(lambda, 4) + -0.00106098 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 6)+0.0f;
const float dx14 =  + 27.2044 *dy*lens_ipow(lambda, 2) + 0.180624 *y*lens_ipow(lambda, 3) + -1.632 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.00190666 *x*lens_ipow(y, 2)*dx*dy*lambda + -262.225 *lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -202.968 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + -412.104 *dy*lens_ipow(lambda, 9) + -2.093 *y*lens_ipow(lambda, 9) + -1.57847e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy*lens_ipow(lambda, 3) + -0.00636591 *lens_ipow(x, 3)*dx*dy*lens_ipow(lambda, 5)+0.0f;
const float dx20 =  + -0.0052278  + 0.00505714 *lens_ipow(dy, 2) + 0.0143396 *lens_ipow(dx, 2) + 9.39294e-05 *y*dy + 5.91683e-07 *y*dx + 2.2259e-07 *lens_ipow(y, 2) + 1.44138e-08 *x*y + 7.09283e-07 *lens_ipow(x, 2) + 0.000553879 *x*dx*lambda + 0.00248041 *lens_ipow(lambda, 4) + -0.000494963 *y*lens_ipow(dx, 2)*dy + -8.77422e-06 *x*y*dx*dy + -0.00120294 *y*lens_ipow(dy, 5) + -1.12464e-05 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.00172345 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00237191 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -3.04868e-08 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.00356106 *lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -0.0119907 *lens_ipow(lambda, 10) + -0.0212661 *lens_ipow(dx, 2)*lens_ipow(lambda, 8) + -0.0024171 *x*dx*lens_ipow(lambda, 8)+0.0f;
const float dx21 =  + -6.16509e-07  + 0.00938814 *dx*dy + 8.28864e-07 *y*dy + 7.20435e-05 *y*dx + 9.39294e-05 *x*dy + 5.91683e-07 *x*dx + 4.4518e-07 *x*y + 7.2069e-09 *lens_ipow(x, 2) + -0.000198383 *y*dx*lens_ipow(dy, 2) + -0.000494963 *x*lens_ipow(dx, 2)*dy + -4.38711e-06 *lens_ipow(x, 2)*dx*dy + -0.00174928 *lens_ipow(dx, 5) + 1.4832e-05 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.00120294 *x*lens_ipow(dy, 5) + -2.24927e-05 *x*y*lens_ipow(dx, 4) + -0.0290002 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx22 =  + -0.0517651  + -0.460396 *lens_ipow(dy, 2) + -1.3563 *lens_ipow(dx, 2) + 0.00938814 *y*dy + 3.60217e-05 *lens_ipow(y, 2) + 0.0286791 *x*dx + 5.91683e-07 *x*y + 0.281101 *lens_ipow(lambda, 3) + 0.00027694 *lens_ipow(x, 2)*lambda + -9.91916e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000989926 *x*y*dx*dy + -4.38711e-06 *lens_ipow(x, 2)*y*dy + -0.00874642 *y*lens_ipow(dx, 4) + 10.5182 *lens_ipow(dy, 6) + 61.5024 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 156.953 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 1.9776e-05 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -4.49855e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.000861726 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00355786 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.21947e-08 *lens_ipow(x, 5)*dx + -0.0870006 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 807.324 *lens_ipow(dx, 8) + -1.38116 *lens_ipow(lambda, 10) + -0.0425322 *x*dx*lens_ipow(lambda, 8) + -0.00120855 *lens_ipow(x, 2)*lens_ipow(lambda, 8)+0.0f;
const float dx23 =  + -3.25995e-05  + -0.920793 *dx*dy + 0.00938814 *y*dx + 4.14432e-07 *lens_ipow(y, 2) + 0.0101143 *x*dy + 9.39294e-05 *x*y + -0.000198383 *lens_ipow(y, 2)*dx*dy + -0.000494963 *x*y*lens_ipow(dx, 2) + -4.38711e-06 *lens_ipow(x, 2)*y*dx + 63.1094 *dx*lens_ipow(dy, 5) + 82.0032 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 62.7813 *lens_ipow(dx, 5)*dy + -0.00601472 *x*y*lens_ipow(dy, 4) + -0.00172345 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 2) + -0.0290002 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -0.00712211 *x*dy*lens_ipow(lambda, 6)+0.0f;
const float dx24 =  + 0.843302 *dx*lens_ipow(lambda, 2) + 0.00027694 *lens_ipow(x, 2)*dx + 0.00992164 *x*lens_ipow(lambda, 3) + -0.00172345 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lambda + -0.00237191 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + -0.0870006 *y*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -0.0213663 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -13.8116 *dx*lens_ipow(lambda, 9) + -0.119907 *x*lens_ipow(lambda, 9) + -0.170129 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 7) + -0.00966841 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 7)+0.0f;
const float dx30 =  + -3.74672e-07  + -4.72128e-06 *dy + 2.38432e-06 *dx + 4.82065e-05 *lens_ipow(dy, 2) + 0.0092764 *dx*dy + 4.55767e-07 *y*dy + 9.33646e-05 *y*dx + 7.56378e-05 *x*dy + 4.44587e-07 *x*y + -0.000451272 *y*dx*lens_ipow(dy, 2) + -4.47914e-06 *lens_ipow(y, 2)*dx*dy + -0.000273395 *x*lens_ipow(dx, 2)*dy + -0.00168473 *y*lens_ipow(dx, 5) + -1.00818e-05 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -6.01136e-10 *x*lens_ipow(y, 4)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx31 =  + -0.00522682  + 8.51674e-08 *y + 0.0143555 *lens_ipow(dy, 2) + -2.86649e-05 *dx*dy + 0.00495887 *lens_ipow(dx, 2) + 6.9564e-07 *lens_ipow(y, 2) + 4.55767e-07 *x*dy + 9.33646e-05 *x*dx + 2.22293e-07 *lens_ipow(x, 2) + 0.000154186 *dx*lens_ipow(dy, 2) + 0.000559226 *y*dy*lambda + 0.00249751 *lens_ipow(lambda, 4) + -0.000451272 *x*dx*lens_ipow(dy, 2) + -8.95828e-06 *x*y*dx*dy + -0.00253304 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.00179476 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -3.48189e-08 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -0.00168473 *x*lens_ipow(dx, 5) + -5.0409e-06 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.20227e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + -0.0123033 *lens_ipow(lambda, 10) + -0.0218027 *lens_ipow(dy, 2)*lens_ipow(lambda, 8) + -0.00240116 *y*dy*lens_ipow(lambda, 8)+0.0f;
const float dx32 =  + 2.38432e-06 *x + -0.924396 *dx*dy + -2.86649e-05 *y*dy + 0.00991774 *y*dx + 0.0092764 *x*dy + 9.33646e-05 *x*y + 0.000154186 *y*lens_ipow(dy, 2) + -0.000451272 *x*y*lens_ipow(dy, 2) + -4.47914e-06 *x*lens_ipow(y, 2)*dy + -0.000273395 *lens_ipow(x, 2)*dx*dy + 71.5341 *dx*lens_ipow(dy, 5) + 67.3241 *lens_ipow(dx, 5)*dy + -0.00179476 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -0.00842366 *x*y*lens_ipow(dx, 4) + -1.00818e-05 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 3) + 278.42 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx33 =  + -0.0518182  + -4.72128e-06 *x + -1.3551 *lens_ipow(dy, 2) + -0.462198 *lens_ipow(dx, 2) + 0.0287111 *y*dy + -2.86649e-05 *y*dx + 9.64129e-05 *x*dy + 0.0092764 *x*dx + 4.55767e-07 *x*y + 3.78189e-05 *lens_ipow(x, 2) + 0.280513 *lens_ipow(lambda, 3) + 0.000308372 *y*dx*dy + 0.000279613 *lens_ipow(y, 2)*lambda + -0.000902543 *x*y*dx*dy + -4.47914e-06 *x*lens_ipow(y, 2)*dx + -0.000136698 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 178.835 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 11.2207 *lens_ipow(dx, 6) + -0.00379955 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000897379 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.39276e-08 *lens_ipow(y, 5)*dy + 912.801 *lens_ipow(dy, 8) + 208.815 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -3.00568e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(lambda, 3) + -1.38057 *lens_ipow(lambda, 10) + -0.0436055 *y*dy*lens_ipow(lambda, 8) + -0.00120058 *lens_ipow(y, 2)*lens_ipow(lambda, 8)+0.0f;
const float dx34 =  + 0.841538 *dy*lens_ipow(lambda, 2) + 0.000279613 *lens_ipow(y, 2)*dy + 0.00999004 *y*lens_ipow(lambda, 3) + -0.00253304 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + -0.00179476 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda + -1.51227e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 139.21 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + -9.01704e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy*lens_ipow(lambda, 2) + -13.8057 *dy*lens_ipow(lambda, 9) + -0.123033 *y*lens_ipow(lambda, 9) + -0.174422 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 7) + -0.00960465 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 7)+0.0f;
const float dx40 =  + 8.12812e-09  + -8.5362e-05 *dx + -6.77585e-07 *x + -0.0130694 *dx*lens_ipow(dy, 2) + -0.012046 *lens_ipow(dx, 3) + -7.24146e-05 *y*dx*dy + -1.40118e-08 *lens_ipow(y, 2)*dx + -6.99708e-05 *x*lens_ipow(dx, 2) + -1.58906e-07 *x*y*dy + -2.04119e-08 *x*y*dx + -0.000561567 *x*lens_ipow(dy, 4) + 0.00779052 *y*dx*lens_ipow(dy, 5) + 0.0119236 *y*lens_ipow(dx, 5)*dy + -41.8165 *lens_ipow(dx, 5)*lens_ipow(dy, 4) + -11.7605 *lens_ipow(dx, 9) + 3.65195e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -2.02188e-08 *lens_ipow(x, 5)*lens_ipow(dx, 4)+0.0f;
const float dx41 =  + -4.913e-08  + -7.49318e-05 *dy + -4.97833e-07 *y + -0.0122429 *lens_ipow(dy, 3) + -0.0135323 *lens_ipow(dx, 2)*dy + -7.47249e-05 *y*lens_ipow(dy, 2) + -2.68204e-05 *y*lens_ipow(dx, 2) + -7.24146e-05 *x*dx*dy + -2.80236e-08 *x*y*dx + -7.94532e-08 *lens_ipow(x, 2)*dy + -1.0206e-08 *lens_ipow(x, 2)*dx + 0.00779052 *x*dx*lens_ipow(dy, 5) + 0.0119236 *x*lens_ipow(dx, 5)*dy + -10.9938 *lens_ipow(dy, 9) + -1.85357e-08 *lens_ipow(y, 5)*lens_ipow(dy, 4) + 2.73896e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -38.2109 *lens_ipow(dx, 2)*lens_ipow(dy, 7)*lambda+0.0f;
const float dx42 =  + -2.5646e-06  + -0.0631703 *dx + -8.5362e-05 *x + -2.26491 *dx*lens_ipow(dy, 2) + -0.0270646 *y*dx*dy + -2.68204e-05 *lens_ipow(y, 2)*dx + -0.0130694 *x*lens_ipow(dy, 2) + -0.0361379 *x*lens_ipow(dx, 2) + -7.24146e-05 *x*y*dy + -1.40118e-08 *x*lens_ipow(y, 2) + -6.99708e-05 *lens_ipow(x, 2)*dx + -1.0206e-08 *lens_ipow(x, 2)*y + -43.1308 *dx*lens_ipow(dy, 4) + -76.0635 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -86.7627 *lens_ipow(dx, 5) + 0.00779052 *x*y*lens_ipow(dy, 5) + 0.0596179 *x*y*lens_ipow(dx, 4)*dy + -209.083 *x*lens_ipow(dx, 4)*lens_ipow(dy, 4) + -105.845 *x*lens_ipow(dx, 8) + 1.82597e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx*dy + -1.34792e-08 *lens_ipow(x, 6)*lens_ipow(dx, 3) + -76.4217 *y*dx*lens_ipow(dy, 7)*lambda+0.0f;
const float dx43 =  + 8.16678e-06  + -0.0640401 *dy + -7.49318e-05 *y + -2.26491 *lens_ipow(dx, 2)*dy + -0.0367288 *y*lens_ipow(dy, 2) + -0.0135323 *y*lens_ipow(dx, 2) + -7.47249e-05 *lens_ipow(y, 2)*dy + -0.0261388 *x*dx*dy + -7.24146e-05 *x*y*dx + -7.94532e-08 *lens_ipow(x, 2)*y + -84.8031 *lens_ipow(dy, 5) + -86.2617 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -38.0317 *lens_ipow(dx, 4)*dy + -0.00112313 *lens_ipow(x, 2)*lens_ipow(dy, 3) + 0.0389526 *x*y*dx*lens_ipow(dy, 4) + 0.0119236 *x*y*lens_ipow(dx, 5) + -98.9441 *y*lens_ipow(dy, 8) + -1.23571e-08 *lens_ipow(y, 6)*lens_ipow(dy, 3) + -167.266 *x*lens_ipow(dx, 5)*lens_ipow(dy, 3) + 9.12987e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -267.476 *y*lens_ipow(dx, 2)*lens_ipow(dy, 6)*lambda+0.0f;
const float dx44 =  + 0.0701151  + -0.177377 *lens_ipow(lambda, 2) + 1.18618 *lens_ipow(lambda, 10) + -38.2109 *y*lens_ipow(dx, 2)*lens_ipow(dy, 7)+0.0f;
