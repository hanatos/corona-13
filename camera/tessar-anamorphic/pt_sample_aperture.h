float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + -7.04901e-05  + 88.7549 *begin_dx + -3.59444e-06 *begin_y + 0.746116 *begin_x + 0.00393364 *lens_ipow(begin_dy, 2) + 0.0027943 *lens_ipow(begin_dx, 2) + 5.7837e-05 *begin_x*begin_dy + 61.8435 *begin_dx*lens_ipow(begin_dy, 2) + 62.4798 *lens_ipow(begin_dx, 3) + 1.79321 *begin_y*begin_dx*begin_dy + 0.00947158 *lens_ipow(begin_y, 2)*begin_dx + 1.17879 *begin_x*lens_ipow(begin_dy, 2) + 3.00255 *begin_x*lens_ipow(begin_dx, 2) + 0.025828 *begin_x*begin_y*begin_dy + 0.000118713 *begin_x*lens_ipow(begin_y, 2) + 0.0365142 *lens_ipow(begin_x, 2)*begin_dx + 0.000119619 *lens_ipow(begin_x, 3) + 3.65264 *begin_dx*lens_ipow(begin_lambda, 3) + 0.00209122 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 0.0419482 *begin_x*lens_ipow(begin_lambda, 3) + 5.82037e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 2) + 0.000256645 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 0.0417051 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + 1.74644e-05 *lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_dy, 2) + 1.64312e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + 2.23226e-07 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + 0.147654 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 4) + -0.00626952 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*begin_dy + -1.38128e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx + -9.19947e-11 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + -0.00316643 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 5) + -2.10946 *begin_x*lens_ipow(begin_dy, 6)*begin_lambda + 0.033881 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 3) + -12091.8 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 6) + -9173.74 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2) + -19.1573 *begin_dx*lens_ipow(begin_lambda, 10) + -1567.04 *lens_ipow(begin_dx, 7)*lens_ipow(begin_lambda, 4) + -0.604442 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 7)*lens_ipow(begin_lambda, 2) + -0.226439 *begin_x*lens_ipow(begin_lambda, 10) + 0.00770434 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 8);
  pred_y =  + 0.000111506  + 88.7444 *begin_dy + 0.747015 *begin_y + -9.31942e-06 *begin_x + 0.00496451 *begin_dx*begin_dy + -7.22249e-07 *begin_x*begin_y + 61.5721 *lens_ipow(begin_dy, 3) + 61.457 *lens_ipow(begin_dx, 2)*begin_dy + 3.00018 *begin_y*lens_ipow(begin_dy, 2) + 1.18915 *begin_y*lens_ipow(begin_dx, 2) + 0.0367408 *lens_ipow(begin_y, 2)*begin_dy + 0.000121283 *lens_ipow(begin_y, 3) + 1.79209 *begin_x*begin_dx*begin_dy + 1.52149e-05 *begin_x*begin_y*begin_dy + 0.0259214 *begin_x*begin_y*begin_dx + 2.28374e-07 *begin_x*lens_ipow(begin_y, 2) + 0.0104326 *lens_ipow(begin_x, 2)*begin_dy + 0.000121067 *lens_ipow(begin_x, 2)*begin_y + 3.8145 *begin_dy*lens_ipow(begin_lambda, 3) + 0.000296887 *begin_x*begin_dx*lens_ipow(begin_lambda, 2) + 4.52989e-05 *begin_x*begin_y*begin_dx*begin_dy + 0.068935 *begin_y*lens_ipow(begin_lambda, 4) + 0.0224844 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.184803 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.00264997 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + 2.77742e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + -9.07379e-09 *lens_ipow(begin_y, 6)*begin_dy + 5.60093e-07 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dy, 2) + -136.766 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 4) + 0.000789762 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 8.43138e-07 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -1.00385e-13 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -7.47471e-14 *lens_ipow(begin_x, 8)*begin_y + -15.2218 *begin_y*lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 3) + -20.1841 *begin_dy*lens_ipow(begin_lambda, 10) + -28862.2 *lens_ipow(begin_dy, 11) + -89123.6 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 9) + -245931 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 5) + -0.335914 *begin_y*lens_ipow(begin_lambda, 10) + -4.55116e-16 *lens_ipow(begin_y, 11);
  pred_dx =  + -7.41572e-06  + -6.80065e-05 *begin_dy + 1.61219 *begin_dx + -9.35555e-07 *begin_y + 0.00229368 *begin_x + 0.00059096 *begin_dx*begin_dy + 1.02031e-07 *lens_ipow(begin_y, 2) + -4.89523e-06 *begin_x*begin_dx + -6.89611e-08 *begin_x*begin_y + 7.1422 *begin_dx*lens_ipow(begin_dy, 2) + 7.28248 *lens_ipow(begin_dx, 3) + 0.130373 *begin_y*begin_dx*begin_dy + 0.000734551 *lens_ipow(begin_y, 2)*begin_dx + 0.0699194 *begin_x*lens_ipow(begin_dy, 2) + 0.200911 *begin_x*lens_ipow(begin_dx, 2) + 0.00145803 *begin_x*begin_y*begin_dy + 7.93143e-06 *begin_x*lens_ipow(begin_y, 2) + 0.00219186 *lens_ipow(begin_x, 2)*begin_dx + 7.88207e-06 *lens_ipow(begin_x, 3) + 9.82923e-08 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.528422 *begin_dx*lens_ipow(begin_lambda, 4) + 0.902644 *begin_dx*lens_ipow(begin_dy, 4) + 1.05487 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 0.000725671 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.986041 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -1.42639 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 3) + -0.00641514 *begin_x*lens_ipow(begin_lambda, 5) + -0.0684174 *begin_x*lens_ipow(begin_dy, 6) + 7.22507e-09 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -2.62541e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + 1.91517e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2) + -2.35823e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + -2.1421e-07 *lens_ipow(begin_x, 4)*begin_dx*lens_ipow(begin_lambda, 3) + 0.036196 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 7) + -0.010986 *begin_x*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + 0.0273155 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 7) + -0.0813517 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 7) + 2.54923 *begin_dx*lens_ipow(begin_lambda, 10) + -8.25955e-05 *lens_ipow(begin_y, 3)*begin_dx*begin_dy*lens_ipow(begin_lambda, 6) + 0.027659 *begin_x*lens_ipow(begin_lambda, 10);
  pred_dy =  + 1.69886e-06  + 1.62761 *begin_dy + -0.000117436 *begin_dx + 0.0023379 *begin_y + -1.69386e-07 *begin_x + -6.28315e-06 *begin_y*begin_dy + -9.73727e-08 *lens_ipow(begin_y, 2) + 1.49325e-05 *begin_x*begin_dy + 8.8508e-08 *begin_x*begin_y + 7.09311 *lens_ipow(begin_dy, 3) + 7.0812 *lens_ipow(begin_dx, 2)*begin_dy + 0.200098 *begin_y*lens_ipow(begin_dy, 2) + 0.0695817 *begin_y*lens_ipow(begin_dx, 2) + 0.0021833 *lens_ipow(begin_y, 2)*begin_dy + 7.90145e-06 *lens_ipow(begin_y, 3) + -2.38833e-05 *begin_x*lens_ipow(begin_dy, 2) + 0.129823 *begin_x*begin_dx*begin_dy + 0.0014561 *begin_x*begin_y*begin_dx + 0.000730256 *lens_ipow(begin_x, 2)*begin_dy + 6.10017e-07 *lens_ipow(begin_x, 2)*begin_dx + 7.92354e-06 *lens_ipow(begin_x, 2)*begin_y + -0.384908 *begin_dy*lens_ipow(begin_lambda, 3) + 3.20074e-06 *begin_x*begin_y*begin_dx*begin_dy + -0.00386528 *begin_y*lens_ipow(begin_lambda, 4) + 0.000800151 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + -0.543746 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 12.2998 *lens_ipow(begin_dx, 6)*begin_dy + -6.8766e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + 1.89017e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + 8.42922e-09 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2) + -7.01038e-09 *lens_ipow(begin_x, 5)*begin_dx*begin_dy + 1.30083e-06 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -5.21992 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 4) + 243.855 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 5) + -0.00783016 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6) + 0.0605838 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 7) + 7.99233e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + 2.16074 *begin_dy*lens_ipow(begin_lambda, 10) + 0.0194209 *begin_y*lens_ipow(begin_lambda, 10) + -2.44457e-17 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 7);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 88.7549  + 0.00558861 *begin_dx + 61.8435 *lens_ipow(begin_dy, 2) + 187.439 *lens_ipow(begin_dx, 2) + 1.79321 *begin_y*begin_dy + 0.00947158 *lens_ipow(begin_y, 2) + 6.00511 *begin_x*begin_dx + 0.0365142 *lens_ipow(begin_x, 2) + 3.65264 *lens_ipow(begin_lambda, 3) + 0.00209122 *lens_ipow(begin_y, 2)*begin_lambda + 0.0417051 *begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 1.74644e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + 0.147654 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + -0.0188085 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -1.38128e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -0.00316643 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 5) + 0.101643 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -36275.5 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 6) + -64216.2 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + -19.1573 *lens_ipow(begin_lambda, 10) + -10969.3 *lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 4) + -4.2311 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6)*lens_ipow(begin_lambda, 2)+0.0f;
  dx1_domega0[0][1] =  + 0.00786728 *begin_dy + 5.7837e-05 *begin_x + 123.687 *begin_dx*begin_dy + 1.79321 *begin_y*begin_dx + 2.35758 *begin_x*begin_dy + 0.025828 *begin_x*begin_y + 0.000513289 *lens_ipow(begin_x, 3)*begin_dy*begin_lambda + 0.0417051 *begin_y*begin_dx*lens_ipow(begin_lambda, 4) + 3.49289e-05 *lens_ipow(begin_y, 4)*begin_dx*begin_dy + 4.46453e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dy + 0.590615 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 3) + -0.00626952 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + -12.6568 *begin_x*lens_ipow(begin_dy, 5)*begin_lambda + -72551 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 5) + -18347.5 *lens_ipow(begin_dx, 7)*begin_dy + 0.00770434 *begin_x*begin_y*lens_ipow(begin_lambda, 8)+0.0f;
  dx1_domega0[1][0] =  + 0.00496451 *begin_dy + 122.914 *begin_dx*begin_dy + 2.3783 *begin_y*begin_dx + 1.79209 *begin_x*begin_dy + 0.0259214 *begin_x*begin_y + 0.000296887 *begin_x*lens_ipow(begin_lambda, 2) + 4.52989e-05 *begin_x*begin_y*begin_dy + 0.0224844 *begin_x*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 0.369606 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 5.55484e-07 *lens_ipow(begin_y, 5)*begin_dx + -273.532 *begin_dx*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 4) + 0.00157952 *lens_ipow(begin_x, 4)*begin_dx*lens_ipow(begin_dy, 3) + 1.68628e-06 *lens_ipow(begin_x, 4)*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -91.3306 *begin_y*lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 3) + -178247 *begin_dx*lens_ipow(begin_dy, 9) + -1.47558e+06 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 5)+0.0f;
  dx1_domega0[1][1] =  + 88.7444  + 0.00496451 *begin_dx + 184.716 *lens_ipow(begin_dy, 2) + 61.457 *lens_ipow(begin_dx, 2) + 6.00036 *begin_y*begin_dy + 0.0367408 *lens_ipow(begin_y, 2) + 1.79209 *begin_x*begin_dx + 1.52149e-05 *begin_x*begin_y + 0.0104326 *lens_ipow(begin_x, 2) + 3.8145 *lens_ipow(begin_lambda, 3) + 4.52989e-05 *begin_x*begin_y*begin_dx + 0.0449689 *begin_x*begin_y*begin_dx*begin_dy*begin_lambda + 0.554409 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.0105999 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + -9.07379e-09 *lens_ipow(begin_y, 6) + 1.12019e-06 *lens_ipow(begin_x, 4)*begin_y*begin_dy + -410.297 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 0.00236929 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -20.1841 *lens_ipow(begin_lambda, 10) + -317485 *lens_ipow(begin_dy, 10) + -802113 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 8) + -1.22965e+06 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 4)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
